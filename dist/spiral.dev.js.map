{"version":3,"sources":["webpack:///webpack/bootstrap c9a2d098e6cc80181eb8","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/ngraph.graph/index.js","webpack:///./node_modules/vivagraphjs/src/Input/domInputManager.js","webpack:///./node_modules/vivagraphjs/src/Input/dragndrop.js","webpack:///./node_modules/ngraph.expose/index.js","webpack:///./node_modules/vivagraphjs/src/WebGL/parseColor.js","webpack:///./node_modules/vivagraphjs/src/WebGL/webglSquare.js","webpack:///./node_modules/simplesvg/index.js","webpack:///./node_modules/ngraph.events/index.js","webpack:///./node_modules/gintersect/index.js","webpack:///./node_modules/vivagraphjs/src/WebGL/webglInputEvents.js","webpack:///./node_modules/vivagraphjs/src/Utils/documentEvents.js","webpack:///./node_modules/vivagraphjs/src/Utils/nullEvents.js","webpack:///./node_modules/vivagraphjs/src/Utils/browserInfo.js","webpack:///./node_modules/vivagraphjs/src/Utils/findElementPosition.js","webpack:///./node_modules/vivagraphjs/src/Input/webglInputManager.js","webpack:///./node_modules/vivagraphjs/src/Utils/timer.js","webpack:///./node_modules/vivagraphjs/src/Utils/getDimensions.js","webpack:///./node_modules/ngraph.forcelayout/index.js","webpack:///./node_modules/ngraph.physics.simulator/index.js","webpack:///./node_modules/vivagraphjs/src/Utils/rect.js","webpack:///./node_modules/vivagraphjs/src/WebGL/texture.js","webpack:///./node_modules/vivagraphjs/src/WebGL/webglAtlas.js","webpack:///./node_modules/vivagraphjs/src/WebGL/webglLinkProgram.js","webpack:///./node_modules/vivagraphjs/src/WebGL/webglNodeProgram.js","webpack:///./node_modules/vivagraphjs/src/WebGL/webglLine.js","webpack:///./node_modules/vivagraphjs/src/View/svgGraphics.js","webpack:///./node_modules/ngraph.random/index.js","webpack:///./node_modules/ngraph.merge/index.js","webpack:///./src/spiral.ts","webpack:///./node_modules/vivagraphjs/src/viva.js","webpack:///./node_modules/vivagraphjs/src/version.js","webpack:///./node_modules/ngraph.fromjson/index.js","webpack:///./node_modules/ngraph.tojson/index.js","webpack:///./node_modules/vivagraphjs/src/Algorithms/centrality.js","webpack:///./node_modules/ngraph.centrality/index.js","webpack:///./node_modules/ngraph.centrality/src/degree.js","webpack:///./node_modules/ngraph.centrality/src/betweenness.js","webpack:///./node_modules/vivagraphjs/src/Algorithms/operations.js","webpack:///./node_modules/vivagraphjs/src/Utils/intersectRect.js","webpack:///./node_modules/ngraph.generators/index.js","webpack:///./node_modules/vivagraphjs/src/Utils/backwardCompatibleEvents.js","webpack:///./node_modules/ngraph.physics.simulator/lib/spring.js","webpack:///./node_modules/ngraph.quadtreebh/index.js","webpack:///./node_modules/ngraph.quadtreebh/node.js","webpack:///./node_modules/ngraph.quadtreebh/insertStack.js","webpack:///./node_modules/ngraph.quadtreebh/isSamePosition.js","webpack:///./node_modules/ngraph.physics.simulator/lib/bounds.js","webpack:///./node_modules/ngraph.physics.simulator/lib/dragForce.js","webpack:///./node_modules/ngraph.physics.simulator/lib/springForce.js","webpack:///./node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","webpack:///./node_modules/ngraph.physics.simulator/lib/createBody.js","webpack:///./node_modules/ngraph.physics.primitives/index.js","webpack:///./node_modules/vivagraphjs/src/Layout/constant.js","webpack:///./node_modules/vivagraphjs/src/WebGL/webglImageNodeProgram.js","webpack:///./node_modules/vivagraphjs/src/WebGL/webglImage.js","webpack:///./node_modules/vivagraphjs/src/View/webglGraphics.js","webpack:///./node_modules/simplesvg/lib/compile.js","webpack:///./node_modules/simplesvg/lib/domparser.js","webpack:///./node_modules/simplesvg/lib/compile_template.js","webpack:///./node_modules/add-event-listener/index.js","webpack:///./node_modules/vivagraphjs/src/View/renderer.js","webpack:///./node_modules/vivagraphjs/src/Utils/windowEvents.js","webpack:///./src/webglNodeProgram.ts","webpack:///./node_modules/vivagraphjs/src/WebGL/webgl.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;ACpBA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB,wBAAwB;AACxB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4EAA4E;AAC5E;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,wCAAwC,YAAY;AACpD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,iBAAiB;AACpC;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACviBA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;AC9CA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA,yBAAyB,4CAA4C;AACrE;;AAEA;AACA;AACA,SAAS;;AAET;AACA,oCAAoC,qBAAqB,EAAE,OAAO,uBAAuB;AACzF,SAAS;AACT;AACA,mCAAmC,oBAAoB;AACvD,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,4BAA4B,WAAW,sBAAsB,EAAE;;AAE/D;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C;AAC3C,aAAa;AACb,sCAAsC;AACtC;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,oFAAoF;AACpF,iBAAiB;AACjB,wFAAwF;AACxF;AACA,aAAa;AACb;AACA,uFAAuF;AACvF,iBAAiB;AACjB,2FAA2F;AAC3F;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,kCAAkC,iDAAiD;AACnF;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B,SAAS;;AAET;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,wBAAwB,WAAW,sBAAsB,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;ACxRA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B,iBAAiB;AACjB,mBAAmB;AACnB;AACA;AACA,sBAAsB,uBAAuB;AAC7C,0BAA0B;AAC1B,qCAAqC;AACrC;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3CA;;AAEA;AACA;;AAEA;AACA,6BAA6B;AAC7B,+CAA+C;AAC/C;AACA,6BAA6B;AAC7B;AACA,KAAK,+BAA+B;AACpC;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;;;;;;;ACrBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA,8BAA8B;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9GA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,kBAAkB,gCAAgC;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,6BAA6B;;AAElD;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,yBAAyB,sBAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA;;;;;;;;ACvFA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;AClGA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,8BAA8B;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,2BAA2B;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;;;;;;;ACjQA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACrBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;;;;;;;;ACVjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AC1BA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;;;;;;;AChBA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B,eAAe;;AAEf;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oCAAoC,8CAA8C;AAClF;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA,aAAa,oDAAoD;AACjE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;AC3FA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnBA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ,gDAAgD;AACzE;AACA;AACA;AACA,yCAAyC;;AAEzC;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sCAAsC;;AAEtC;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,iBAAiB,OAAO;AACxB,iBAAiB,YAAY,EAAE,KAAK;AACpC,iBAAiB,UAAU,EAAE,KAAK;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,eAAe,QAAQ;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,QAAQ,0CAA0C;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;;;;;;;;AC7WjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ,qCAAqC;AAC9D;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA,iBAAiB,+BAA+B;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,iBAAiB,+BAA+B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,kBAAkB,QAAQ;;AAE1B;AACA,oBAAoB,QAAQ;;AAE5B;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,0BAA0B,aAAa;AACvC;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1QA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,cAAc;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,kBAAkB;AAClB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACzMA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,gCAAgC;AAChC,8BAA8B;AAC9B,qCAAqC;AACrC,cAAc;AACd;;AAEA;AACA,wCAAwC;AACxC,oCAAoC;;AAEpC,uCAAuC;AACvC,sCAAsC;;AAEtC,gCAAgC;;AAEhC,8BAA8B;AAC9B,qFAAqF;AACrF,qCAAqC;AACrC,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA,iCAAiC,iBAAiB;AAClD;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;;;;;;;AC3JA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,6BAA6B;AAC7B,wBAAwB;;AAExB,sBAAsB;AACtB,6BAA6B;AAC7B,MAAM;AACN;AACA;AACA,gCAAgC;AAChC,4BAA4B;AAC5B,+BAA+B;AAC/B,8BAA8B;AAC9B,wBAAwB;;AAExB,sBAAsB;AACtB,4EAA4E;AAC5E,yDAAyD;AACzD,6BAA6B;AAC7B,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;AClKA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET,qBAAqB,YAAY;AACjC,yBAAyB,YAAY;AACrC,uBAAuB,YAAY;;AAEnC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;AAEA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;AACA;AACA,kCAAkC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA,mEAAmE;;AAEnE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;ACnWA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC,OAAO;AAC7C,4CAA4C;AAC5C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,sCAAsC,OAAO;AAC7C,4CAA4C;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;ACpFA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;AC9BA,IAAI,IAAI,GAAI,mBAAO,CAAE,GAAa,CAAE,CAAC;AACrC,IAAI,WAAW,GAAG,mBAAO,CAAC,GAAsC,CAAC,CAAC;AAClE,oDAAmD;AAEnD,OAAO,CAAC,GAAG,CAAE,IAAI,CAAC;AAElB;IACI;QACI,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QAC/B,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAEpB,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAE/C,QAAQ,CAAC,IAAI,CAAE,CAAC,IAAI,EAAC,EAAE;YACnB,MAAM,CAAC,WAAW,CAAC,EAAE,EAAE,SAAS,CAAC;QACrC,CAAC,CAAC,CAAC;QACH,QAAQ,CAAC,cAAc,CAAC,mCAAgB,EAAE,CAAC;QAE3C,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EACzC;YACI,QAAQ,EAAG,QAAQ;SACtB,CAAC,CAAC;QACP,QAAQ,CAAC,GAAG,EAAE,CAAC;IACnB,CAAC;CAEJ;AAnBD,wBAmBC;;;;;;;;ACzBD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AC/GA;AACA;;;;;;;;ACDA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,yBAAyB;AACtC;AACA;AACA;AACA;;AAEA;AACA;;AAEA,aAAa,yBAAyB;AACtC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,gBAAgB,UAAU;;;;;;;;AC1C1B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACrDA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnCA;AACA;;;;;;;;ACDA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC1DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7GA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;;;;;;;AChCA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA,aAAa,OAAO;AACpB,eAAe,WAAW;AAC1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB,eAAe,OAAO;AACtB;AACA,kBAAkB,gCAAgC;AAClD,kBAAkB,kCAAkC;AACpD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA,oBAAoB,wCAAwC;AAC5D,oBAAoB,0CAA0C;AAC9D,oBAAoB,+CAA+C;AACnE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,eAAe;AAChC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;;AAElB;AACA;AACA;;;AAGA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA,iBAAiB,mBAAmB;AACpC,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,mBAAmB;AAChC,eAAe,OAAO;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC1SA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtUA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB,qBAAqB;AACrB;;;;;;;;ACzCA;AACA;AACA;;AAEA;AACA;;;;;;;;ACLA;AACA;AACA,sBAAsB;;AAEtB;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,QAAQ,EAAE;;AAE5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/EA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;AC1BA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACjDA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uBAAuB;AACvB;;AAEA;AACA;;;;;;;;AC5CA;;AAEA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AChEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,4CAA4C,2BAA2B;AACvE,4CAA4C,2BAA2B;AACvE,4CAA4C,2BAA2B;AACvE,4CAA4C,2BAA2B;AACvE,SAAS;;AAET,oFAAoF;;AAEpF;AACA;AACA;AACA,SAAS;;AAET;AACA,8CAA8C,QAAQ;;AAEtD;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB,SAAS;;AAET;AACA,wCAAwC,eAAe;AACvD;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;;;;;;ACpMA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B,wBAAwB;AACxB,gCAAgC;AAChC,kCAAkC;AAClC,kCAAkC;AAClC,kCAAkC;AAClC,kCAAkC;;AAElC,sBAAsB;AACtB,oCAAoC;AACpC,iEAAiE;AACjE,SAAS,kCAAkC;AAC3C,iEAAiE;AACjE,SAAS,kCAAkC;AAC3C,iEAAiE;AACjE,SAAS,kCAAkC;AAC3C,iEAAiE;AACjE,SAAS,OAAO,iCAAiC,EAAE;AACnD,MAAM;AACN;AACA;;AAEA;AACA;AACA,gCAAgC;;AAEhC,wCAAwC;AACxC,+BAA+B;AAC/B,8BAA8B;AAC9B,qCAAqC;AACrC,gCAAgC;;AAEhC,sBAAsB;AACtB,yEAAyE;AACzE,gDAAgD;AAChD,8EAA8E;AAC9E,iDAAiD;AACjD,qCAAqC;AACrC,oDAAoD;AACpD,kDAAkD;;AAElD,wBAAwB;AACxB,qCAAqC;AACrC,MAAM,yBAAyB;AAC/B,qCAAqC;AACrC,MAAM,yBAAyB;AAC/B,qCAAqC;AACrC,MAAM,OAAO;AACb,qCAAqC;AACrC,MAAM;;AAEN,+BAA+B;AAC/B,8CAA8C;AAC9C,2CAA2C;AAC3C,+EAA+E;AAC/E,MAAM;AACN;AACA;;;;;;;;ACrQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iCAAiC;AACjC,SAAS;;AAET;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,yBAAyB,kCAAkC;AAC3D,kCAAkC,+CAA+C;AACjF,kCAAkC,+CAA+C;AACjF;AACA,SAAS;;AAET;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;AAEA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iBAAiB;AAClD;AACA;;AAEA;;AAEA;AACA;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iBAAiB;AAClD;AACA;;AAEA;;AAEA;AACA;AACA;AACA,2BAA2B;AAC3B;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,uBAAuB;AACvB;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA,0CAA0C,QAAQ;;AAElD,yBAAyB;AACzB,2BAA2B;AAC3B,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACzkBA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;;;;;;ACzBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACbA;;AAEA,sBAAsB,OAAO;;AAE7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;;AAEA,uBAAuB;AACvB;AACA;;AAEA,kCAAkC;;AAElC;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;;AAErB;AACA,8BAA8B;;AAE9B;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA,8BAA8B;;AAE9B;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;AC3FA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK,8BAA8B;AACnC,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK,8BAA8B;AACnC,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL,8BAA8B;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oCAAoC;AACpC;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;;;;;;;AC9dA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;ACpBA,IAAI,OAAO,GAAG,mBAAO,CAAC,EAAgC,CAAC,CAAC;AAGxD;IACI,IAAI,wBAAwB,GAAG,CAAC,CAAC,CAAC,wCAAwC;IAC1E,kCAAkC;IAClC,IAAI,cAAc,GAAG,CAAC,GAAG,YAAY,CAAC,iBAAiB,GAAG,WAAW,CAAC,iBAAiB,CAAC;IACxF,IAAI,OAAO,GAAG;;;;;;;KAOb,CAAC;IAEF,IAAI,OAAO,GAAG;;;;;;;;;;;;KAYb,CAAC;IAEF,IAAI,OAAO,CAAC;IACZ,IAAI,EAAE,CAAC;IACP,IAAI,MAAM,CAAC;IACX,IAAI,SAAS,CAAC;IACd,IAAI,KAAK,CAAC;IACV,IAAI,OAAO,GAAG,IAAI,WAAW,CAAC,EAAE,GAAG,cAAc,CAAC,CAAC;IACnD,IAAI,SAAS,GAAG,IAAI,YAAY,CAAC,OAAO,CAAC,CAAC;IAC1C,IAAI,MAAM,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;IACtC,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,IAAI,KAAK,CAAC;IACV,IAAI,MAAM,CAAC;IACX,IAAI,SAAS,CAAC;IACd,IAAI,SAAS,CAAC;IAEd,MAAM,CAAC;QACH,IAAI,EAAE,IAAI;QAEV;;;;;WAKG;QACH,QAAQ,EAAE,QAAQ;QAElB,eAAe,EAAE,eAAe;QAEhC,UAAU,EAAE,UAAU;QAEtB,UAAU,EAAE,UAAU;QAEtB,UAAU,EAAE,UAAU;QAEtB,iBAAiB,EAAE,iBAAiB;QAEpC,MAAM,EAAE,MAAM;KACjB,CAAC;IAEF;QACI,EAAE,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,cAAc,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YAC1D,gEAAgE;YAChE,wFAAwF;YACxF,IAAI,eAAe,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,UAAU,GAAG,CAAC,CAAC,EACzD,iBAAiB,GAAG,IAAI,YAAY,CAAC,eAAe,CAAC,EACrD,cAAc,GAAG,IAAI,WAAW,CAAC,eAAe,CAAC,CAAC;YAEtD,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,0CAA0C;YACtE,SAAS,GAAG,iBAAiB,CAAC;YAC9B,MAAM,GAAG,cAAc,CAAC;YACxB,OAAO,GAAG,eAAe,CAAC;QAC9B,CAAC;IACL,CAAC;IAED,cAAc,SAAS;QACnB,EAAE,GAAG,SAAS,CAAC;QACf,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;QAE3B,OAAO,GAAG,KAAK,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAChD,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACvB,SAAS,GAAG,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,aAAa,EAAE,SAAS,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC,CAAC;QAEnG,EAAE,CAAC,uBAAuB,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAChD,EAAE,CAAC,uBAAuB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAE5C,MAAM,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC;IAC/B,CAAC;IAED,kBAAkB,MAAM,EAAE,GAAG;QACzB,IAAI,GAAG,GAAG,MAAM,CAAC,EAAE,CAAC;QAEpB,SAAS,CAAC,GAAG,GAAG,wBAAwB,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAClD,SAAS,CAAC,GAAG,GAAG,wBAAwB,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACvD,SAAS,CAAC,GAAG,GAAG,wBAAwB,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC;QAE5D,MAAM,CAAC,GAAG,GAAG,wBAAwB,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC;IAC9D,CAAC;IAED,yBAAyB,YAAY;QACjC,SAAS,GAAG,IAAI,CAAC;QACjB,SAAS,GAAG,YAAY,CAAC;IAC7B,CAAC;IAED,oBAAoB,CAAC,EAAE,CAAC;QACpB,KAAK,GAAG,CAAC,CAAC;QACV,MAAM,GAAG,CAAC,CAAC;QACX,SAAS,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,oBAAoB,IAAI;QACpB,EAAE,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;YACjB,UAAU,IAAI,CAAC,CAAC;QACpB,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,UAAU,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;YACzC,yDAAyD;YACzD,KAAK,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,GAAG,wBAAwB,EAAE,UAAU,GAAG,wBAAwB,EAAE,wBAAwB,CAAC,CAAC;QACrI,CAAC;IACL,CAAC;IAED;QACI,mBAAmB,EAAE,CAAC;QACtB,UAAU,IAAI,CAAC,CAAC;IACpB,CAAC;IAED,+BAAyD,CAAC;IAE1D;QACI,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACvB,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QACvC,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,OAAO,EAAE,EAAE,CAAC,YAAY,CAAC,CAAC;QAEzD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACZ,SAAS,GAAG,KAAK,CAAC;YAClB,EAAE,CAAC,gBAAgB,CAAC,SAAS,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;YAC3D,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACtD,CAAC;QAED,EAAE,CAAC,mBAAmB,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,wBAAwB,GAAG,YAAY,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;QAC9H,EAAE,CAAC,mBAAmB,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,aAAa,EAAE,IAAI,EAAE,wBAAwB,GAAG,YAAY,CAAC,iBAAiB,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;QAErI,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IAC5C,CAAC;AACL,CAAC;AArJD,4CAqJC;;;;;;;;ACzJD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,oCAAoC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;;AAEA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA","file":"spiral.dev.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 577);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c9a2d098e6cc80181eb8","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 10\n// module chunks = 0 1 2","/**\r\n * @fileOverview Contains definition of the core graph object.\r\n */\r\n\r\n/**\r\n * @example\r\n *  var graph = require('ngraph.graph')();\r\n *  graph.addNode(1);     // graph has one node.\r\n *  graph.addLink(2, 3);  // now graph contains three nodes and one link.\r\n *\r\n */\r\nmodule.exports = createGraph;\r\n\r\nvar eventify = require('ngraph.events');\r\n\r\n/**\r\n * Creates a new graph\r\n */\r\nfunction createGraph(options) {\r\n  // Graph structure is maintained as dictionary of nodes\r\n  // and array of links. Each node has 'links' property which\r\n  // hold all links related to that node. And general links\r\n  // array is used to speed up all links enumeration. This is inefficient\r\n  // in terms of memory, but simplifies coding.\r\n  options = options || {};\r\n  if (options.uniqueLinkId === undefined) {\r\n    // Request each link id to be unique between same nodes. This negatively\r\n    // impacts `addLink()` performance (O(n), where n - number of edges of each\r\n    // vertex), but makes operations with multigraphs more accessible.\r\n    options.uniqueLinkId = true;\r\n  }\r\n\r\n  var nodes = typeof Object.create === 'function' ? Object.create(null) : {},\r\n    links = [],\r\n    // Hash of multi-edges. Used to track ids of edges between same nodes\r\n    multiEdges = {},\r\n    nodesCount = 0,\r\n    suspendEvents = 0,\r\n\r\n    forEachNode = createNodeIterator(),\r\n    createLink = options.uniqueLinkId ? createUniqueLink : createSingleLink,\r\n\r\n    // Our graph API provides means to listen to graph changes. Users can subscribe\r\n    // to be notified about changes in the graph by using `on` method. However\r\n    // in some cases they don't use it. To avoid unnecessary memory consumption\r\n    // we will not record graph changes until we have at least one subscriber.\r\n    // Code below supports this optimization.\r\n    //\r\n    // Accumulates all changes made during graph updates.\r\n    // Each change element contains:\r\n    //  changeType - one of the strings: 'add', 'remove' or 'update';\r\n    //  node - if change is related to node this property is set to changed graph's node;\r\n    //  link - if change is related to link this property is set to changed graph's link;\r\n    changes = [],\r\n    recordLinkChange = noop,\r\n    recordNodeChange = noop,\r\n    enterModification = noop,\r\n    exitModification = noop;\r\n\r\n  // this is our public API:\r\n  var graphPart = {\r\n    /**\r\n     * Adds node to the graph. If node with given id already exists in the graph\r\n     * its data is extended with whatever comes in 'data' argument.\r\n     *\r\n     * @param nodeId the node's identifier. A string or number is preferred.\r\n     *   note: If you request options.uniqueLinkId, then node id should not\r\n     *   contain '👉 '. This will break link identifiers\r\n     * @param [data] additional data for the node being added. If node already\r\n     *   exists its data object is augmented with the new one.\r\n     *\r\n     * @return {node} The newly added node or node with given id if it already exists.\r\n     */\r\n    addNode: addNode,\r\n\r\n    /**\r\n     * Adds a link to the graph. The function always create a new\r\n     * link between two nodes. If one of the nodes does not exists\r\n     * a new node is created.\r\n     *\r\n     * @param fromId link start node id;\r\n     * @param toId link end node id;\r\n     * @param [data] additional data to be set on the new link;\r\n     *\r\n     * @return {link} The newly created link\r\n     */\r\n    addLink: addLink,\r\n\r\n    /**\r\n     * Removes link from the graph. If link does not exist does nothing.\r\n     *\r\n     * @param link - object returned by addLink() or getLinks() methods.\r\n     *\r\n     * @returns true if link was removed; false otherwise.\r\n     */\r\n    removeLink: removeLink,\r\n\r\n    /**\r\n     * Removes node with given id from the graph. If node does not exist in the graph\r\n     * does nothing.\r\n     *\r\n     * @param nodeId node's identifier passed to addNode() function.\r\n     *\r\n     * @returns true if node was removed; false otherwise.\r\n     */\r\n    removeNode: removeNode,\r\n\r\n    /**\r\n     * Gets node with given identifier. If node does not exist undefined value is returned.\r\n     *\r\n     * @param nodeId requested node identifier;\r\n     *\r\n     * @return {node} in with requested identifier or undefined if no such node exists.\r\n     */\r\n    getNode: getNode,\r\n\r\n    /**\r\n     * Gets number of nodes in this graph.\r\n     *\r\n     * @return number of nodes in the graph.\r\n     */\r\n    getNodesCount: function() {\r\n      return nodesCount;\r\n    },\r\n\r\n    /**\r\n     * Gets total number of links in the graph.\r\n     */\r\n    getLinksCount: function() {\r\n      return links.length;\r\n    },\r\n\r\n    /**\r\n     * Gets all links (inbound and outbound) from the node with given id.\r\n     * If node with given id is not found null is returned.\r\n     *\r\n     * @param nodeId requested node identifier.\r\n     *\r\n     * @return Array of links from and to requested node if such node exists;\r\n     *   otherwise null is returned.\r\n     */\r\n    getLinks: getLinks,\r\n\r\n    /**\r\n     * Invokes callback on each node of the graph.\r\n     *\r\n     * @param {Function(node)} callback Function to be invoked. The function\r\n     *   is passed one argument: visited node.\r\n     */\r\n    forEachNode: forEachNode,\r\n\r\n    /**\r\n     * Invokes callback on every linked (adjacent) node to the given one.\r\n     *\r\n     * @param nodeId Identifier of the requested node.\r\n     * @param {Function(node, link)} callback Function to be called on all linked nodes.\r\n     *   The function is passed two parameters: adjacent node and link object itself.\r\n     * @param oriented if true graph treated as oriented.\r\n     */\r\n    forEachLinkedNode: forEachLinkedNode,\r\n\r\n    /**\r\n     * Enumerates all links in the graph\r\n     *\r\n     * @param {Function(link)} callback Function to be called on all links in the graph.\r\n     *   The function is passed one parameter: graph's link object.\r\n     *\r\n     * Link object contains at least the following fields:\r\n     *  fromId - node id where link starts;\r\n     *  toId - node id where link ends,\r\n     *  data - additional data passed to graph.addLink() method.\r\n     */\r\n    forEachLink: forEachLink,\r\n\r\n    /**\r\n     * Suspend all notifications about graph changes until\r\n     * endUpdate is called.\r\n     */\r\n    beginUpdate: enterModification,\r\n\r\n    /**\r\n     * Resumes all notifications about graph changes and fires\r\n     * graph 'changed' event in case there are any pending changes.\r\n     */\r\n    endUpdate: exitModification,\r\n\r\n    /**\r\n     * Removes all nodes and links from the graph.\r\n     */\r\n    clear: clear,\r\n\r\n    /**\r\n     * Detects whether there is a link between two nodes.\r\n     * Operation complexity is O(n) where n - number of links of a node.\r\n     * NOTE: this function is synonim for getLink()\r\n     *\r\n     * @returns link if there is one. null otherwise.\r\n     */\r\n    hasLink: getLink,\r\n\r\n    /**\r\n     * Gets an edge between two nodes.\r\n     * Operation complexity is O(n) where n - number of links of a node.\r\n     *\r\n     * @param {string} fromId link start identifier\r\n     * @param {string} toId link end identifier\r\n     *\r\n     * @returns link if there is one. null otherwise.\r\n     */\r\n    getLink: getLink\r\n  };\r\n\r\n  // this will add `on()` and `fire()` methods.\r\n  eventify(graphPart);\r\n\r\n  monitorSubscribers();\r\n\r\n  return graphPart;\r\n\r\n  function monitorSubscribers() {\r\n    var realOn = graphPart.on;\r\n\r\n    // replace real `on` with our temporary on, which will trigger change\r\n    // modification monitoring:\r\n    graphPart.on = on;\r\n\r\n    function on() {\r\n      // now it's time to start tracking stuff:\r\n      graphPart.beginUpdate = enterModification = enterModificationReal;\r\n      graphPart.endUpdate = exitModification = exitModificationReal;\r\n      recordLinkChange = recordLinkChangeReal;\r\n      recordNodeChange = recordNodeChangeReal;\r\n\r\n      // this will replace current `on` method with real pub/sub from `eventify`.\r\n      graphPart.on = realOn;\r\n      // delegate to real `on` handler:\r\n      return realOn.apply(graphPart, arguments);\r\n    }\r\n  }\r\n\r\n  function recordLinkChangeReal(link, changeType) {\r\n    changes.push({\r\n      link: link,\r\n      changeType: changeType\r\n    });\r\n  }\r\n\r\n  function recordNodeChangeReal(node, changeType) {\r\n    changes.push({\r\n      node: node,\r\n      changeType: changeType\r\n    });\r\n  }\r\n\r\n  function addNode(nodeId, data) {\r\n    if (nodeId === undefined) {\r\n      throw new Error('Invalid node identifier');\r\n    }\r\n\r\n    enterModification();\r\n\r\n    var node = getNode(nodeId);\r\n    if (!node) {\r\n      // TODO: Should I check for 👉  here?\r\n      node = new Node(nodeId);\r\n      nodesCount++;\r\n      recordNodeChange(node, 'add');\r\n    } else {\r\n      recordNodeChange(node, 'update');\r\n    }\r\n\r\n    node.data = data;\r\n\r\n    nodes[nodeId] = node;\r\n\r\n    exitModification();\r\n    return node;\r\n  }\r\n\r\n  function getNode(nodeId) {\r\n    return nodes[nodeId];\r\n  }\r\n\r\n  function removeNode(nodeId) {\r\n    var node = getNode(nodeId);\r\n    if (!node) {\r\n      return false;\r\n    }\r\n\r\n    enterModification();\r\n\r\n    while (node.links.length) {\r\n      var link = node.links[0];\r\n      removeLink(link);\r\n    }\r\n\r\n    delete nodes[nodeId];\r\n    nodesCount--;\r\n\r\n    recordNodeChange(node, 'remove');\r\n\r\n    exitModification();\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  function addLink(fromId, toId, data) {\r\n    enterModification();\r\n\r\n    var fromNode = getNode(fromId) || addNode(fromId);\r\n    var toNode = getNode(toId) || addNode(toId);\r\n\r\n    var link = createLink(fromId, toId, data);\r\n\r\n    links.push(link);\r\n\r\n    // TODO: this is not cool. On large graphs potentially would consume more memory.\r\n    fromNode.links.push(link);\r\n    if (fromId !== toId) {\r\n      // make sure we are not duplicating links for self-loops\r\n      toNode.links.push(link);\r\n    }\r\n\r\n    recordLinkChange(link, 'add');\r\n\r\n    exitModification();\r\n\r\n    return link;\r\n  }\r\n\r\n  function createSingleLink(fromId, toId, data) {\r\n    var linkId = fromId.toString() + toId.toString();\r\n    return new Link(fromId, toId, data, linkId);\r\n  }\r\n\r\n  function createUniqueLink(fromId, toId, data) {\r\n    var linkId = fromId.toString() + '👉 ' + toId.toString();\r\n    var isMultiEdge = multiEdges.hasOwnProperty(linkId);\r\n    if (isMultiEdge || getLink(fromId, toId)) {\r\n      if (!isMultiEdge) {\r\n        multiEdges[linkId] = 0;\r\n      }\r\n      linkId += '@' + (++multiEdges[linkId]);\r\n    }\r\n\r\n    return new Link(fromId, toId, data, linkId);\r\n  }\r\n\r\n  function getLinks(nodeId) {\r\n    var node = getNode(nodeId);\r\n    return node ? node.links : null;\r\n  }\r\n\r\n  function removeLink(link) {\r\n    if (!link) {\r\n      return false;\r\n    }\r\n    var idx = indexOfElementInArray(link, links);\r\n    if (idx < 0) {\r\n      return false;\r\n    }\r\n\r\n    enterModification();\r\n\r\n    links.splice(idx, 1);\r\n\r\n    var fromNode = getNode(link.fromId);\r\n    var toNode = getNode(link.toId);\r\n\r\n    if (fromNode) {\r\n      idx = indexOfElementInArray(link, fromNode.links);\r\n      if (idx >= 0) {\r\n        fromNode.links.splice(idx, 1);\r\n      }\r\n    }\r\n\r\n    if (toNode) {\r\n      idx = indexOfElementInArray(link, toNode.links);\r\n      if (idx >= 0) {\r\n        toNode.links.splice(idx, 1);\r\n      }\r\n    }\r\n\r\n    recordLinkChange(link, 'remove');\r\n\r\n    exitModification();\r\n\r\n    return true;\r\n  }\r\n\r\n  function getLink(fromNodeId, toNodeId) {\r\n    // TODO: Use sorted links to speed this up\r\n    var node = getNode(fromNodeId),\r\n      i;\r\n    if (!node) {\r\n      return null;\r\n    }\r\n\r\n    for (i = 0; i < node.links.length; ++i) {\r\n      var link = node.links[i];\r\n      if (link.fromId === fromNodeId && link.toId === toNodeId) {\r\n        return link;\r\n      }\r\n    }\r\n\r\n    return null; // no link.\r\n  }\r\n\r\n  function clear() {\r\n    enterModification();\r\n    forEachNode(function(node) {\r\n      removeNode(node.id);\r\n    });\r\n    exitModification();\r\n  }\r\n\r\n  function forEachLink(callback) {\r\n    var i, length;\r\n    if (typeof callback === 'function') {\r\n      for (i = 0, length = links.length; i < length; ++i) {\r\n        callback(links[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function forEachLinkedNode(nodeId, callback, oriented) {\r\n    var node = getNode(nodeId);\r\n\r\n    if (node && node.links && typeof callback === 'function') {\r\n      if (oriented) {\r\n        return forEachOrientedLink(node.links, nodeId, callback);\r\n      } else {\r\n        return forEachNonOrientedLink(node.links, nodeId, callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  function forEachNonOrientedLink(links, nodeId, callback) {\r\n    var quitFast;\r\n    for (var i = 0; i < links.length; ++i) {\r\n      var link = links[i];\r\n      var linkedNodeId = link.fromId === nodeId ? link.toId : link.fromId;\r\n\r\n      quitFast = callback(nodes[linkedNodeId], link);\r\n      if (quitFast) {\r\n        return true; // Client does not need more iterations. Break now.\r\n      }\r\n    }\r\n  }\r\n\r\n  function forEachOrientedLink(links, nodeId, callback) {\r\n    var quitFast;\r\n    for (var i = 0; i < links.length; ++i) {\r\n      var link = links[i];\r\n      if (link.fromId === nodeId) {\r\n        quitFast = callback(nodes[link.toId], link);\r\n        if (quitFast) {\r\n          return true; // Client does not need more iterations. Break now.\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // we will not fire anything until users of this library explicitly call `on()`\r\n  // method.\r\n  function noop() {}\r\n\r\n  // Enter, Exit modification allows bulk graph updates without firing events.\r\n  function enterModificationReal() {\r\n    suspendEvents += 1;\r\n  }\r\n\r\n  function exitModificationReal() {\r\n    suspendEvents -= 1;\r\n    if (suspendEvents === 0 && changes.length > 0) {\r\n      graphPart.fire('changed', changes);\r\n      changes.length = 0;\r\n    }\r\n  }\r\n\r\n  function createNodeIterator() {\r\n    // Object.keys iterator is 1.3x faster than `for in` loop.\r\n    // See `https://github.com/anvaka/ngraph.graph/tree/bench-for-in-vs-obj-keys`\r\n    // branch for perf test\r\n    return Object.keys ? objectKeysIterator : forInIterator;\r\n  }\r\n\r\n  function objectKeysIterator(callback) {\r\n    if (typeof callback !== 'function') {\r\n      return;\r\n    }\r\n\r\n    var keys = Object.keys(nodes);\r\n    for (var i = 0; i < keys.length; ++i) {\r\n      if (callback(nodes[keys[i]])) {\r\n        return true; // client doesn't want to proceed. Return.\r\n      }\r\n    }\r\n  }\r\n\r\n  function forInIterator(callback) {\r\n    if (typeof callback !== 'function') {\r\n      return;\r\n    }\r\n    var node;\r\n\r\n    for (node in nodes) {\r\n      if (callback(nodes[node])) {\r\n        return true; // client doesn't want to proceed. Return.\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// need this for old browsers. Should this be a separate module?\r\nfunction indexOfElementInArray(element, array) {\r\n  if (array.indexOf) {\r\n    return array.indexOf(element);\r\n  }\r\n\r\n  var len = array.length,\r\n    i;\r\n\r\n  for (i = 0; i < len; i += 1) {\r\n    if (array[i] === element) {\r\n      return i;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n}\r\n\r\n/**\r\n * Internal structure to represent node;\r\n */\r\nfunction Node(id) {\r\n  this.id = id;\r\n  this.links = [];\r\n  this.data = null;\r\n}\r\n\r\n\r\n/**\r\n * Internal structure to represent links;\r\n */\r\nfunction Link(fromId, toId, data, id) {\r\n  this.fromId = fromId;\r\n  this.toId = toId;\r\n  this.data = data;\r\n  this.id = id;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.graph/index.js\n// module id = 177\n// module chunks = 2","/**\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\r\n\r\nmodule.exports = domInputManager;\r\n\r\nvar dragndrop = require('./dragndrop.js');\r\n\r\nfunction domInputManager(graph, graphics) {\r\n  var nodeEvents = {};\r\n  return {\r\n    /**\r\n     * Called by renderer to listen to drag-n-drop events from node. E.g. for SVG\r\n     * graphics we may listen to DOM events, whereas for WebGL the graphics\r\n     * should provide custom eventing mechanism.\r\n     *\r\n     * @param node - to be monitored.\r\n     * @param handlers - object with set of three callbacks:\r\n     *   onStart: function(),\r\n     *   onDrag: function(e, offset),\r\n     *   onStop: function()\r\n     */\r\n    bindDragNDrop: bindDragNDrop\r\n  };\r\n\r\n  function bindDragNDrop(node, handlers) {\r\n    var events;\r\n    if (handlers) {\r\n      var nodeUI = graphics.getNodeUI(node.id);\r\n      events = dragndrop(nodeUI);\r\n      if (typeof handlers.onStart === 'function') {\r\n        events.onStart(handlers.onStart);\r\n      }\r\n      if (typeof handlers.onDrag === 'function') {\r\n        events.onDrag(handlers.onDrag);\r\n      }\r\n      if (typeof handlers.onStop === 'function') {\r\n        events.onStop(handlers.onStop);\r\n      }\r\n\r\n      nodeEvents[node.id] = events;\r\n    } else if ((events = nodeEvents[node.id])) {\r\n      events.release();\r\n      delete nodeEvents[node.id];\r\n    }\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Input/domInputManager.js\n// module id = 178\n// module chunks = 2","/**\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\r\n\r\nmodule.exports = dragndrop;\r\n\r\nvar documentEvents = require('../Utils/documentEvents.js');\r\nvar browserInfo = require('../Utils/browserInfo.js');\r\nvar findElementPosition = require('../Utils/findElementPosition.js');\r\n\r\n// TODO: Move to input namespace\r\n// TODO: Methods should be extracted into the prototype. This class\r\n// does not need to consume so much memory for every tracked element\r\nfunction dragndrop(element) {\r\n    var start,\r\n        drag,\r\n        end,\r\n        scroll,\r\n        prevSelectStart,\r\n        prevDragStart,\r\n\r\n        startX = 0,\r\n        startY = 0,\r\n        dragObject,\r\n        touchInProgress = false,\r\n        pinchZoomLength = 0,\r\n\r\n        getMousePos = function (e) {\r\n            var posx = 0,\r\n                posy = 0;\r\n\r\n            e = e || window.event;\r\n\r\n            if (e.pageX || e.pageY) {\r\n                posx = e.pageX;\r\n                posy = e.pageY;\r\n            } else if (e.clientX || e.clientY) {\r\n                posx = e.clientX + window.document.body.scrollLeft + window.document.documentElement.scrollLeft;\r\n                posy = e.clientY + window.document.body.scrollTop + window.document.documentElement.scrollTop;\r\n            }\r\n\r\n            return [posx, posy];\r\n        },\r\n\r\n        move = function (e, clientX, clientY) {\r\n            if (drag) {\r\n                drag(e, {x : clientX - startX, y : clientY - startY });\r\n            }\r\n\r\n            startX = clientX;\r\n            startY = clientY;\r\n        },\r\n\r\n        stopPropagation = function (e) {\r\n            if (e.stopPropagation) { e.stopPropagation(); } else { e.cancelBubble = true; }\r\n        },\r\n        preventDefault = function (e) {\r\n            if (e.preventDefault) { e.preventDefault(); }\r\n        },\r\n\r\n        handleDisabledEvent = function (e) {\r\n            stopPropagation(e);\r\n            return false;\r\n        },\r\n\r\n        handleMouseMove = function (e) {\r\n            e = e || window.event;\r\n\r\n            move(e, e.clientX, e.clientY);\r\n        },\r\n\r\n        handleMouseDown = function (e) {\r\n            e = e || window.event;\r\n            if (touchInProgress) {\r\n                // modern browsers will fire mousedown for touch events too\r\n                // we do not want this, since touch is handled separately.\r\n                stopPropagation(e);\r\n                return false;\r\n            }\r\n            // for IE, left click == 1\r\n            // for Firefox, left click == 0\r\n            var isLeftButton = ((e.button === 1 && window.event !== null) || e.button === 0);\r\n\r\n            if (isLeftButton) {\r\n                startX = e.clientX;\r\n                startY = e.clientY;\r\n\r\n                // TODO: bump zIndex?\r\n                dragObject = e.target || e.srcElement;\r\n\r\n                if (start) { start(e, {x: startX, y : startY}); }\r\n\r\n                documentEvents.on('mousemove', handleMouseMove);\r\n                documentEvents.on('mouseup', handleMouseUp);\r\n\r\n\r\n                stopPropagation(e);\r\n                // TODO: What if event already there? Not bullet proof:\r\n                prevSelectStart = window.document.onselectstart;\r\n                prevDragStart = window.document.ondragstart;\r\n\r\n                window.document.onselectstart = handleDisabledEvent;\r\n                dragObject.ondragstart = handleDisabledEvent;\r\n\r\n                // prevent text selection (except IE)\r\n                return false;\r\n            }\r\n        },\r\n\r\n        handleMouseUp = function (e) {\r\n            e = e || window.event;\r\n\r\n            documentEvents.off('mousemove', handleMouseMove);\r\n            documentEvents.off('mouseup', handleMouseUp);\r\n\r\n            window.document.onselectstart = prevSelectStart;\r\n            dragObject.ondragstart = prevDragStart;\r\n            dragObject = null;\r\n            if (end) { end(e); }\r\n        },\r\n\r\n        handleMouseWheel = function (e) {\r\n            if (typeof scroll !== 'function') {\r\n                return;\r\n            }\r\n\r\n            e = e || window.event;\r\n            if (e.preventDefault) {\r\n                e.preventDefault();\r\n            }\r\n\r\n            e.returnValue = false;\r\n            var delta,\r\n                mousePos = getMousePos(e),\r\n                elementOffset = findElementPosition(element),\r\n                relMousePos = {\r\n                    x: mousePos[0] - elementOffset[0],\r\n                    y: mousePos[1] - elementOffset[1]\r\n                };\r\n\r\n            if (e.wheelDelta) {\r\n                delta = e.wheelDelta / 360; // Chrome/Safari\r\n            } else {\r\n                delta = e.detail / -9; // Mozilla\r\n            }\r\n\r\n            scroll(e, delta, relMousePos);\r\n        },\r\n\r\n        updateScrollEvents = function (scrollCallback) {\r\n            if (!scroll && scrollCallback) {\r\n                // client is interested in scrolling. Start listening to events:\r\n                if (browserInfo.browser === 'webkit') {\r\n                    element.addEventListener('mousewheel', handleMouseWheel, false); // Chrome/Safari\r\n                } else {\r\n                    element.addEventListener('DOMMouseScroll', handleMouseWheel, false); // Others\r\n                }\r\n            } else if (scroll && !scrollCallback) {\r\n                if (browserInfo.browser === 'webkit') {\r\n                    element.removeEventListener('mousewheel', handleMouseWheel, false); // Chrome/Safari\r\n                } else {\r\n                    element.removeEventListener('DOMMouseScroll', handleMouseWheel, false); // Others\r\n                }\r\n            }\r\n\r\n            scroll = scrollCallback;\r\n        },\r\n\r\n        getPinchZoomLength = function(finger1, finger2) {\r\n            return (finger1.clientX - finger2.clientX) * (finger1.clientX - finger2.clientX) +\r\n                   (finger1.clientY - finger2.clientY) * (finger1.clientY - finger2.clientY);\r\n        },\r\n\r\n        handleTouchMove = function (e) {\r\n            if (e.touches.length === 1) {\r\n                stopPropagation(e);\r\n\r\n                var touch = e.touches[0];\r\n                move(e, touch.clientX, touch.clientY);\r\n            } else if (e.touches.length === 2) {\r\n                // it's a zoom:\r\n                var currentPinchLength = getPinchZoomLength(e.touches[0], e.touches[1]);\r\n                var delta = 0;\r\n                if (currentPinchLength < pinchZoomLength) {\r\n                    delta = -1;\r\n                } else if (currentPinchLength > pinchZoomLength) {\r\n                    delta = 1;\r\n                }\r\n                scroll(e, delta, {x: e.touches[0].clientX, y: e.touches[0].clientY});\r\n                pinchZoomLength = currentPinchLength;\r\n                stopPropagation(e);\r\n                preventDefault(e);\r\n            }\r\n        },\r\n\r\n        handleTouchEnd = function (e) {\r\n            touchInProgress = false;\r\n            documentEvents.off('touchmove', handleTouchMove);\r\n            documentEvents.off('touchend', handleTouchEnd);\r\n            documentEvents.off('touchcancel', handleTouchEnd);\r\n            dragObject = null;\r\n            if (end) { end(e); }\r\n        },\r\n\r\n        handleSignleFingerTouch = function (e, touch) {\r\n            stopPropagation(e);\r\n            preventDefault(e);\r\n\r\n            startX = touch.clientX;\r\n            startY = touch.clientY;\r\n\r\n            dragObject = e.target || e.srcElement;\r\n\r\n            if (start) { start(e, {x: startX, y : startY}); }\r\n            // TODO: can I enter into the state when touch is in progress\r\n            // but it's still a single finger touch?\r\n            if (!touchInProgress) {\r\n                touchInProgress = true;\r\n                documentEvents.on('touchmove', handleTouchMove);\r\n                documentEvents.on('touchend', handleTouchEnd);\r\n                documentEvents.on('touchcancel', handleTouchEnd);\r\n            }\r\n        },\r\n\r\n        handleTouchStart = function (e) {\r\n            if (e.touches.length === 1) {\r\n                return handleSignleFingerTouch(e, e.touches[0]);\r\n            } else if (e.touches.length === 2) {\r\n                // handleTouchMove() will care about pinch zoom.\r\n                stopPropagation(e);\r\n                preventDefault(e);\r\n\r\n                pinchZoomLength = getPinchZoomLength(e.touches[0], e.touches[1]);\r\n\r\n            }\r\n            // don't care about the rest.\r\n        };\r\n\r\n\r\n    element.addEventListener('mousedown', handleMouseDown);\r\n    element.addEventListener('touchstart', handleTouchStart);\r\n\r\n    return {\r\n        onStart : function (callback) {\r\n            start = callback;\r\n            return this;\r\n        },\r\n\r\n        onDrag : function (callback) {\r\n            drag = callback;\r\n            return this;\r\n        },\r\n\r\n        onStop : function (callback) {\r\n            end = callback;\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Occurs when mouse wheel event happens. callback = function(e, scrollDelta, scrollPoint);\r\n         */\r\n        onScroll : function (callback) {\r\n            updateScrollEvents(callback);\r\n            return this;\r\n        },\r\n\r\n        release : function () {\r\n            // TODO: could be unsafe. We might wanna release dragObject, etc.\r\n            element.removeEventListener('mousedown', handleMouseDown);\r\n            element.removeEventListener('touchstart', handleTouchStart);\r\n\r\n            documentEvents.off('mousemove', handleMouseMove);\r\n            documentEvents.off('mouseup', handleMouseUp);\r\n            documentEvents.off('touchmove', handleTouchMove);\r\n            documentEvents.off('touchend', handleTouchEnd);\r\n            documentEvents.off('touchcancel', handleTouchEnd);\r\n\r\n            updateScrollEvents(null);\r\n        }\r\n    };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Input/dragndrop.js\n// module id = 179\n// module chunks = 2","module.exports = exposeProperties;\r\n\r\n/**\r\n * Augments `target` object with getter/setter functions, which modify settings\r\n *\r\n * @example\r\n *  var target = {};\r\n *  exposeProperties({ age: 42}, target);\r\n *  target.age(); // returns 42\r\n *  target.age(24); // make age 24;\r\n *\r\n *  var filteredTarget = {};\r\n *  exposeProperties({ age: 42, name: 'John'}, filteredTarget, ['name']);\r\n *  filteredTarget.name(); // returns 'John'\r\n *  filteredTarget.age === undefined; // true\r\n */\r\nfunction exposeProperties(settings, target, filter) {\r\n  var needsFilter = Object.prototype.toString.call(filter) === '[object Array]';\r\n  if (needsFilter) {\r\n    for (var i = 0; i < filter.length; ++i) {\r\n      augment(settings, target, filter[i]);\r\n    }\r\n  } else {\r\n    for (var key in settings) {\r\n      augment(settings, target, key);\r\n    }\r\n  }\r\n}\r\n\r\nfunction augment(source, target, key) {\r\n  if (source.hasOwnProperty(key)) {\r\n    if (typeof target[key] === 'function') {\r\n      // this accessor is already defined. Ignore it\r\n      return;\r\n    }\r\n    target[key] = function (value) {\r\n      if (value !== undefined) {\r\n        source[key] = value;\r\n        return target;\r\n      }\r\n      return source[key];\r\n    }\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.expose/index.js\n// module id = 180\n// module chunks = 2","module.exports = parseColor;\r\n\r\nfunction parseColor(color) {\r\n  var parsedColor = 0x009ee8ff;\r\n\r\n  if (typeof color === 'string' && color) {\r\n    if (color.length === 4) { // #rgb\r\n      color = color.replace(/([^#])/g, '$1$1'); // duplicate each letter except first #.\r\n    }\r\n    if (color.length === 9) { // #rrggbbaa\r\n      parsedColor = parseInt(color.substr(1), 16);\r\n    } else if (color.length === 7) { // or #rrggbb.\r\n      parsedColor = (parseInt(color.substr(1), 16) << 8) | 0xff;\r\n    } else {\r\n      throw 'Color expected in hex format with preceding \"#\". E.g. #00ff00. Got value: ' + color;\r\n    }\r\n  } else if (typeof color === 'number') {\r\n    parsedColor = color;\r\n  }\r\n\r\n  return parsedColor;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/WebGL/parseColor.js\n// module id = 181\n// module chunks = 2","var parseColor = require('./parseColor.js');\r\n\r\nmodule.exports = webglSquare;\r\n\r\n/**\r\n * Can be used as a callback in the webglGraphics.node() function, to\r\n * create a custom looking node.\r\n *\r\n * @param size - size of the node in pixels.\r\n * @param color - color of the node in '#rrggbbaa' or '#rgb' format.\r\n */\r\nfunction webglSquare(size, color) {\r\n  return {\r\n    /**\r\n     * Gets or sets size of the square side.\r\n     */\r\n    size: typeof size === 'number' ? size : 10,\r\n\r\n    /**\r\n     * Gets or sets color of the square.\r\n     */\r\n    color: parseColor(color)\r\n  };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/WebGL/webglSquare.js\n// module id = 182\n// module chunks = 2","module.exports = svg;\r\n\r\nsvg.compile = require('./lib/compile');\r\n\r\nvar compileTemplate = svg.compileTemplate = require('./lib/compile_template');\r\n\r\nvar domEvents = require('add-event-listener');\r\n\r\nvar svgns = \"http://www.w3.org/2000/svg\";\r\nvar xlinkns = \"http://www.w3.org/1999/xlink\";\r\n\r\nfunction svg(element, attrBag) {\r\n  var svgElement = augment(element);\r\n  if (attrBag === undefined) {\r\n    return svgElement;\r\n  }\r\n\r\n  var attributes = Object.keys(attrBag);\r\n  for (var i = 0; i < attributes.length; ++i) {\r\n    var attributeName = attributes[i];\r\n    var value = attrBag[attributeName];\r\n    if (attributeName === 'link') {\r\n      svgElement.link(value);\r\n    } else {\r\n      svgElement.attr(attributeName, value);\r\n    }\r\n  }\r\n\r\n  return svgElement;\r\n}\r\n\r\nfunction augment(element) {\r\n  var svgElement = element;\r\n\r\n  if (typeof element === \"string\") {\r\n    svgElement = window.document.createElementNS(svgns, element);\r\n  } else if (element.simplesvg) {\r\n    return element;\r\n  }\r\n\r\n  var compiledTempalte;\r\n\r\n  svgElement.simplesvg = true; // this is not good, since we are monkey patching svg\r\n  svgElement.attr = attr;\r\n  svgElement.append = append;\r\n  svgElement.link = link;\r\n  svgElement.text = text;\r\n\r\n  // add easy eventing\r\n  svgElement.on = on;\r\n  svgElement.off = off;\r\n\r\n  // data binding:\r\n  svgElement.dataSource = dataSource;\r\n\r\n  return svgElement;\r\n\r\n  function dataSource(model) {\r\n    if (!compiledTempalte) compiledTempalte = compileTemplate(svgElement);\r\n    compiledTempalte.link(model);\r\n    return svgElement;\r\n  }\r\n\r\n  function on(name, cb, useCapture) {\r\n    domEvents.addEventListener(svgElement, name, cb, useCapture);\r\n    return svgElement;\r\n  }\r\n\r\n  function off(name, cb, useCapture) {\r\n    domEvents.removeEventListener(svgElement, name, cb, useCapture);\r\n    return svgElement;\r\n  }\r\n\r\n  function append(content) {\r\n    var child = svg(content);\r\n    svgElement.appendChild(child);\r\n\r\n    return child;\r\n  }\r\n\r\n  function attr(name, value) {\r\n    if (arguments.length === 2) {\r\n      if (value !== null) {\r\n        svgElement.setAttributeNS(null, name, value);\r\n      } else {\r\n        svgElement.removeAttributeNS(null, name);\r\n      }\r\n\r\n      return svgElement;\r\n    }\r\n\r\n    return svgElement.getAttributeNS(null, name);\r\n  }\r\n\r\n  function link(target) {\r\n    if (arguments.length) {\r\n      svgElement.setAttributeNS(xlinkns, \"xlink:href\", target);\r\n      return svgElement;\r\n    }\r\n\r\n    return svgElement.getAttributeNS(xlinkns, \"xlink:href\");\r\n  }\r\n\r\n  function text(textContent) {\r\n    if (textContent !== undefined) {\r\n        svgElement.textContent = textContent;\r\n        return svgElement;\r\n    }\r\n    return svgElement.textContent;\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/simplesvg/index.js\n// module id = 183\n// module chunks = 2","module.exports = function(subject) {\r\n  validateSubject(subject);\r\n\r\n  var eventsStorage = createEventsStorage(subject);\r\n  subject.on = eventsStorage.on;\r\n  subject.off = eventsStorage.off;\r\n  subject.fire = eventsStorage.fire;\r\n  return subject;\r\n};\r\n\r\nfunction createEventsStorage(subject) {\r\n  // Store all event listeners to this hash. Key is event name, value is array\r\n  // of callback records.\r\n  //\r\n  // A callback record consists of callback function and its optional context:\r\n  // { 'eventName' => [{callback: function, ctx: object}] }\r\n  var registeredEvents = Object.create(null);\r\n\r\n  return {\r\n    on: function (eventName, callback, ctx) {\r\n      if (typeof callback !== 'function') {\r\n        throw new Error('callback is expected to be a function');\r\n      }\r\n      var handlers = registeredEvents[eventName];\r\n      if (!handlers) {\r\n        handlers = registeredEvents[eventName] = [];\r\n      }\r\n      handlers.push({callback: callback, ctx: ctx});\r\n\r\n      return subject;\r\n    },\r\n\r\n    off: function (eventName, callback) {\r\n      var wantToRemoveAll = (typeof eventName === 'undefined');\r\n      if (wantToRemoveAll) {\r\n        // Killing old events storage should be enough in this case:\r\n        registeredEvents = Object.create(null);\r\n        return subject;\r\n      }\r\n\r\n      if (registeredEvents[eventName]) {\r\n        var deleteAllCallbacksForEvent = (typeof callback !== 'function');\r\n        if (deleteAllCallbacksForEvent) {\r\n          delete registeredEvents[eventName];\r\n        } else {\r\n          var callbacks = registeredEvents[eventName];\r\n          for (var i = 0; i < callbacks.length; ++i) {\r\n            if (callbacks[i].callback === callback) {\r\n              callbacks.splice(i, 1);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return subject;\r\n    },\r\n\r\n    fire: function (eventName) {\r\n      var callbacks = registeredEvents[eventName];\r\n      if (!callbacks) {\r\n        return subject;\r\n      }\r\n\r\n      var fireArguments;\r\n      if (arguments.length > 1) {\r\n        fireArguments = Array.prototype.splice.call(arguments, 1);\r\n      }\r\n      for(var i = 0; i < callbacks.length; ++i) {\r\n        var callbackInfo = callbacks[i];\r\n        callbackInfo.callback.apply(callbackInfo.ctx, fireArguments);\r\n      }\r\n\r\n      return subject;\r\n    }\r\n  };\r\n}\r\n\r\nfunction validateSubject(subject) {\r\n  if (!subject) {\r\n    throw new Error('Eventify cannot use falsy object as events subject');\r\n  }\r\n  var reservedWords = ['on', 'fire', 'off'];\r\n  for (var i = 0; i < reservedWords.length; ++i) {\r\n    if (subject.hasOwnProperty(reservedWords[i])) {\r\n      throw new Error(\"Subject cannot be eventified, since it already has property '\" + reservedWords[i] + \"'\");\r\n    }\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.events/index.js\n// module id = 22\n// module chunks = 2","module.exports = intersect;\r\n\r\n/**\r\n * Original authors: Mukesh Prasad, Appeared in Graphics Gem II book\r\n * http://www.opensource.apple.com/source/graphviz/graphviz-498/graphviz/dynagraph/common/xlines.c\r\n * and adopted to javascript version by Andrei Kashcha.\r\n *\r\n * This function computes whether two line segments,\r\n * respectively joining the input points (x1,y1) -- (x2,y2)\r\n * and the input points (x3,y3) -- (x4,y4) intersect.\r\n * If the lines intersect, the output variables x, y are\r\n * set to coordinates of the point of intersection.\r\n *\r\n * @param {Number} x1 First line segment coordinates\r\n * @param {Number} y1 First line segment coordinates\r\n * @param {Number} x2 First line segment coordinates\r\n * @param {Number} x2 First line segment coordinates\r\n *\r\n * @param {Number} x3 Second line segment coordinates\r\n * @param {Number} y3 Second line segment coordinates\r\n * @param {Number} x4 Second line segment coordinates\r\n * @param {Number} x4 Second line segment coordinates\r\n *\r\n * @return {Object} x, y coordinates of intersection point or falsy value if no\r\n * intersection found..\r\n */\r\nfunction intersect(\r\n  x1, y1, x2, y2, // first line segment\r\n  x3, y3, x4, y4  // second line segment\r\n) {\r\n\r\n  var a1, a2, b1, b2, c1, c2, /* Coefficients of line eqns. */\r\n    r1, r2, r3, r4, /* 'Sign' values */\r\n    denom, offset, num, /* Intermediate values */\r\n    result = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n  /* Compute a1, b1, c1, where line joining points 1 and 2\r\n   * is \"a1 x  +  b1 y  +  c1  =  0\".\r\n   */\r\n  a1 = y2 - y1;\r\n  b1 = x1 - x2;\r\n  c1 = x2 * y1 - x1 * y2;\r\n\r\n  /* Compute r3 and r4.\r\n   */\r\n  r3 = a1 * x3 + b1 * y3 + c1;\r\n  r4 = a1 * x4 + b1 * y4 + c1;\r\n\r\n  /* Check signs of r3 and r4.  If both point 3 and point 4 lie on\r\n   * same side of line 1, the line segments do not intersect.\r\n   */\r\n\r\n  if (r3 !== 0 && r4 !== 0 && ((r3 >= 0) === (r4 >= 4))) {\r\n    return null; //no intersection.\r\n  }\r\n\r\n  /* Compute a2, b2, c2 */\r\n  a2 = y4 - y3;\r\n  b2 = x3 - x4;\r\n  c2 = x4 * y3 - x3 * y4;\r\n\r\n  /* Compute r1 and r2 */\r\n\r\n  r1 = a2 * x1 + b2 * y1 + c2;\r\n  r2 = a2 * x2 + b2 * y2 + c2;\r\n\r\n  /* Check signs of r1 and r2.  If both point 1 and point 2 lie\r\n   * on same side of second line segment, the line segments do\r\n   * not intersect.\r\n   */\r\n  if (r1 !== 0 && r2 !== 0 && ((r1 >= 0) === (r2 >= 0))) {\r\n    return null; // no intersection;\r\n  }\r\n  /* Line segments intersect: compute intersection point.\r\n   */\r\n\r\n  denom = a1 * b2 - a2 * b1;\r\n  if (denom === 0) {\r\n    return null; // Actually collinear..\r\n  }\r\n\r\n  offset = denom < 0 ? -denom / 2 : denom / 2;\r\n  offset = 0.0;\r\n\r\n  /* The denom/2 is to get rounding instead of truncating.  It\r\n   * is added or subtracted to the numerator, depending upon the\r\n   * sign of the numerator.\r\n   */\r\n  num = b1 * c2 - b2 * c1;\r\n  result.x = (num < 0 ? num - offset : num + offset) / denom;\r\n\r\n  num = a2 * c1 - a1 * c2;\r\n  result.y = (num < 0 ? num - offset : num + offset) / denom;\r\n\r\n  return result;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gintersect/index.js\n// module id = 267\n// module chunks = 2","var documentEvents = require('../Utils/documentEvents.js');\r\n\r\nmodule.exports = webglInputEvents;\r\n\r\n/**\r\n * Monitors graph-related mouse input in webgl graphics and notifies subscribers.\r\n *\r\n * @param {Viva.Graph.View.webglGraphics} webglGraphics\r\n */\r\nfunction webglInputEvents(webglGraphics) {\r\n  if (webglGraphics.webglInputEvents) {\r\n    // Don't listen twice, if we are already attached to this graphics:\r\n    return webglGraphics.webglInputEvents;\r\n  }\r\n\r\n  var mouseCapturedNode = null,\r\n    mouseEnterCallback = [],\r\n    mouseLeaveCallback = [],\r\n    mouseDownCallback = [],\r\n    mouseUpCallback = [],\r\n    mouseMoveCallback = [],\r\n    clickCallback = [],\r\n    dblClickCallback = [],\r\n    prevSelectStart,\r\n    boundRect;\r\n\r\n  var root = webglGraphics.getGraphicsRoot();\r\n  startListen(root);\r\n\r\n  var api = {\r\n    mouseEnter: mouseEnter,\r\n    mouseLeave: mouseLeave,\r\n    mouseDown: mouseDown,\r\n    mouseUp: mouseUp,\r\n    mouseMove: mouseMove,\r\n    click: click,\r\n    dblClick: dblClick,\r\n    mouseCapture: mouseCapture,\r\n    releaseMouseCapture: releaseMouseCapture\r\n  };\r\n\r\n  // TODO I don't remember why this is needed:\r\n  webglGraphics.webglInputEvents = api;\r\n\r\n  return api;\r\n\r\n  function releaseMouseCapture() {\r\n    mouseCapturedNode = null;\r\n  }\r\n\r\n  function mouseCapture(node) {\r\n    mouseCapturedNode = node;\r\n  }\r\n\r\n  function dblClick(callback) {\r\n    if (typeof callback === 'function') {\r\n      dblClickCallback.push(callback);\r\n    }\r\n    return api;\r\n  }\r\n\r\n  function click(callback) {\r\n    if (typeof callback === 'function') {\r\n      clickCallback.push(callback);\r\n    }\r\n    return api;\r\n  }\r\n\r\n  function mouseMove(callback) {\r\n    if (typeof callback === 'function') {\r\n      mouseMoveCallback.push(callback);\r\n    }\r\n    return api;\r\n  }\r\n\r\n  function mouseUp(callback) {\r\n    if (typeof callback === 'function') {\r\n      mouseUpCallback.push(callback);\r\n    }\r\n    return api;\r\n  }\r\n\r\n  function mouseDown(callback) {\r\n    if (typeof callback === 'function') {\r\n      mouseDownCallback.push(callback);\r\n    }\r\n    return api;\r\n  }\r\n\r\n  function mouseLeave(callback) {\r\n    if (typeof callback === 'function') {\r\n      mouseLeaveCallback.push(callback);\r\n    }\r\n    return api;\r\n  }\r\n\r\n  function mouseEnter(callback) {\r\n    if (typeof callback === 'function') {\r\n      mouseEnterCallback.push(callback);\r\n    }\r\n    return api;\r\n  }\r\n\r\n  function preciseCheck(nodeUI, x, y) {\r\n    if (nodeUI && nodeUI.size) {\r\n      var pos = nodeUI.position,\r\n        half = nodeUI.size;\r\n\r\n      return pos.x - half < x && x < pos.x + half &&\r\n        pos.y - half < y && y < pos.y + half;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function getNodeAtClientPos(pos) {\r\n    return webglGraphics.getNodeAtClientPos(pos, preciseCheck);\r\n  }\r\n\r\n  function stopPropagation(e) {\r\n    if (e.stopPropagation) {\r\n      e.stopPropagation();\r\n    } else {\r\n      e.cancelBubble = true;\r\n    }\r\n  }\r\n\r\n  function handleDisabledEvent(e) {\r\n    stopPropagation(e);\r\n    return false;\r\n  }\r\n\r\n  function invoke(callbacksChain, args) {\r\n    var i, stopPropagation;\r\n    for (i = 0; i < callbacksChain.length; i += 1) {\r\n      stopPropagation = callbacksChain[i].apply(undefined, args);\r\n      if (stopPropagation) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  function startListen(root) {\r\n    var pos = {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      lastFound = null,\r\n      lastUpdate = 1,\r\n      lastClickTime = +new Date(),\r\n\r\n      handleMouseMove = function(e) {\r\n        invoke(mouseMoveCallback, [lastFound, e]);\r\n        pos.x = e.clientX;\r\n        pos.y = e.clientY;\r\n      },\r\n\r\n      handleMouseUp = function() {\r\n        documentEvents.off('mousemove', handleMouseMove);\r\n        documentEvents.off('mouseup', handleMouseUp);\r\n      },\r\n\r\n      updateBoundRect = function() {\r\n        boundRect = root.getBoundingClientRect();\r\n      };\r\n\r\n    window.addEventListener('resize', updateBoundRect);\r\n    updateBoundRect();\r\n\r\n    // mouse move inside container serves only to track mouse enter/leave events.\r\n    root.addEventListener('mousemove',\r\n      function(e) {\r\n        if (mouseCapturedNode) {\r\n          return;\r\n        }\r\n        if (lastUpdate++ % 7 === 0) {\r\n          // since there is no bullet proof method to detect resize\r\n          // event, we preemptively update the bounding rectangle\r\n          updateBoundRect();\r\n          lastUpdate = 1;\r\n        }\r\n        var cancelBubble = false,\r\n          node;\r\n\r\n        pos.x = e.clientX - boundRect.left;\r\n        pos.y = e.clientY - boundRect.top;\r\n\r\n        node = getNodeAtClientPos(pos);\r\n\r\n        if (node && lastFound !== node) {\r\n          lastFound = node;\r\n          cancelBubble = cancelBubble || invoke(mouseEnterCallback, [lastFound]);\r\n        } else if (node === null && lastFound !== node) {\r\n          cancelBubble = cancelBubble || invoke(mouseLeaveCallback, [lastFound]);\r\n          lastFound = null;\r\n        }\r\n\r\n        if (cancelBubble) {\r\n          stopPropagation(e);\r\n        }\r\n      });\r\n\r\n    root.addEventListener('mousedown',\r\n      function(e) {\r\n        var cancelBubble = false,\r\n          args;\r\n        updateBoundRect();\r\n        pos.x = e.clientX - boundRect.left;\r\n        pos.y = e.clientY - boundRect.top;\r\n\r\n        args = [getNodeAtClientPos(pos), e];\r\n        if (args[0]) {\r\n          cancelBubble = invoke(mouseDownCallback, args);\r\n          // we clicked on a node. Following drag should be handled on document events:\r\n          documentEvents.on('mousemove', handleMouseMove);\r\n          documentEvents.on('mouseup', handleMouseUp);\r\n\r\n          prevSelectStart = window.document.onselectstart;\r\n\r\n          window.document.onselectstart = handleDisabledEvent;\r\n\r\n          lastFound = args[0];\r\n        } else {\r\n          lastFound = null;\r\n        }\r\n        if (cancelBubble) {\r\n          stopPropagation(e);\r\n        }\r\n      });\r\n\r\n    root.addEventListener('mouseup',\r\n      function(e) {\r\n        var clickTime = +new Date(),\r\n          args;\r\n\r\n        pos.x = e.clientX - boundRect.left;\r\n        pos.y = e.clientY - boundRect.top;\r\n\r\n        var nodeAtClientPos = getNodeAtClientPos(pos);\r\n        var sameNode = nodeAtClientPos === lastFound;\r\n        args = [nodeAtClientPos || lastFound, e];\r\n        if (args[0]) {\r\n          window.document.onselectstart = prevSelectStart;\r\n\r\n          if (clickTime - lastClickTime < 400 && sameNode) {\r\n            invoke(dblClickCallback, args);\r\n          } else {\r\n            invoke(clickCallback, args);\r\n          }\r\n          lastClickTime = clickTime;\r\n\r\n          if (invoke(mouseUpCallback, args)) {\r\n            stopPropagation(e);\r\n          }\r\n        }\r\n      });\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/WebGL/webglInputEvents.js\n// module id = 268\n// module chunks = 2","var nullEvents = require('./nullEvents.js');\r\n\r\nmodule.exports = createDocumentEvents();\r\n\r\nfunction createDocumentEvents() {\r\n  if (typeof document === undefined) {\r\n    return nullEvents;\r\n  }\r\n\r\n  return {\r\n    on: on,\r\n    off: off\r\n  };\r\n}\r\n\r\nfunction on(eventName, handler) {\r\n  document.addEventListener(eventName, handler);\r\n}\r\n\r\nfunction off(eventName, handler) {\r\n  document.removeEventListener(eventName, handler);\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Utils/documentEvents.js\n// module id = 269\n// module chunks = 2","module.exports = createNullEvents();\r\n\r\nfunction createNullEvents() {\r\n  return {\r\n    on: noop,\r\n    off: noop,\r\n    stop: noop\r\n  };\r\n}\r\n\r\nfunction noop() { }\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Utils/nullEvents.js\n// module id = 270\n// module chunks = 2","module.exports = browserInfo();\r\n\r\nfunction browserInfo() {\r\n  if (typeof window === \"undefined\" || !window.hasOwnProperty(\"navigator\")) {\r\n    return {\r\n      browser : \"\",\r\n      version : \"0\"\r\n    };\r\n  }\r\n\r\n  var ua = window.navigator.userAgent.toLowerCase(),\r\n  // Useragent RegExp\r\n  rwebkit = /(webkit)[ \\/]([\\w.]+)/,\r\n  ropera = /(opera)(?:.*version)?[ \\/]([\\w.]+)/,\r\n  rmsie = /(msie) ([\\w.]+)/,\r\n  rmozilla = /(mozilla)(?:.*? rv:([\\w.]+))?/,\r\n  match = rwebkit.exec(ua) ||\r\n    ropera.exec(ua) ||\r\n    rmsie.exec(ua) ||\r\n    (ua.indexOf(\"compatible\") < 0 && rmozilla.exec(ua)) ||\r\n    [];\r\n\r\n  return {\r\n    browser: match[1] || \"\",\r\n    version: match[2] || \"0\"\r\n  };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Utils/browserInfo.js\n// module id = 271\n// module chunks = 2","/**\r\n * Finds the absolute position of an element on a page\r\n */\r\nmodule.exports = findElementPosition;\r\n\r\nfunction findElementPosition(obj) {\r\n    var curleft = 0,\r\n        curtop = 0;\r\n    if (obj.offsetParent) {\r\n        do {\r\n            curleft += obj.offsetLeft;\r\n            curtop += obj.offsetTop;\r\n        } while ((obj = obj.offsetParent) !== null);\r\n    }\r\n\r\n    return [curleft, curtop];\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Utils/findElementPosition.js\n// module id = 272\n// module chunks = 2","/**\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\r\n\r\nmodule.exports = webglInputManager;\r\n\r\nvar createInputEvents = require('../WebGL/webglInputEvents.js');\r\n\r\nfunction webglInputManager(graph, graphics) {\r\n    var inputEvents = createInputEvents(graphics),\r\n        draggedNode = null,\r\n        internalHandlers = {},\r\n        pos = {x : 0, y : 0};\r\n\r\n    inputEvents.mouseDown(function (node, e) {\r\n        draggedNode = node;\r\n        pos.x = e.clientX;\r\n        pos.y = e.clientY;\r\n\r\n        inputEvents.mouseCapture(draggedNode);\r\n\r\n        var handlers = internalHandlers[node.id];\r\n        if (handlers && handlers.onStart) {\r\n            handlers.onStart(e, pos);\r\n        }\r\n\r\n        return true;\r\n    }).mouseUp(function (node) {\r\n        inputEvents.releaseMouseCapture(draggedNode);\r\n\r\n        draggedNode = null;\r\n        var handlers = internalHandlers[node.id];\r\n        if (handlers && handlers.onStop) {\r\n            handlers.onStop();\r\n        }\r\n        return true;\r\n    }).mouseMove(function (node, e) {\r\n        if (draggedNode) {\r\n            var handlers = internalHandlers[draggedNode.id];\r\n            if (handlers && handlers.onDrag) {\r\n                handlers.onDrag(e, {x : e.clientX - pos.x, y : e.clientY - pos.y });\r\n            }\r\n\r\n            pos.x = e.clientX;\r\n            pos.y = e.clientY;\r\n            return true;\r\n        }\r\n    });\r\n\r\n    return {\r\n        /**\r\n         * Called by renderer to listen to drag-n-drop events from node. E.g. for SVG\r\n         * graphics we may listen to DOM events, whereas for WebGL we graphics\r\n         * should provide custom eventing mechanism.\r\n         *\r\n         * @param node - to be monitored.\r\n         * @param handlers - object with set of three callbacks:\r\n         *   onStart: function(),\r\n         *   onDrag: function(e, offset),\r\n         *   onStop: function()\r\n         */\r\n        bindDragNDrop : function (node, handlers) {\r\n            internalHandlers[node.id] = handlers;\r\n            if (!handlers) {\r\n                delete internalHandlers[node.id];\r\n            }\r\n        }\r\n    };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Input/webglInputManager.js\n// module id = 273\n// module chunks = 2","/**\r\n * @author Andrei Kashcha (aka anvaka) / http://anvaka.blogspot.com\r\n */\r\n\r\nmodule.exports = createTimer();\r\n\r\nfunction createTimer() {\r\n  var lastTime = 0,\r\n    vendors = ['ms', 'moz', 'webkit', 'o'],\r\n    i,\r\n    scope;\r\n\r\n  if (typeof window !== 'undefined') {\r\n    scope = window;\r\n  } else if (typeof global !== 'undefined') {\r\n    scope = global;\r\n  } else {\r\n    scope = {\r\n      setTimeout: noop,\r\n      clearTimeout: noop\r\n    };\r\n  }\r\n\r\n  for (i = 0; i < vendors.length && !scope.requestAnimationFrame; ++i) {\r\n    var vendorPrefix = vendors[i];\r\n    scope.requestAnimationFrame = scope[vendorPrefix + 'RequestAnimationFrame'];\r\n    scope.cancelAnimationFrame =\r\n      scope[vendorPrefix + 'CancelAnimationFrame'] || scope[vendorPrefix + 'CancelRequestAnimationFrame'];\r\n  }\r\n\r\n  if (!scope.requestAnimationFrame) {\r\n    scope.requestAnimationFrame = rafPolyfill;\r\n  }\r\n\r\n  if (!scope.cancelAnimationFrame) {\r\n    scope.cancelAnimationFrame = cancelRafPolyfill;\r\n  }\r\n\r\n  return timer;\r\n\r\n  /**\r\n   * Timer that fires callback with given interval (in ms) until\r\n   * callback returns true;\r\n   */\r\n  function timer(callback) {\r\n    var intervalId;\r\n    startTimer(); // start it right away.\r\n\r\n    return {\r\n      /**\r\n       * Stops execution of the callback\r\n       */\r\n      stop: stopTimer,\r\n\r\n      restart: restart\r\n    };\r\n\r\n    function startTimer() {\r\n      intervalId = scope.requestAnimationFrame(startTimer);\r\n      if (!callback()) {\r\n        stopTimer();\r\n      }\r\n    }\r\n\r\n    function stopTimer() {\r\n      scope.cancelAnimationFrame(intervalId);\r\n      intervalId = 0;\r\n    }\r\n\r\n    function restart() {\r\n      if (!intervalId) {\r\n        startTimer();\r\n      }\r\n    }\r\n  }\r\n\r\n  function rafPolyfill(callback) {\r\n    var currTime = new Date().getTime();\r\n    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\r\n    var id = scope.setTimeout(function() {\r\n      callback(currTime + timeToCall);\r\n    }, timeToCall);\r\n    lastTime = currTime + timeToCall;\r\n    return id;\r\n  }\r\n\r\n  function cancelRafPolyfill(id) {\r\n    scope.clearTimeout(id);\r\n  }\r\n}\r\n\r\nfunction noop() {}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Utils/timer.js\n// module id = 274\n// module chunks = 2","module.exports = getDimension;\r\n\r\nfunction getDimension(container) {\r\n    if (!container) {\r\n        throw {\r\n            message : 'Cannot get dimensions of undefined container'\r\n        };\r\n    }\r\n\r\n    // TODO: Potential cross browser bug.\r\n    var width = container.clientWidth;\r\n    var height = container.clientHeight;\r\n\r\n    return {\r\n        left : 0,\r\n        top : 0,\r\n        width : width,\r\n        height : height\r\n    };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Utils/getDimensions.js\n// module id = 275\n// module chunks = 2","module.exports = createLayout;\r\nmodule.exports.simulator = require('ngraph.physics.simulator');\r\n\r\nvar eventify = require('ngraph.events');\r\n\r\n/**\r\n * Creates force based layout for a given graph.\r\n *\r\n * @param {ngraph.graph} graph which needs to be laid out\r\n * @param {object} physicsSettings if you need custom settings\r\n * for physics simulator you can pass your own settings here. If it's not passed\r\n * a default one will be created.\r\n */\r\nfunction createLayout(graph, physicsSettings) {\r\n  if (!graph) {\r\n    throw new Error('Graph structure cannot be undefined');\r\n  }\r\n\r\n  var createSimulator = require('ngraph.physics.simulator');\r\n  var physicsSimulator = createSimulator(physicsSettings);\r\n\r\n  var nodeBodies = Object.create(null);\r\n  var springs = {};\r\n  var bodiesCount = 0;\r\n\r\n  var springTransform = physicsSimulator.settings.springTransform || noop;\r\n\r\n  // Initialize physics with what we have in the graph:\r\n  initPhysics();\r\n  listenToEvents();\r\n\r\n  var wasStable = false;\r\n\r\n  var api = {\r\n    /**\r\n     * Performs one step of iterative layout algorithm\r\n     *\r\n     * @returns {boolean} true if the system should be considered stable; Flase otherwise.\r\n     * The system is stable if no further call to `step()` can improve the layout.\r\n     */\r\n    step: function() {\r\n      if (bodiesCount === 0) return true; // TODO: This will never fire 'stable'\r\n\r\n      var lastMove = physicsSimulator.step();\r\n\r\n      // Save the movement in case if someone wants to query it in the step\r\n      // callback.\r\n      api.lastMove = lastMove;\r\n\r\n      // Allow listeners to perform low-level actions after nodes are updated.\r\n      api.fire('step');\r\n\r\n      var ratio = lastMove/bodiesCount;\r\n      var isStableNow = ratio <= 0.01; // TODO: The number is somewhat arbitrary...\r\n\r\n      if (wasStable !== isStableNow) {\r\n        wasStable = isStableNow;\r\n        onStableChanged(isStableNow);\r\n      }\r\n\r\n      return isStableNow;\r\n    },\r\n\r\n    /**\r\n     * For a given `nodeId` returns position\r\n     */\r\n    getNodePosition: function (nodeId) {\r\n      return getInitializedBody(nodeId).pos;\r\n    },\r\n\r\n    /**\r\n     * Sets position of a node to a given coordinates\r\n     * @param {string} nodeId node identifier\r\n     * @param {number} x position of a node\r\n     * @param {number} y position of a node\r\n     * @param {number=} z position of node (only if applicable to body)\r\n     */\r\n    setNodePosition: function (nodeId) {\r\n      var body = getInitializedBody(nodeId);\r\n      body.setPosition.apply(body, Array.prototype.slice.call(arguments, 1));\r\n    },\r\n\r\n    /**\r\n     * @returns {Object} Link position by link id\r\n     * @returns {Object.from} {x, y} coordinates of link start\r\n     * @returns {Object.to} {x, y} coordinates of link end\r\n     */\r\n    getLinkPosition: function (linkId) {\r\n      var spring = springs[linkId];\r\n      if (spring) {\r\n        return {\r\n          from: spring.from.pos,\r\n          to: spring.to.pos\r\n        };\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @returns {Object} area required to fit in the graph. Object contains\r\n     * `x1`, `y1` - top left coordinates\r\n     * `x2`, `y2` - bottom right coordinates\r\n     */\r\n    getGraphRect: function () {\r\n      return physicsSimulator.getBBox();\r\n    },\r\n\r\n    /**\r\n     * Iterates over each body in the layout simulator and performs a callback(body, nodeId)\r\n     */\r\n    forEachBody: forEachBody,\r\n\r\n    /*\r\n     * Requests layout algorithm to pin/unpin node to its current position\r\n     * Pinned nodes should not be affected by layout algorithm and always\r\n     * remain at their position\r\n     */\r\n    pinNode: function (node, isPinned) {\r\n      var body = getInitializedBody(node.id);\r\n       body.isPinned = !!isPinned;\r\n    },\r\n\r\n    /**\r\n     * Checks whether given graph's node is currently pinned\r\n     */\r\n    isNodePinned: function (node) {\r\n      return getInitializedBody(node.id).isPinned;\r\n    },\r\n\r\n    /**\r\n     * Request to release all resources\r\n     */\r\n    dispose: function() {\r\n      graph.off('changed', onGraphChanged);\r\n      api.fire('disposed');\r\n    },\r\n\r\n    /**\r\n     * Gets physical body for a given node id. If node is not found undefined\r\n     * value is returned.\r\n     */\r\n    getBody: getBody,\r\n\r\n    /**\r\n     * Gets spring for a given edge.\r\n     *\r\n     * @param {string} linkId link identifer. If two arguments are passed then\r\n     * this argument is treated as formNodeId\r\n     * @param {string=} toId when defined this parameter denotes head of the link\r\n     * and first argument is trated as tail of the link (fromId)\r\n     */\r\n    getSpring: getSpring,\r\n\r\n    /**\r\n     * [Read only] Gets current physics simulator\r\n     */\r\n    simulator: physicsSimulator,\r\n\r\n    /**\r\n     * Gets the graph that was used for layout\r\n     */\r\n    graph: graph,\r\n\r\n    /**\r\n     * Gets amount of movement performed during last step opeartion\r\n     */\r\n    lastMove: 0\r\n  };\r\n\r\n  eventify(api);\r\n\r\n  return api;\r\n\r\n  function forEachBody(cb) {\r\n    Object.keys(nodeBodies).forEach(function(bodyId) {\r\n      cb(nodeBodies[bodyId], bodyId);\r\n    });\r\n  }\r\n\r\n  function getSpring(fromId, toId) {\r\n    var linkId;\r\n    if (toId === undefined) {\r\n      if (typeof fromId !== 'object') {\r\n        // assume fromId as a linkId:\r\n        linkId = fromId;\r\n      } else {\r\n        // assume fromId to be a link object:\r\n        linkId = fromId.id;\r\n      }\r\n    } else {\r\n      // toId is defined, should grab link:\r\n      var link = graph.hasLink(fromId, toId);\r\n      if (!link) return;\r\n      linkId = link.id;\r\n    }\r\n\r\n    return springs[linkId];\r\n  }\r\n\r\n  function getBody(nodeId) {\r\n    return nodeBodies[nodeId];\r\n  }\r\n\r\n  function listenToEvents() {\r\n    graph.on('changed', onGraphChanged);\r\n  }\r\n\r\n  function onStableChanged(isStable) {\r\n    api.fire('stable', isStable);\r\n  }\r\n\r\n  function onGraphChanged(changes) {\r\n    for (var i = 0; i < changes.length; ++i) {\r\n      var change = changes[i];\r\n      if (change.changeType === 'add') {\r\n        if (change.node) {\r\n          initBody(change.node.id);\r\n        }\r\n        if (change.link) {\r\n          initLink(change.link);\r\n        }\r\n      } else if (change.changeType === 'remove') {\r\n        if (change.node) {\r\n          releaseNode(change.node);\r\n        }\r\n        if (change.link) {\r\n          releaseLink(change.link);\r\n        }\r\n      }\r\n    }\r\n    bodiesCount = graph.getNodesCount();\r\n  }\r\n\r\n  function initPhysics() {\r\n    bodiesCount = 0;\r\n\r\n    graph.forEachNode(function (node) {\r\n      initBody(node.id);\r\n      bodiesCount += 1;\r\n    });\r\n\r\n    graph.forEachLink(initLink);\r\n  }\r\n\r\n  function initBody(nodeId) {\r\n    var body = nodeBodies[nodeId];\r\n    if (!body) {\r\n      var node = graph.getNode(nodeId);\r\n      if (!node) {\r\n        throw new Error('initBody() was called with unknown node id');\r\n      }\r\n\r\n      var pos = node.position;\r\n      if (!pos) {\r\n        var neighbors = getNeighborBodies(node);\r\n        pos = physicsSimulator.getBestNewBodyPosition(neighbors);\r\n      }\r\n\r\n      body = physicsSimulator.addBodyAt(pos);\r\n      body.id = nodeId;\r\n\r\n      nodeBodies[nodeId] = body;\r\n      updateBodyMass(nodeId);\r\n\r\n      if (isNodeOriginallyPinned(node)) {\r\n        body.isPinned = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  function releaseNode(node) {\r\n    var nodeId = node.id;\r\n    var body = nodeBodies[nodeId];\r\n    if (body) {\r\n      nodeBodies[nodeId] = null;\r\n      delete nodeBodies[nodeId];\r\n\r\n      physicsSimulator.removeBody(body);\r\n    }\r\n  }\r\n\r\n  function initLink(link) {\r\n    updateBodyMass(link.fromId);\r\n    updateBodyMass(link.toId);\r\n\r\n    var fromBody = nodeBodies[link.fromId],\r\n        toBody  = nodeBodies[link.toId],\r\n        spring = physicsSimulator.addSpring(fromBody, toBody, link.length);\r\n\r\n    springTransform(link, spring);\r\n\r\n    springs[link.id] = spring;\r\n  }\r\n\r\n  function releaseLink(link) {\r\n    var spring = springs[link.id];\r\n    if (spring) {\r\n      var from = graph.getNode(link.fromId),\r\n          to = graph.getNode(link.toId);\r\n\r\n      if (from) updateBodyMass(from.id);\r\n      if (to) updateBodyMass(to.id);\r\n\r\n      delete springs[link.id];\r\n\r\n      physicsSimulator.removeSpring(spring);\r\n    }\r\n  }\r\n\r\n  function getNeighborBodies(node) {\r\n    // TODO: Could probably be done better on memory\r\n    var neighbors = [];\r\n    if (!node.links) {\r\n      return neighbors;\r\n    }\r\n    var maxNeighbors = Math.min(node.links.length, 2);\r\n    for (var i = 0; i < maxNeighbors; ++i) {\r\n      var link = node.links[i];\r\n      var otherBody = link.fromId !== node.id ? nodeBodies[link.fromId] : nodeBodies[link.toId];\r\n      if (otherBody && otherBody.pos) {\r\n        neighbors.push(otherBody);\r\n      }\r\n    }\r\n\r\n    return neighbors;\r\n  }\r\n\r\n  function updateBodyMass(nodeId) {\r\n    var body = nodeBodies[nodeId];\r\n    body.mass = nodeMass(nodeId);\r\n  }\r\n\r\n  /**\r\n   * Checks whether graph node has in its settings pinned attribute,\r\n   * which means layout algorithm cannot move it. Node can be preconfigured\r\n   * as pinned, if it has \"isPinned\" attribute, or when node.data has it.\r\n   *\r\n   * @param {Object} node a graph node to check\r\n   * @return {Boolean} true if node should be treated as pinned; false otherwise.\r\n   */\r\n  function isNodeOriginallyPinned(node) {\r\n    return (node && (node.isPinned || (node.data && node.data.isPinned)));\r\n  }\r\n\r\n  function getInitializedBody(nodeId) {\r\n    var body = nodeBodies[nodeId];\r\n    if (!body) {\r\n      initBody(nodeId);\r\n      body = nodeBodies[nodeId];\r\n    }\r\n    return body;\r\n  }\r\n\r\n  /**\r\n   * Calculates mass of a body, which corresponds to node with given id.\r\n   *\r\n   * @param {String|Number} nodeId identifier of a node, for which body mass needs to be calculated\r\n   * @returns {Number} recommended mass of the body;\r\n   */\r\n  function nodeMass(nodeId) {\r\n    var links = graph.getLinks(nodeId);\r\n    if (!links) return 1;\r\n    return 1 + links.length / 3.0;\r\n  }\r\n}\r\n\r\nfunction noop() { }\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.forcelayout/index.js\n// module id = 276\n// module chunks = 2","/**\r\n * Manages a simulation of physical forces acting on bodies and springs.\r\n */\r\nmodule.exports = physicsSimulator;\r\n\r\nfunction physicsSimulator(settings) {\r\n  var Spring = require('./lib/spring');\r\n  var expose = require('ngraph.expose');\r\n  var merge = require('ngraph.merge');\r\n  var eventify = require('ngraph.events');\r\n\r\n  settings = merge(settings, {\r\n      /**\r\n       * Ideal length for links (springs in physical model).\r\n       */\r\n      springLength: 30,\r\n\r\n      /**\r\n       * Hook's law coefficient. 1 - solid spring.\r\n       */\r\n      springCoeff: 0.0008,\r\n\r\n      /**\r\n       * Coulomb's law coefficient. It's used to repel nodes thus should be negative\r\n       * if you make it positive nodes start attract each other :).\r\n       */\r\n      gravity: -1.2,\r\n\r\n      /**\r\n       * Theta coefficient from Barnes Hut simulation. Ranged between (0, 1).\r\n       * The closer it's to 1 the more nodes algorithm will have to go through.\r\n       * Setting it to one makes Barnes Hut simulation no different from\r\n       * brute-force forces calculation (each node is considered).\r\n       */\r\n      theta: 0.8,\r\n\r\n      /**\r\n       * Drag force coefficient. Used to slow down system, thus should be less than 1.\r\n       * The closer it is to 0 the less tight system will be.\r\n       */\r\n      dragCoeff: 0.02,\r\n\r\n      /**\r\n       * Default time step (dt) for forces integration\r\n       */\r\n      timeStep : 20,\r\n  });\r\n\r\n  // We allow clients to override basic factory methods:\r\n  var createQuadTree = settings.createQuadTree || require('ngraph.quadtreebh');\r\n  var createBounds = settings.createBounds || require('./lib/bounds');\r\n  var createDragForce = settings.createDragForce || require('./lib/dragForce');\r\n  var createSpringForce = settings.createSpringForce || require('./lib/springForce');\r\n  var integrate = settings.integrator || require('./lib/eulerIntegrator');\r\n  var createBody = settings.createBody || require('./lib/createBody');\r\n\r\n  var bodies = [], // Bodies in this simulation.\r\n      springs = [], // Springs in this simulation.\r\n      quadTree =  createQuadTree(settings),\r\n      bounds = createBounds(bodies, settings),\r\n      springForce = createSpringForce(settings),\r\n      dragForce = createDragForce(settings);\r\n\r\n  var totalMovement = 0; // how much movement we made on last step\r\n\r\n  var publicApi = {\r\n    /**\r\n     * Array of bodies, registered with current simulator\r\n     *\r\n     * Note: To add new body, use addBody() method. This property is only\r\n     * exposed for testing/performance purposes.\r\n     */\r\n    bodies: bodies,\r\n\r\n    quadTree: quadTree,\r\n\r\n    /**\r\n     * Array of springs, registered with current simulator\r\n     *\r\n     * Note: To add new spring, use addSpring() method. This property is only\r\n     * exposed for testing/performance purposes.\r\n     */\r\n    springs: springs,\r\n\r\n    /**\r\n     * Returns settings with which current simulator was initialized\r\n     */\r\n    settings: settings,\r\n\r\n    /**\r\n     * Performs one step of force simulation.\r\n     *\r\n     * @returns {boolean} true if system is considered stable; False otherwise.\r\n     */\r\n    step: function () {\r\n      accumulateForces();\r\n\r\n      var movement = integrate(bodies, settings.timeStep);\r\n      bounds.update();\r\n\r\n      return movement;\r\n    },\r\n\r\n    /**\r\n     * Adds body to the system\r\n     *\r\n     * @param {ngraph.physics.primitives.Body} body physical body\r\n     *\r\n     * @returns {ngraph.physics.primitives.Body} added body\r\n     */\r\n    addBody: function (body) {\r\n      if (!body) {\r\n        throw new Error('Body is required');\r\n      }\r\n      bodies.push(body);\r\n\r\n      return body;\r\n    },\r\n\r\n    /**\r\n     * Adds body to the system at given position\r\n     *\r\n     * @param {Object} pos position of a body\r\n     *\r\n     * @returns {ngraph.physics.primitives.Body} added body\r\n     */\r\n    addBodyAt: function (pos) {\r\n      if (!pos) {\r\n        throw new Error('Body position is required');\r\n      }\r\n      var body = createBody(pos);\r\n      bodies.push(body);\r\n\r\n      return body;\r\n    },\r\n\r\n    /**\r\n     * Removes body from the system\r\n     *\r\n     * @param {ngraph.physics.primitives.Body} body to remove\r\n     *\r\n     * @returns {Boolean} true if body found and removed. falsy otherwise;\r\n     */\r\n    removeBody: function (body) {\r\n      if (!body) { return; }\r\n\r\n      var idx = bodies.indexOf(body);\r\n      if (idx < 0) { return; }\r\n\r\n      bodies.splice(idx, 1);\r\n      if (bodies.length === 0) {\r\n        bounds.reset();\r\n      }\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * Adds a spring to this simulation.\r\n     *\r\n     * @returns {Object} - a handle for a spring. If you want to later remove\r\n     * spring pass it to removeSpring() method.\r\n     */\r\n    addSpring: function (body1, body2, springLength, springWeight, springCoefficient) {\r\n      if (!body1 || !body2) {\r\n        throw new Error('Cannot add null spring to force simulator');\r\n      }\r\n\r\n      if (typeof springLength !== 'number') {\r\n        springLength = -1; // assume global configuration\r\n      }\r\n\r\n      var spring = new Spring(body1, body2, springLength, springCoefficient >= 0 ? springCoefficient : -1, springWeight);\r\n      springs.push(spring);\r\n\r\n      // TODO: could mark simulator as dirty.\r\n      return spring;\r\n    },\r\n\r\n    /**\r\n     * Returns amount of movement performed on last step() call\r\n     */\r\n    getTotalMovement: function () {\r\n      return totalMovement;\r\n    },\r\n\r\n    /**\r\n     * Removes spring from the system\r\n     *\r\n     * @param {Object} spring to remove. Spring is an object returned by addSpring\r\n     *\r\n     * @returns {Boolean} true if spring found and removed. falsy otherwise;\r\n     */\r\n    removeSpring: function (spring) {\r\n      if (!spring) { return; }\r\n      var idx = springs.indexOf(spring);\r\n      if (idx > -1) {\r\n        springs.splice(idx, 1);\r\n        return true;\r\n      }\r\n    },\r\n\r\n    getBestNewBodyPosition: function (neighbors) {\r\n      return bounds.getBestNewPosition(neighbors);\r\n    },\r\n\r\n    /**\r\n     * Returns bounding box which covers all bodies\r\n     */\r\n    getBBox: function () {\r\n      return bounds.box;\r\n    },\r\n\r\n    gravity: function (value) {\r\n      if (value !== undefined) {\r\n        settings.gravity = value;\r\n        quadTree.options({gravity: value});\r\n        return this;\r\n      } else {\r\n        return settings.gravity;\r\n      }\r\n    },\r\n\r\n    theta: function (value) {\r\n      if (value !== undefined) {\r\n        settings.theta = value;\r\n        quadTree.options({theta: value});\r\n        return this;\r\n      } else {\r\n        return settings.theta;\r\n      }\r\n    }\r\n  };\r\n\r\n  // allow settings modification via public API:\r\n  expose(settings, publicApi);\r\n\r\n  eventify(publicApi);\r\n\r\n  return publicApi;\r\n\r\n  function accumulateForces() {\r\n    // Accumulate forces acting on bodies.\r\n    var body,\r\n        i = bodies.length;\r\n\r\n    if (i) {\r\n      // only add bodies if there the array is not empty:\r\n      quadTree.insertBodies(bodies); // performance: O(n * log n)\r\n      while (i--) {\r\n        body = bodies[i];\r\n        // If body is pinned there is no point updating its forces - it should\r\n        // never move:\r\n        if (!body.isPinned) {\r\n          body.force.reset();\r\n\r\n          quadTree.updateBodyForce(body);\r\n          dragForce.update(body);\r\n        }\r\n      }\r\n    }\r\n\r\n    i = springs.length;\r\n    while(i--) {\r\n      springForce.update(springs[i]);\r\n    }\r\n  }\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.physics.simulator/index.js\n// module id = 277\n// module chunks = 2","module.exports = Rect;\r\n\r\n/**\r\n * Very generic rectangle.\r\n */\r\nfunction Rect (x1, y1, x2, y2) {\r\n    this.x1 = x1 || 0;\r\n    this.y1 = y1 || 0;\r\n    this.x2 = x2 || 0;\r\n    this.y2 = y2 || 0;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Utils/rect.js\n// module id = 278\n// module chunks = 2","module.exports = Texture;\r\n\r\n/**\r\n * Single texture in the webglAtlas.\r\n */\r\nfunction Texture(size) {\r\n  this.canvas = window.document.createElement(\"canvas\");\r\n  this.ctx = this.canvas.getContext(\"2d\");\r\n  this.isDirty = false;\r\n  this.canvas.width = this.canvas.height = size;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/WebGL/texture.js\n// module id = 279\n// module chunks = 2","var Texture = require('./texture.js');\r\n\r\nmodule.exports = webglAtlas;\r\n\r\n/**\r\n * My naive implementation of textures atlas. It allows clients to load\r\n * multiple images into atlas and get canvas representing all of them.\r\n *\r\n * @param tilesPerTexture - indicates how many images can be loaded to one\r\n *          texture of the atlas. If number of loaded images exceeds this\r\n *          parameter a new canvas will be created.\r\n */\r\nfunction webglAtlas(tilesPerTexture) {\r\n  var tilesPerRow = Math.sqrt(tilesPerTexture || 1024) << 0,\r\n    tileSize = tilesPerRow,\r\n    lastLoadedIdx = 1,\r\n    loadedImages = {},\r\n    dirtyTimeoutId,\r\n    skipedDirty = 0,\r\n    textures = [],\r\n    trackedUrls = [];\r\n\r\n  if (!isPowerOf2(tilesPerTexture)) {\r\n    throw \"Tiles per texture should be power of two.\";\r\n  }\r\n\r\n  // this is the return object\r\n  var api = {\r\n    /**\r\n     * indicates whether atlas has changed texture in it. If true then\r\n     * some of the textures has isDirty flag set as well.\r\n     */\r\n    isDirty: false,\r\n\r\n    /**\r\n     * Clears any signs of atlas changes.\r\n     */\r\n    clearDirty: clearDirty,\r\n\r\n    /**\r\n     * Removes given url from collection of tiles in the atlas.\r\n     */\r\n    remove: remove,\r\n\r\n    /**\r\n     * Gets all textures in the atlas.\r\n     */\r\n    getTextures: getTextures,\r\n\r\n    /**\r\n     * Gets coordinates of the given image in the atlas. Coordinates is an object:\r\n     * {offset : int } - where offset is an absolute position of the image in the\r\n     * atlas.\r\n     *\r\n     * Absolute means it can be larger than tilesPerTexture parameter, and in that\r\n     * case clients should get next texture in getTextures() collection.\r\n     */\r\n    getCoordinates: getCoordinates,\r\n\r\n    /**\r\n     * Asynchronously Loads the image to the atlas. Cross-domain security\r\n     * limitation applies.\r\n     */\r\n    load: load\r\n  };\r\n\r\n  return api;\r\n\r\n  function clearDirty() {\r\n    var i;\r\n    api.isDirty = false;\r\n    for (i = 0; i < textures.length; ++i) {\r\n      textures[i].isDirty = false;\r\n    }\r\n  }\r\n\r\n  function remove(imgUrl) {\r\n    var coordinates = loadedImages[imgUrl];\r\n    if (!coordinates) {\r\n      return false;\r\n    }\r\n    delete loadedImages[imgUrl];\r\n    lastLoadedIdx -= 1;\r\n\r\n\r\n    if (lastLoadedIdx === coordinates.offset) {\r\n      return true; // Ignore if it's last image in the whole set.\r\n    }\r\n\r\n    var tileToRemove = getTileCoordinates(coordinates.offset),\r\n      lastTileInSet = getTileCoordinates(lastLoadedIdx);\r\n\r\n    copy(lastTileInSet, tileToRemove);\r\n\r\n    var replacedOffset = loadedImages[trackedUrls[lastLoadedIdx]];\r\n    replacedOffset.offset = coordinates.offset;\r\n    trackedUrls[coordinates.offset] = trackedUrls[lastLoadedIdx];\r\n\r\n    markDirty();\r\n    return true;\r\n  }\r\n\r\n  function getTextures() {\r\n    return textures; // I trust you...\r\n  }\r\n\r\n  function getCoordinates(imgUrl) {\r\n    return loadedImages[imgUrl];\r\n  }\r\n\r\n  function load(imgUrl, callback) {\r\n    if (loadedImages.hasOwnProperty(imgUrl)) {\r\n      callback(loadedImages[imgUrl]);\r\n    } else {\r\n      var img = new window.Image(),\r\n        imgId = lastLoadedIdx;\r\n\r\n      lastLoadedIdx += 1;\r\n      img.crossOrigin = \"anonymous\";\r\n      img.onload = function() {\r\n        markDirty();\r\n        drawAt(imgId, img, callback);\r\n      };\r\n\r\n      img.src = imgUrl;\r\n    }\r\n  }\r\n\r\n  function createTexture() {\r\n    var texture = new Texture(tilesPerRow * tileSize);\r\n    textures.push(texture);\r\n  }\r\n\r\n  function drawAt(tileNumber, img, callback) {\r\n    var tilePosition = getTileCoordinates(tileNumber),\r\n      coordinates = {\r\n        offset: tileNumber\r\n      };\r\n\r\n    if (tilePosition.textureNumber >= textures.length) {\r\n      createTexture();\r\n    }\r\n    var currentTexture = textures[tilePosition.textureNumber];\r\n\r\n    currentTexture.ctx.drawImage(img, tilePosition.col * tileSize, tilePosition.row * tileSize, tileSize, tileSize);\r\n    trackedUrls[tileNumber] = img.src;\r\n\r\n    loadedImages[img.src] = coordinates;\r\n    currentTexture.isDirty = true;\r\n\r\n    callback(coordinates);\r\n  }\r\n\r\n  function getTileCoordinates(absolutePosition) {\r\n    var textureNumber = (absolutePosition / tilesPerTexture) << 0,\r\n      localTileNumber = (absolutePosition % tilesPerTexture),\r\n      row = (localTileNumber / tilesPerRow) << 0,\r\n      col = (localTileNumber % tilesPerRow);\r\n\r\n    return {\r\n      textureNumber: textureNumber,\r\n      row: row,\r\n      col: col\r\n    };\r\n  }\r\n\r\n  function markDirtyNow() {\r\n    api.isDirty = true;\r\n    skipedDirty = 0;\r\n    dirtyTimeoutId = null;\r\n  }\r\n\r\n  function markDirty() {\r\n    // delay this call, since it results in texture reload\r\n    if (dirtyTimeoutId) {\r\n      window.clearTimeout(dirtyTimeoutId);\r\n      skipedDirty += 1;\r\n      dirtyTimeoutId = null;\r\n    }\r\n\r\n    if (skipedDirty > 10) {\r\n      markDirtyNow();\r\n    } else {\r\n      dirtyTimeoutId = window.setTimeout(markDirtyNow, 400);\r\n    }\r\n  }\r\n\r\n  function copy(from, to) {\r\n    var fromCanvas = textures[from.textureNumber].canvas,\r\n      toCtx = textures[to.textureNumber].ctx,\r\n      x = to.col * tileSize,\r\n      y = to.row * tileSize;\r\n\r\n    toCtx.drawImage(fromCanvas, from.col * tileSize, from.row * tileSize, tileSize, tileSize, x, y, tileSize, tileSize);\r\n    textures[from.textureNumber].isDirty = true;\r\n    textures[to.textureNumber].isDirty = true;\r\n  }\r\n}\r\n\r\nfunction isPowerOf2(n) {\r\n  return (n & (n - 1)) === 0;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/WebGL/webglAtlas.js\n// module id = 280\n// module chunks = 2","/**\r\n * @fileOverview Defines a naive form of links for webglGraphics class.\r\n * This form allows to change color of links.\r\n **/\r\n\r\nvar glUtils = require('./webgl.js');\r\n\r\nmodule.exports = webglLinkProgram;\r\n\r\n/**\r\n * Defines UI for links in webgl renderer.\r\n */\r\nfunction webglLinkProgram() {\r\n    var ATTRIBUTES_PER_PRIMITIVE = 6, // primitive is Line with two points. Each has x,y and color = 3 * 2 attributes.\r\n        BYTES_PER_LINK = 2 * (2 * Float32Array.BYTES_PER_ELEMENT + Uint32Array.BYTES_PER_ELEMENT), // two nodes * (x, y + color)\r\n        linksFS = [\r\n            'precision mediump float;',\r\n            'varying vec4 color;',\r\n            'void main(void) {',\r\n            '   gl_FragColor = color;',\r\n            '}'\r\n        ].join('\\n'),\r\n\r\n        linksVS = [\r\n            'attribute vec2 a_vertexPos;',\r\n            'attribute vec4 a_color;',\r\n\r\n            'uniform vec2 u_screenSize;',\r\n            'uniform mat4 u_transform;',\r\n\r\n            'varying vec4 color;',\r\n\r\n            'void main(void) {',\r\n            '   gl_Position = u_transform * vec4(a_vertexPos/u_screenSize, 0.0, 1.0);',\r\n            '   color = a_color.abgr;',\r\n            '}'\r\n        ].join('\\n'),\r\n\r\n        program,\r\n        gl,\r\n        buffer,\r\n        utils,\r\n        locations,\r\n        linksCount = 0,\r\n        frontLinkId, // used to track z-index of links.\r\n        storage = new ArrayBuffer(16 * BYTES_PER_LINK),\r\n        positions = new Float32Array(storage),\r\n        colors = new Uint32Array(storage),\r\n        width,\r\n        height,\r\n        transform,\r\n        sizeDirty,\r\n\r\n        ensureEnoughStorage = function () {\r\n            // TODO: this is a duplicate of webglNodeProgram code. Extract it to webgl.js\r\n            if ((linksCount+1)*BYTES_PER_LINK > storage.byteLength) {\r\n                // Every time we run out of space create new array twice bigger.\r\n                // TODO: it seems buffer size is limited. Consider using multiple arrays for huge graphs\r\n                var extendedStorage = new ArrayBuffer(storage.byteLength * 2),\r\n                    extendedPositions = new Float32Array(extendedStorage),\r\n                    extendedColors = new Uint32Array(extendedStorage);\r\n\r\n                extendedColors.set(colors); // should be enough to copy just one view.\r\n                positions = extendedPositions;\r\n                colors = extendedColors;\r\n                storage = extendedStorage;\r\n            }\r\n        };\r\n\r\n    return {\r\n        load : function (glContext) {\r\n            gl = glContext;\r\n            utils = glUtils(glContext);\r\n\r\n            program = utils.createProgram(linksVS, linksFS);\r\n            gl.useProgram(program);\r\n            locations = utils.getLocations(program, ['a_vertexPos', 'a_color', 'u_screenSize', 'u_transform']);\r\n\r\n            gl.enableVertexAttribArray(locations.vertexPos);\r\n            gl.enableVertexAttribArray(locations.color);\r\n\r\n            buffer = gl.createBuffer();\r\n        },\r\n\r\n        position: function (linkUi, fromPos, toPos) {\r\n            var linkIdx = linkUi.id,\r\n                offset = linkIdx * ATTRIBUTES_PER_PRIMITIVE;\r\n            positions[offset] = fromPos.x;\r\n            positions[offset + 1] = fromPos.y;\r\n            colors[offset + 2] = linkUi.color;\r\n\r\n            positions[offset + 3] = toPos.x;\r\n            positions[offset + 4] = toPos.y;\r\n            colors[offset + 5] = linkUi.color;\r\n        },\r\n\r\n        createLink : function (ui) {\r\n            ensureEnoughStorage();\r\n\r\n            linksCount += 1;\r\n            frontLinkId = ui.id;\r\n        },\r\n\r\n        removeLink : function (ui) {\r\n            if (linksCount > 0) { linksCount -= 1; }\r\n            // swap removed link with the last link. This will give us O(1) performance for links removal:\r\n            if (ui.id < linksCount && linksCount > 0) {\r\n                // using colors as a view to array buffer is okay here.\r\n                utils.copyArrayPart(colors, ui.id * ATTRIBUTES_PER_PRIMITIVE, linksCount * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);\r\n            }\r\n        },\r\n\r\n        updateTransform : function (newTransform) {\r\n            sizeDirty = true;\r\n            transform = newTransform;\r\n        },\r\n\r\n        updateSize : function (w, h) {\r\n            width = w;\r\n            height = h;\r\n            sizeDirty = true;\r\n        },\r\n\r\n        render : function () {\r\n            gl.useProgram(program);\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, storage, gl.DYNAMIC_DRAW);\r\n\r\n            if (sizeDirty) {\r\n                sizeDirty = false;\r\n                gl.uniformMatrix4fv(locations.transform, false, transform);\r\n                gl.uniform2f(locations.screenSize, width, height);\r\n            }\r\n\r\n            gl.vertexAttribPointer(locations.vertexPos, 2, gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 0);\r\n            gl.vertexAttribPointer(locations.color, 4, gl.UNSIGNED_BYTE, true, 3 * Float32Array.BYTES_PER_ELEMENT, 2 * 4);\r\n\r\n            gl.drawArrays(gl.LINES, 0, linksCount * 2);\r\n\r\n            frontLinkId = linksCount - 1;\r\n        },\r\n\r\n        bringToFront : function (link) {\r\n            if (frontLinkId > link.id) {\r\n                utils.swapArrayPart(positions, link.id * ATTRIBUTES_PER_PRIMITIVE, frontLinkId * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);\r\n            }\r\n            if (frontLinkId > 0) {\r\n                frontLinkId -= 1;\r\n            }\r\n        },\r\n\r\n        getFrontLinkId : function () {\r\n            return frontLinkId;\r\n        }\r\n    };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/WebGL/webglLinkProgram.js\n// module id = 281\n// module chunks = 2","/**\r\n * @fileOverview Defines a naive form of nodes for webglGraphics class.\r\n * This form allows to change color of node. Shape of nodes is rectangular.\r\n *\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\r\n\r\nvar glUtils = require('./webgl.js');\r\n\r\nmodule.exports = webglNodeProgram;\r\n\r\n/**\r\n * Defines simple UI for nodes in webgl renderer. Each node is rendered as square. Color and size can be changed.\r\n */\r\nfunction webglNodeProgram() {\r\n  var ATTRIBUTES_PER_PRIMITIVE = 4; // Primitive is point, x, y, size, color\r\n  // x, y, z - floats, color = uint.\r\n  var BYTES_PER_NODE = 3 * Float32Array.BYTES_PER_ELEMENT + Uint32Array.BYTES_PER_ELEMENT;\r\n  var nodesFS = [\r\n    'precision mediump float;',\r\n    'varying vec4 color;',\r\n\r\n    'void main(void) {',\r\n    '   gl_FragColor = color;',\r\n    '}'\r\n  ].join('\\n');\r\n  var nodesVS = [\r\n    'attribute vec3 a_vertexPos;',\r\n    'attribute vec4 a_color;',\r\n    'uniform vec2 u_screenSize;',\r\n    'uniform mat4 u_transform;',\r\n    'varying vec4 color;',\r\n\r\n    'void main(void) {',\r\n    '   gl_Position = u_transform * vec4(a_vertexPos.xy/u_screenSize, 0, 1);',\r\n    '   gl_PointSize = a_vertexPos.z * u_transform[0][0];',\r\n    '   color = a_color.abgr;',\r\n    '}'\r\n  ].join('\\n');\r\n\r\n  var program;\r\n  var gl;\r\n  var buffer;\r\n  var locations;\r\n  var utils;\r\n  var storage = new ArrayBuffer(16 * BYTES_PER_NODE);\r\n  var positions = new Float32Array(storage);\r\n  var colors = new Uint32Array(storage);\r\n  var nodesCount = 0;\r\n  var width;\r\n  var height;\r\n  var transform;\r\n  var sizeDirty;\r\n\r\n  return {\r\n    load: load,\r\n\r\n    /**\r\n     * Updates position of node in the buffer of nodes.\r\n     *\r\n     * @param idx - index of current node.\r\n     * @param pos - new position of the node.\r\n     */\r\n    position: position,\r\n\r\n    updateTransform: updateTransform,\r\n\r\n    updateSize: updateSize,\r\n\r\n    removeNode: removeNode,\r\n\r\n    createNode: createNode,\r\n\r\n    replaceProperties: replaceProperties,\r\n\r\n    render: render\r\n  };\r\n\r\n  function ensureEnoughStorage() {\r\n    if ((nodesCount + 1) * BYTES_PER_NODE >= storage.byteLength) {\r\n      // Every time we run out of space create new array twice bigger.\r\n      // TODO: it seems buffer size is limited. Consider using multiple arrays for huge graphs\r\n      var extendedStorage = new ArrayBuffer(storage.byteLength * 2),\r\n        extendedPositions = new Float32Array(extendedStorage),\r\n        extendedColors = new Uint32Array(extendedStorage);\r\n\r\n      extendedColors.set(colors); // should be enough to copy just one view.\r\n      positions = extendedPositions;\r\n      colors = extendedColors;\r\n      storage = extendedStorage;\r\n    }\r\n  }\r\n\r\n  function load(glContext) {\r\n    gl = glContext;\r\n    utils = glUtils(glContext);\r\n\r\n    program = utils.createProgram(nodesVS, nodesFS);\r\n    gl.useProgram(program);\r\n    locations = utils.getLocations(program, ['a_vertexPos', 'a_color', 'u_screenSize', 'u_transform']);\r\n\r\n    gl.enableVertexAttribArray(locations.vertexPos);\r\n    gl.enableVertexAttribArray(locations.color);\r\n\r\n    buffer = gl.createBuffer();\r\n  }\r\n\r\n  function position(nodeUI, pos) {\r\n    var idx = nodeUI.id;\r\n\r\n    positions[idx * ATTRIBUTES_PER_PRIMITIVE] = pos.x;\r\n    positions[idx * ATTRIBUTES_PER_PRIMITIVE + 1] = -pos.y;\r\n    positions[idx * ATTRIBUTES_PER_PRIMITIVE + 2] = nodeUI.size;\r\n\r\n    colors[idx * ATTRIBUTES_PER_PRIMITIVE + 3] = nodeUI.color;\r\n  }\r\n\r\n  function updateTransform(newTransform) {\r\n    sizeDirty = true;\r\n    transform = newTransform;\r\n  }\r\n\r\n  function updateSize(w, h) {\r\n    width = w;\r\n    height = h;\r\n    sizeDirty = true;\r\n  }\r\n\r\n  function removeNode(node) {\r\n      if (nodesCount > 0) {\r\n        nodesCount -= 1;\r\n      }\r\n\r\n      if (node.id < nodesCount && nodesCount > 0) {\r\n        // we can use colors as a 'view' into array array buffer.\r\n        utils.copyArrayPart(colors, node.id * ATTRIBUTES_PER_PRIMITIVE, nodesCount * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);\r\n      }\r\n    }\r\n\r\n  function createNode() {\r\n    ensureEnoughStorage();\r\n    nodesCount += 1;\r\n  }\r\n\r\n  function replaceProperties(/* replacedNode, newNode */) {}\r\n\r\n  function render() {\r\n    gl.useProgram(program);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, storage, gl.DYNAMIC_DRAW);\r\n\r\n    if (sizeDirty) {\r\n      sizeDirty = false;\r\n      gl.uniformMatrix4fv(locations.transform, false, transform);\r\n      gl.uniform2f(locations.screenSize, width, height);\r\n    }\r\n\r\n    gl.vertexAttribPointer(locations.vertexPos, 3, gl.FLOAT, false, ATTRIBUTES_PER_PRIMITIVE * Float32Array.BYTES_PER_ELEMENT, 0);\r\n    gl.vertexAttribPointer(locations.color, 4, gl.UNSIGNED_BYTE, true, ATTRIBUTES_PER_PRIMITIVE * Float32Array.BYTES_PER_ELEMENT, 3 * 4);\r\n\r\n    gl.drawArrays(gl.POINTS, 0, nodesCount);\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/WebGL/webglNodeProgram.js\n// module id = 282\n// module chunks = 2","var parseColor = require('./parseColor.js');\r\n\r\nmodule.exports = webglLine;\r\n\r\n/**\r\n * Defines a webgl line. This class has no rendering logic at all,\r\n * it's just passed to corresponding shader and the shader should\r\n * figure out how to render it.\r\n *\r\n */\r\nfunction webglLine(color) {\r\n  return {\r\n    /**\r\n     * Gets or sets color of the line. If you set this property externally\r\n     * make sure it always come as integer of 0xRRGGBBAA format\r\n     */\r\n    color: parseColor(color)\r\n  };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/WebGL/webglLine.js\n// module id = 283\n// module chunks = 2","/**\r\n * @fileOverview Defines a graph renderer that uses SVG based drawings.\r\n *\r\n * @author Andrei Kashcha (aka anvaka) / http://anvaka.blogspot.com\r\n */\r\n\r\nmodule.exports = svgGraphics;\r\n\r\nvar svg = require('simplesvg');\r\nvar eventify = require('ngraph.events');\r\nvar domInputManager = require('../Input/domInputManager.js');\r\n\r\n/**\r\n * Performs svg-based graph rendering. This module does not perform\r\n * layout, but only visualizes nodes and edges of the graph.\r\n */\r\nfunction svgGraphics() {\r\n    var svgContainer,\r\n        svgRoot,\r\n        offsetX = 0,\r\n        offsetY = 0,\r\n        initCallback,\r\n        actualScale = 1,\r\n        allNodes = {},\r\n        allLinks = {},\r\n/*jshint unused: false */\r\n        nodeBuilder = function (node) {\r\n            return svg(\"rect\")\r\n                     .attr(\"width\", 10)\r\n                     .attr(\"height\", 10)\r\n                     .attr(\"fill\", \"#00a2e8\");\r\n        },\r\n\r\n        nodePositionCallback = function (nodeUI, pos) {\r\n            // TODO: Remove magic 5. It should be half of the width or height of the node.\r\n            nodeUI.attr(\"x\", pos.x - 5)\r\n                  .attr(\"y\", pos.y - 5);\r\n        },\r\n\r\n        linkBuilder = function (link) {\r\n            return svg(\"line\").attr(\"stroke\", \"#999\");\r\n        },\r\n\r\n        linkPositionCallback = function (linkUI, fromPos, toPos) {\r\n            linkUI.attr(\"x1\", fromPos.x)\r\n                  .attr(\"y1\", fromPos.y)\r\n                  .attr(\"x2\", toPos.x)\r\n                  .attr(\"y2\", toPos.y);\r\n        },\r\n\r\n        fireRescaled = function (graphics) {\r\n            // TODO: maybe we shall copy changes?\r\n            graphics.fire(\"rescaled\");\r\n        },\r\n\r\n        cachedPos = {x : 0, y: 0},\r\n        cachedFromPos = {x : 0, y: 0},\r\n        cachedToPos = {x : 0, y: 0},\r\n\r\n        updateTransform = function () {\r\n            if (svgContainer) {\r\n                var transform = \"matrix(\" + actualScale + \", 0, 0,\" + actualScale + \",\" + offsetX + \",\" + offsetY + \")\";\r\n                svgContainer.attr(\"transform\", transform);\r\n            }\r\n        };\r\n\r\n    svgRoot = createSvgRoot();\r\n\r\n    var graphics = {\r\n        getNodeUI: function (nodeId) {\r\n            return allNodes[nodeId];\r\n        },\r\n\r\n        getLinkUI: function (linkId) {\r\n            return allLinks[linkId];\r\n        },\r\n\r\n        /**\r\n         * Sets the callback that creates node representation.\r\n         *\r\n         * @param builderCallback a callback function that accepts graph node\r\n         * as a parameter and must return an element representing this node.\r\n         *\r\n         * @returns If builderCallbackOrNode is a valid callback function, instance of this is returned;\r\n         * Otherwise undefined value is returned\r\n         */\r\n        node : function (builderCallback) {\r\n            if (typeof builderCallback !== \"function\") {\r\n                return; // todo: throw? This is not compatible with old versions\r\n            }\r\n\r\n            nodeBuilder = builderCallback;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets the callback that creates link representation\r\n         *\r\n         * @param builderCallback a callback function that accepts graph link\r\n         * as a parameter and must return an element representing this link.\r\n         *\r\n         * @returns If builderCallback is a valid callback function, instance of this is returned;\r\n         * Otherwise undefined value is returned.\r\n         */\r\n        link : function (builderCallback) {\r\n            if (typeof builderCallback !== \"function\") {\r\n                return; // todo: throw? This is not compatible with old versions\r\n            }\r\n\r\n            linkBuilder = builderCallback;\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Allows to override default position setter for the node with a new\r\n         * function. newPlaceCallback(nodeUI, position, node) is function which\r\n         * is used by updateNodePosition().\r\n         */\r\n        placeNode : function (newPlaceCallback) {\r\n            nodePositionCallback = newPlaceCallback;\r\n            return this;\r\n        },\r\n\r\n        placeLink : function (newPlaceLinkCallback) {\r\n            linkPositionCallback = newPlaceLinkCallback;\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Called every before renderer starts rendering.\r\n         */\r\n        beginRender : function () {},\r\n\r\n        /**\r\n         * Called every time when renderer finishes one step of rendering.\r\n         */\r\n        endRender : function () {},\r\n\r\n        /**\r\n         * Sets translate operation that should be applied to all nodes and links.\r\n         */\r\n        graphCenterChanged : function (x, y) {\r\n            offsetX = x;\r\n            offsetY = y;\r\n            updateTransform();\r\n        },\r\n\r\n        /**\r\n         * Default input manager listens to DOM events to process nodes drag-n-drop\r\n         */\r\n        inputManager : domInputManager,\r\n\r\n        translateRel : function (dx, dy) {\r\n            var p = svgRoot.createSVGPoint(),\r\n                t = svgContainer.getCTM(),\r\n                origin = svgRoot.createSVGPoint().matrixTransform(t.inverse());\r\n\r\n            p.x = dx;\r\n            p.y = dy;\r\n\r\n            p = p.matrixTransform(t.inverse());\r\n            p.x = (p.x - origin.x) * t.a;\r\n            p.y = (p.y - origin.y) * t.d;\r\n\r\n            t.e += p.x;\r\n            t.f += p.y;\r\n\r\n            var transform = \"matrix(\" + t.a + \", 0, 0,\" + t.d + \",\" + t.e + \",\" + t.f + \")\";\r\n            svgContainer.attr(\"transform\", transform);\r\n        },\r\n\r\n        scale : function (scaleFactor, scrollPoint) {\r\n            var p = svgRoot.createSVGPoint();\r\n            p.x = scrollPoint.x;\r\n            p.y = scrollPoint.y;\r\n\r\n            p = p.matrixTransform(svgContainer.getCTM().inverse()); // translate to SVG coordinates\r\n\r\n            // Compute new scale matrix in current mouse position\r\n            var k = svgRoot.createSVGMatrix().translate(p.x, p.y).scale(scaleFactor).translate(-p.x, -p.y),\r\n                t = svgContainer.getCTM().multiply(k);\r\n\r\n            actualScale = t.a;\r\n            offsetX = t.e;\r\n            offsetY = t.f;\r\n            var transform = \"matrix(\" + t.a + \", 0, 0,\" + t.d + \",\" + t.e + \",\" + t.f + \")\";\r\n            svgContainer.attr(\"transform\", transform);\r\n\r\n            fireRescaled(this);\r\n            return actualScale;\r\n        },\r\n\r\n        resetScale : function () {\r\n            actualScale = 1;\r\n            var transform = \"matrix(1, 0, 0, 1, 0, 0)\";\r\n            svgContainer.attr(\"transform\", transform);\r\n            fireRescaled(this);\r\n            return this;\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider prepare to render.\r\n        */\r\n        init : function (container) {\r\n            container.appendChild(svgRoot);\r\n            updateTransform();\r\n            // Notify the world if someone waited for update. TODO: should send an event\r\n            if (typeof initCallback === \"function\") {\r\n                initCallback(svgRoot);\r\n            }\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider release occupied resources.\r\n        */\r\n        release : function (container) {\r\n            if (svgRoot && container) {\r\n                container.removeChild(svgRoot);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n         * provider prepare to render given link of the graph\r\n         *\r\n         * @param link - model of a link\r\n         */\r\n        addLink: function (link, pos) {\r\n            var linkUI = linkBuilder(link);\r\n            if (!linkUI) { return; }\r\n            linkUI.position = pos;\r\n            linkUI.link = link;\r\n            allLinks[link.id] = linkUI;\r\n            if (svgContainer.childElementCount > 0) {\r\n                svgContainer.insertBefore(linkUI, svgContainer.firstChild);\r\n            } else {\r\n                svgContainer.appendChild(linkUI);\r\n            }\r\n            return linkUI;\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider remove link from rendering surface.\r\n        *\r\n        * @param linkUI visual representation of the link created by link() execution.\r\n        **/\r\n        releaseLink : function (link) {\r\n            var linkUI = allLinks[link.id];\r\n            if (linkUI) {\r\n                svgContainer.removeChild(linkUI);\r\n                delete allLinks[link.id];\r\n            }\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider prepare to render given node of the graph.\r\n        *\r\n        * @param nodeUI visual representation of the node created by node() execution.\r\n        **/\r\n        addNode : function (node, pos) {\r\n            var nodeUI = nodeBuilder(node);\r\n            if (!nodeUI) {\r\n                return;\r\n            }\r\n            nodeUI.position = pos;\r\n            nodeUI.node = node;\r\n            allNodes[node.id] = nodeUI;\r\n\r\n            svgContainer.appendChild(nodeUI);\r\n\r\n            return nodeUI;\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider remove node from rendering surface.\r\n        *\r\n        * @param node graph's node\r\n        **/\r\n        releaseNode : function (node) {\r\n            var nodeUI = allNodes[node.id];\r\n            if (nodeUI) {\r\n                svgContainer.removeChild(nodeUI);\r\n                delete allNodes[node.id];\r\n            }\r\n        },\r\n\r\n        renderNodes : function () {\r\n            for (var key in allNodes) {\r\n                if (allNodes.hasOwnProperty(key)) {\r\n                    var nodeUI = allNodes[key];\r\n                    cachedPos.x = nodeUI.position.x;\r\n                    cachedPos.y = nodeUI.position.y;\r\n                    nodePositionCallback(nodeUI, cachedPos, nodeUI.node);\r\n                }\r\n            }\r\n        },\r\n\r\n        renderLinks : function () {\r\n            for (var key in allLinks) {\r\n                if (allLinks.hasOwnProperty(key)) {\r\n                    var linkUI = allLinks[key];\r\n                    cachedFromPos.x = linkUI.position.from.x;\r\n                    cachedFromPos.y = linkUI.position.from.y;\r\n                    cachedToPos.x = linkUI.position.to.x;\r\n                    cachedToPos.y = linkUI.position.to.y;\r\n                    linkPositionCallback(linkUI, cachedFromPos, cachedToPos, linkUI.link);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns root element which hosts graphics.\r\n         */\r\n        getGraphicsRoot : function (callbackWhenReady) {\r\n            // todo: should fire an event, instead of having this context.\r\n            if (typeof callbackWhenReady === \"function\") {\r\n                if (svgRoot) {\r\n                    callbackWhenReady(svgRoot);\r\n                } else {\r\n                    initCallback = callbackWhenReady;\r\n                }\r\n            }\r\n            return svgRoot;\r\n        },\r\n        /**\r\n         * Returns root SVG element.\r\n         *\r\n         * Note: This is internal method specific to this renderer\r\n         */\r\n        getSvgRoot : function () {\r\n            return svgRoot;\r\n        }\r\n    };\r\n\r\n\r\n    // Let graphics fire events before we return it to the caller.\r\n    eventify(graphics);\r\n\r\n    return graphics;\r\n\r\n    function createSvgRoot() {\r\n        var svgRoot = svg(\"svg\");\r\n\r\n        svgContainer = svg(\"g\")\r\n              .attr(\"buffered-rendering\", \"dynamic\");\r\n\r\n        svgRoot.appendChild(svgContainer);\r\n        return svgRoot;\r\n    }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/View/svgGraphics.js\n// module id = 284\n// module chunks = 2","module.exports = {\r\n  random: random,\r\n  randomIterator: randomIterator\r\n};\r\n\r\n/**\r\n * Creates seeded PRNG with two methods:\r\n *   next() and nextDouble()\r\n */\r\nfunction random(inputSeed) {\r\n  var seed = typeof inputSeed === 'number' ? inputSeed : (+ new Date());\r\n  var randomFunc = function() {\r\n      // Robert Jenkins' 32 bit integer hash function.\r\n      seed = ((seed + 0x7ed55d16) + (seed << 12))  & 0xffffffff;\r\n      seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;\r\n      seed = ((seed + 0x165667b1) + (seed << 5))   & 0xffffffff;\r\n      seed = ((seed + 0xd3a2646c) ^ (seed << 9))   & 0xffffffff;\r\n      seed = ((seed + 0xfd7046c5) + (seed << 3))   & 0xffffffff;\r\n      seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;\r\n      return (seed & 0xfffffff) / 0x10000000;\r\n  };\r\n\r\n  return {\r\n      /**\r\n       * Generates random integer number in the range from 0 (inclusive) to maxValue (exclusive)\r\n       *\r\n       * @param maxValue Number REQUIRED. Ommitting this number will result in NaN values from PRNG.\r\n       */\r\n      next : function (maxValue) {\r\n          return Math.floor(randomFunc() * maxValue);\r\n      },\r\n\r\n      /**\r\n       * Generates random double number in the range from 0 (inclusive) to 1 (exclusive)\r\n       * This function is the same as Math.random() (except that it could be seeded)\r\n       */\r\n      nextDouble : function () {\r\n          return randomFunc();\r\n      }\r\n  };\r\n}\r\n\r\n/*\r\n * Creates iterator over array, which returns items of array in random order\r\n * Time complexity is guaranteed to be O(n);\r\n */\r\nfunction randomIterator(array, customRandom) {\r\n    var localRandom = customRandom || random();\r\n    if (typeof localRandom.next !== 'function') {\r\n      throw new Error('customRandom does not match expected API: next() function is missing');\r\n    }\r\n\r\n    return {\r\n        forEach : function (callback) {\r\n            var i, j, t;\r\n            for (i = array.length - 1; i > 0; --i) {\r\n                j = localRandom.next(i + 1); // i inclusive\r\n                t = array[j];\r\n                array[j] = array[i];\r\n                array[i] = t;\r\n\r\n                callback(t);\r\n            }\r\n\r\n            if (array.length) {\r\n                callback(array[0]);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Shuffles array randomly, in place.\r\n         */\r\n        shuffle : function () {\r\n            var i, j, t;\r\n            for (i = array.length - 1; i > 0; --i) {\r\n                j = localRandom.next(i + 1); // i inclusive\r\n                t = array[j];\r\n                array[j] = array[i];\r\n                array[i] = t;\r\n            }\r\n\r\n            return array;\r\n        }\r\n    };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.random/index.js\n// module id = 40\n// module chunks = 2","module.exports = merge;\r\n\r\n/**\r\n * Augments `target` with properties in `options`. Does not override\r\n * target's properties if they are defined and matches expected type in \r\n * options\r\n *\r\n * @returns {Object} merged object\r\n */\r\nfunction merge(target, options) {\r\n  var key;\r\n  if (!target) { target = {}; }\r\n  if (options) {\r\n    for (key in options) {\r\n      if (options.hasOwnProperty(key)) {\r\n        var targetHasIt = target.hasOwnProperty(key),\r\n            optionsValueType = typeof options[key],\r\n            shouldReplace = !targetHasIt || (typeof target[key] !== optionsValueType);\r\n\r\n        if (shouldReplace) {\r\n          target[key] = options[key];\r\n        } else if (optionsValueType === 'object') {\r\n          // go deep, don't care about loops here, we are simple API!:\r\n          target[key] = merge(target[key], options[key]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.merge/index.js\n// module id = 41\n// module chunks = 2","var Viva =  require( \"vivagraphjs\" );\r\nvar webglSquare = require('vivagraphjs/src/WebGL/webglSquare.js');\r\nimport {webglNodeProgram} from './webglNodeProgram'\r\n\r\nconsole.log( Viva)\r\n\r\nexport class Spiral {\r\n    constructor() {\r\n        var graph = Viva.Graph.graph();\r\n        graph.addLink(1, 2);\r\n\r\n        var graphics = Viva.Graph.View.webglGraphics();\r\n\r\n        graphics.node( (node)=>{\r\n            return webglSquare(10, '#ff0000')\r\n        });\r\n        graphics.setNodeProgram(webglNodeProgram())\r\n\r\n        var renderer = Viva.Graph.View.renderer(graph,\r\n            {\r\n                graphics : graphics\r\n            });\r\n        renderer.run();\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/spiral.ts","/**\r\n * This is an entry point for global namespace. If you want to use separate\r\n * modules individually - you are more than welcome to do so.\r\n */\r\n\r\nvar random = require('ngraph.random');\r\n\r\nvar Viva = {\r\n  lazyExtend: function() {\r\n    return require('ngraph.merge').apply(this, arguments);\r\n  },\r\n  randomIterator: function() {\r\n    return random.randomIterator.apply(random, arguments);\r\n  },\r\n  random: function() {\r\n    return random.random.apply(random, arguments);\r\n  },\r\n  events: require('ngraph.events')\r\n};\r\n\r\nViva.Graph = {\r\n  version: require('./version.js'),\r\n  graph: require('ngraph.graph'),\r\n\r\n  serializer: function() {\r\n    return {\r\n      loadFromJSON: require('ngraph.fromjson'),\r\n      storeToJSON: require('ngraph.tojson')\r\n    };\r\n  },\r\n\r\n  centrality: require('./Algorithms/centrality.js'),\r\n  operations: require('./Algorithms/operations.js'),\r\n\r\n  geom: function() {\r\n    return {\r\n      intersect: require('gintersect'),\r\n      intersectRect: require('./Utils/intersectRect.js')\r\n    };\r\n  },\r\n\r\n  webgl: require('./WebGL/webgl.js'),\r\n  webglInputEvents: require('./WebGL/webglInputEvents.js'),\r\n\r\n  generator: function() {\r\n    return require('ngraph.generators');\r\n  },\r\n\r\n  Input: {\r\n    domInputManager: require('./Input/domInputManager.js'),\r\n    webglInputManager: require('./Input/webglInputManager.js')\r\n  },\r\n\r\n  Utils: {\r\n    // TODO: move to Input\r\n    dragndrop: require('./Input/dragndrop.js'),\r\n    findElementPosition: require('./Utils/findElementPosition.js'),\r\n    timer: require('./Utils/timer.js'),\r\n    getDimension: require('./Utils/getDimensions.js'),\r\n    events: require('./Utils/backwardCompatibleEvents.js')\r\n  },\r\n\r\n  Layout: {\r\n    forceDirected: require('ngraph.forcelayout'),\r\n    constant: require('./Layout/constant.js')\r\n  },\r\n\r\n  View: {\r\n    // TODO: Move `webglXXX` out to webgl namespace\r\n    Texture: require('./WebGL/texture.js'),\r\n    // TODO: This should not be even exported\r\n    webglAtlas: require('./WebGL/webglAtlas.js'),\r\n    webglImageNodeProgram: require('./WebGL/webglImageNodeProgram.js'),\r\n    webglLinkProgram: require('./WebGL/webglLinkProgram.js'),\r\n    webglNodeProgram: require('./WebGL/webglNodeProgram.js'),\r\n    webglLine: require('./WebGL/webglLine.js'),\r\n    webglSquare: require('./WebGL/webglSquare.js'),\r\n    webglImage: require('./WebGL/webglImage.js'),\r\n    webglGraphics: require('./View/webglGraphics.js'),\r\n    // TODO: Deprecate this:\r\n    _webglUtil: {\r\n      parseColor: require('./WebGL/parseColor.js')\r\n    },\r\n\r\n    // TODO: move to svg namespace\r\n    svgGraphics: require('./View/svgGraphics.js'),\r\n\r\n    renderer: require('./View/renderer.js'),\r\n\r\n    // deprecated\r\n    cssGraphics: function() {\r\n      throw new Error('cssGraphics is deprecated. Please use older version of vivagraph (< 0.7) if you need it');\r\n    },\r\n\r\n    svgNodeFactory: function() {\r\n      throw new Error('svgNodeFactory is deprecated. Please use older version of vivagraph (< 0.7) if you need it');\r\n    },\r\n\r\n    community: function() {\r\n      throw new Error('community is deprecated. Please use vivagraph < 0.7 if you need it, or `https://github.com/anvaka/ngraph.slpa` module');\r\n    }\r\n  },\r\n\r\n  Rect: require('./Utils/rect.js'),\r\n\r\n  svg: require('simplesvg'),\r\n\r\n  // TODO: should be camelCase\r\n  BrowserInfo: require('./Utils/browserInfo.js')\r\n};\r\n\r\nmodule.exports = Viva;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/viva.js\n// module id = 579\n// module chunks = 2","// todo: this should be generated at build time.\r\nmodule.exports = '0.8.1';\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/version.js\n// module id = 580\n// module chunks = 2","module.exports = load;\r\n\r\nvar createGraph = require('ngraph.graph');\r\n\r\nfunction load(jsonGraph, nodeTransform, linkTransform) {\r\n  var stored;\r\n  nodeTransform = nodeTransform || id;\r\n  linkTransform = linkTransform || id;\r\n  if (typeof jsonGraph === 'string') {\r\n    stored = JSON.parse(jsonGraph);\r\n  } else {\r\n    stored = jsonGraph;\r\n  }\r\n\r\n  var graph = createGraph(),\r\n      i;\r\n\r\n  if (stored.links === undefined || stored.nodes === undefined) {\r\n    throw new Error('Cannot load graph without links and nodes');\r\n  }\r\n\r\n  for (i = 0; i < stored.nodes.length; ++i) {\r\n    var parsedNode = nodeTransform(stored.nodes[i]);\r\n    if (!parsedNode.hasOwnProperty('id')) {\r\n      throw new Error('Graph node format is invalid: Node id is missing');\r\n    }\r\n\r\n    graph.addNode(parsedNode.id, parsedNode.data);\r\n  }\r\n\r\n  for (i = 0; i < stored.links.length; ++i) {\r\n    var link = linkTransform(stored.links[i]);\r\n    if (!link.hasOwnProperty('fromId') || !link.hasOwnProperty('toId')) {\r\n      throw new Error('Graph link format is invalid. Both fromId and toId are required');\r\n    }\r\n\r\n    graph.addLink(link.fromId, link.toId, link.data);\r\n  }\r\n\r\n  return graph;\r\n}\r\n\r\nfunction id(x) { return x; }\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.fromjson/index.js\n// module id = 581\n// module chunks = 2","module.exports = save;\r\n\r\nfunction save(graph, customNodeTransform, customLinkTransform) {\r\n  // Object contains `nodes` and `links` arrays.\r\n  var result = {\r\n    nodes: [],\r\n    links: []\r\n  };\r\n\r\n  var nodeTransform = customNodeTransform || defaultTransformForNode;\r\n  var linkTransform = customLinkTransform || defaultTransformForLink;\r\n\r\n  graph.forEachNode(saveNode);\r\n  graph.forEachLink(saveLink);\r\n\r\n  return JSON.stringify(result);\r\n\r\n  function saveNode(node) {\r\n    // Each node of the graph is processed to take only required fields\r\n    // `id` and `data`\r\n    result.nodes.push(nodeTransform(node));\r\n  }\r\n\r\n  function saveLink(link) {\r\n    // Each link of the graph is also processed to take `fromId`, `toId` and\r\n    // `data`\r\n    result.links.push(linkTransform(link));\r\n  }\r\n\r\n  function defaultTransformForNode(node) {\r\n    var result = {\r\n      id: node.id\r\n    };\r\n    // We don't want to store undefined fields when it's not necessary:\r\n    if (node.data !== undefined) {\r\n      result.data = node.data;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  function defaultTransformForLink(link) {\r\n    var result = {\r\n      fromId: link.fromId,\r\n      toId: link.toId,\r\n    };\r\n\r\n    if (link.data !== undefined) {\r\n      result.data = link.data;\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.tojson/index.js\n// module id = 582\n// module chunks = 2","var centrality = require('ngraph.centrality');\r\n\r\nmodule.exports = centralityWrapper;\r\n\r\nfunction centralityWrapper() {\r\n  // TODO: This should not be a function\r\n  return {\r\n    betweennessCentrality: betweennessCentrality,\r\n    degreeCentrality: degreeCentrality\r\n  };\r\n}\r\n\r\nfunction betweennessCentrality(g) {\r\n  var betweenness = centrality.betweenness(g);\r\n  return toVivaGraphCentralityFormat(betweenness);\r\n}\r\n\r\nfunction degreeCentrality(g, kind) {\r\n  var degree = centrality.degree(g, kind);\r\n  return toVivaGraphCentralityFormat(degree);\r\n}\r\n\r\nfunction toVivaGraphCentralityFormat(centrality) {\r\n  return Object.keys(centrality).sort(byValue).map(toKeyValue);\r\n\r\n  function byValue(x, y) {\r\n    return centrality[y] - centrality[x];\r\n  }\r\n\r\n  function toKeyValue(key) {\r\n    return {\r\n      key: key,\r\n      value: centrality[key]\r\n    };\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Algorithms/centrality.js\n// module id = 583\n// module chunks = 2","module.exports.degree = require('./src/degree.js');\r\nmodule.exports.betweenness = require('./src/betweenness.js');\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.centrality/index.js\n// module id = 584\n// module chunks = 2","module.exports = degree;\r\n\r\n/**\r\n * Calculates graph nodes degree centrality (in/out or both).\r\n *\r\n * @see http://en.wikipedia.org/wiki/Centrality#Degree_centrality\r\n *\r\n * @param {ngraph.graph} graph object for which we are calculating centrality.\r\n * @param {string} [kind=both] What kind of degree centrality needs to be calculated:\r\n *   'in'    - calculate in-degree centrality\r\n *   'out'   - calculate out-degree centrality\r\n *   'inout' - (default) generic degree centrality is calculated\r\n */\r\nfunction degree(graph, kind) {\r\n  var getNodeDegree,\r\n    sortedDegrees = [],\r\n    result = Object.create(null),\r\n    nodeDegree;\r\n\r\n  kind = (kind || 'both').toLowerCase();\r\n  if (kind === 'both' || kind === 'inout') {\r\n    getNodeDegree = inoutDegreeCalculator;\r\n  } else if (kind === 'in') {\r\n    getNodeDegree = inDegreeCalculator;\r\n  } else if (kind === 'out') {\r\n    getNodeDegree = outDegreeCalculator;\r\n  } else {\r\n    throw new Error('Expected centrality degree kind is: in, out or both');\r\n  }\r\n\r\n  graph.forEachNode(calculateNodeDegree);\r\n\r\n  return result;\r\n\r\n  function calculateNodeDegree(node) {\r\n    var links = graph.getLinks(node.id);\r\n    result[node.id] = getNodeDegree(links, node.id);\r\n  }\r\n}\r\n\r\nfunction inDegreeCalculator(links, nodeId) {\r\n  var total = 0;\r\n  for (var i = 0; i < links.length; i += 1) {\r\n    total += (links[i].toId === nodeId) ? 1 : 0;\r\n  }\r\n  return total;\r\n}\r\n\r\nfunction outDegreeCalculator(links, nodeId) {\r\n  var total = 0;\r\n  for (var i = 0; i < links.length; i += 1) {\r\n    total += (links[i].fromId === nodeId) ? 1 : 0;\r\n  }\r\n  return total;\r\n}\r\n\r\nfunction inoutDegreeCalculator(links) {\r\n  return links.length;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.centrality/src/degree.js\n// module id = 585\n// module chunks = 2","module.exports = betweennes;\r\n\r\n/**\r\n * I'm using http://www.inf.uni-konstanz.de/algo/publications/b-vspbc-08.pdf\r\n * as a reference for this implementation\r\n */\r\nfunction betweennes(graph, oriented) {\r\n  var Q = [],\r\n    S = []; // Queue and Stack\r\n  // list of predcessors on shorteest paths from source\r\n  var pred = Object.create(null);\r\n  // distance from source\r\n  var dist = Object.create(null);\r\n  // number of shortest paths from source to key\r\n  var sigma = Object.create(null);\r\n  // dependency of source on key\r\n  var delta = Object.create(null);\r\n\r\n  var currentNode;\r\n  var centrality = Object.create(null);\r\n\r\n  graph.forEachNode(setCentralityToZero);\r\n  graph.forEachNode(calculateCentrality);\r\n\r\n  if (!oriented) {\r\n    // The centrality scores need to be divided by two if the graph is not oriented,\r\n    // since all shortest paths are considered twice\r\n    Object.keys(centrality).forEach(divideByTwo);\r\n  }\r\n\r\n  return centrality;\r\n\r\n  function divideByTwo(key) {\r\n    centrality[key] /= 2;\r\n  }\r\n\r\n  function setCentralityToZero(node) {\r\n    centrality[node.id] = 0;\r\n  }\r\n\r\n  function calculateCentrality(node) {\r\n    currentNode = node.id;\r\n    singleSourceShortestPath(currentNode);\r\n    accumulate();\r\n  }\r\n\r\n  function accumulate() {\r\n    graph.forEachNode(setDeltaToZero);\r\n    while (S.length) {\r\n      var w = S.pop();\r\n      var coeff = (1 + delta[w])/sigma[w];\r\n      var predcessors = pred[w];\r\n      for (var idx = 0; idx < predcessors.length; ++idx) {\r\n        var v = predcessors[idx];\r\n        delta[v] += sigma[v] * coeff;\r\n      }\r\n      if (w !== currentNode) {\r\n        centrality[w] += delta[w];\r\n      }\r\n    }\r\n  }\r\n\r\n  function setDeltaToZero(node) {\r\n    delta[node.id] = 0;\r\n  }\r\n\r\n  function singleSourceShortestPath(source) {\r\n    graph.forEachNode(initNode);\r\n    dist[source] = 0;\r\n    sigma[source] = 1;\r\n    Q.push(source);\r\n\r\n    while (Q.length) {\r\n      var v = Q.shift();\r\n      var dedup = Object.create(null);\r\n      S.push(v);\r\n      graph.forEachLinkedNode(v, toId, oriented);\r\n    }\r\n\r\n    function toId(otherNode) {\r\n      // NOTE: This code will also consider multi-edges, which are often\r\n      // ignored by popular software (Gephi/NetworkX). Depending on your use\r\n      // case this may not be desired and deduping needs to be performed. To\r\n      // save memory I'm not deduping here...\r\n      processNode(otherNode.id);\r\n    }\r\n\r\n    function initNode(node) {\r\n      var nodeId = node.id;\r\n      pred[nodeId] = []; // empty list\r\n      dist[nodeId] = -1;\r\n      sigma[nodeId] = 0;\r\n    }\r\n\r\n    function processNode(w) {\r\n      // path discovery\r\n      if (dist[w] === -1) {\r\n        // Node w is found for the first time\r\n        dist[w] = dist[v] + 1;\r\n        Q.push(w);\r\n      }\r\n      // path counting\r\n      if (dist[w] === dist[v] + 1) {\r\n        // edge (v, w) on a shortest path\r\n        sigma[w] += sigma[v];\r\n        pred[w].push(v);\r\n      }\r\n    }\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.centrality/src/betweenness.js\n// module id = 586\n// module chunks = 2","/**\r\n * @fileOverview Contains collection of primitive operations under graph.\r\n *\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\r\nmodule.exports = operations;\r\n\r\nfunction operations() {\r\n\r\n    return {\r\n        /**\r\n         * Gets graph density, which is a ratio of actual number of edges to maximum\r\n         * number of edges. I.e. graph density 1 means all nodes are connected with each other with an edge.\r\n         * Density 0 - graph has no edges. Runtime: O(1)\r\n         * \r\n         * @param graph represents oriented graph structure.\r\n         * @param directed (optional boolean) represents if the graph should be treated as a directed graph.\r\n         * \r\n         * @returns density of the graph if graph has nodes. NaN otherwise. Returns density for undirected graph by default but returns density for directed graph if a boolean 'true' is passed along with the graph.\r\n         */\r\n        density : function (graph,directed) {\r\n            var nodes = graph.getNodesCount();\r\n            if (nodes === 0) {\r\n                return NaN;\r\n            }\r\n            if(directed){\r\n                return graph.getLinksCount() / (nodes * (nodes - 1));\r\n            } else {\r\n                return 2 * graph.getLinksCount() / (nodes * (nodes - 1));\r\n            }\r\n        }\r\n    };\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Algorithms/operations.js\n// module id = 587\n// module chunks = 2","var intersect = require('gintersect');\r\n\r\nmodule.exports = intersectRect;\r\n\r\nfunction intersectRect(left, top, right, bottom, x1, y1, x2, y2) {\r\n  return intersect(left, top, left, bottom, x1, y1, x2, y2) ||\r\n    intersect(left, bottom, right, bottom, x1, y1, x2, y2) ||\r\n    intersect(right, bottom, right, top, x1, y1, x2, y2) ||\r\n    intersect(right, top, left, top, x1, y1, x2, y2);\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Utils/intersectRect.js\n// module id = 588\n// module chunks = 2","module.exports = {\r\n  ladder: ladder,\r\n  complete: complete,\r\n  completeBipartite: completeBipartite,\r\n  balancedBinTree: balancedBinTree,\r\n  path: path,\r\n  circularLadder: circularLadder,\r\n  grid: grid,\r\n  grid3: grid3,\r\n  noLinks: noLinks,\r\n  wattsStrogatz: wattsStrogatz\r\n};\r\n\r\nvar createGraph = require('ngraph.graph');\r\n\r\nfunction ladder(n) {\r\n/**\r\n * Ladder graph is a graph in form of ladder\r\n * @param {Number} n Represents number of steps in the ladder\r\n */\r\n  if (!n || n < 0) {\r\n    throw new Error(\"Invalid number of nodes\");\r\n  }\r\n\r\n  var g = createGraph(),\r\n      i;\r\n\r\n  for (i = 0; i < n - 1; ++i) {\r\n    g.addLink(i, i + 1);\r\n    // first row\r\n    g.addLink(n + i, n + i + 1);\r\n    // second row\r\n    g.addLink(i, n + i);\r\n    // ladder's step\r\n  }\r\n\r\n  g.addLink(n - 1, 2 * n - 1);\r\n  // last step in the ladder;\r\n\r\n  return g;\r\n}\r\n\r\nfunction circularLadder(n) {\r\n/**\r\n * Circular ladder with n steps.\r\n *\r\n * @param {Number} n of steps in the ladder.\r\n */\r\n    if (!n || n < 0) {\r\n        throw new Error(\"Invalid number of nodes\");\r\n    }\r\n\r\n    var g = ladder(n);\r\n\r\n    g.addLink(0, n - 1);\r\n    g.addLink(n, 2 * n - 1);\r\n    return g;\r\n}\r\n\r\nfunction complete(n) {\r\n/**\r\n * Complete graph Kn.\r\n *\r\n * @param {Number} n represents number of nodes in the complete graph.\r\n */\r\n  if (!n || n < 1) {\r\n    throw new Error(\"At least two nodes are expected for complete graph\");\r\n  }\r\n\r\n  var g = createGraph(),\r\n      i,\r\n      j;\r\n\r\n  for (i = 0; i < n; ++i) {\r\n    for (j = i + 1; j < n; ++j) {\r\n      if (i !== j) {\r\n        g.addLink(i, j);\r\n      }\r\n    }\r\n  }\r\n\r\n  return g;\r\n}\r\n\r\nfunction completeBipartite (n, m) {\r\n/**\r\n * Complete bipartite graph K n,m. Each node in the\r\n * first partition is connected to all nodes in the second partition.\r\n *\r\n * @param {Number} n represents number of nodes in the first graph partition\r\n * @param {Number} m represents number of nodes in the second graph partition\r\n */\r\n  if (!n || !m || n < 0 || m < 0) {\r\n    throw new Error(\"Graph dimensions are invalid. Number of nodes in each partition should be greater than 0\");\r\n  }\r\n\r\n  var g = createGraph(),\r\n      i, j;\r\n\r\n  for (i = 0; i < n; ++i) {\r\n    for (j = n; j < n + m; ++j) {\r\n      g.addLink(i, j);\r\n    }\r\n  }\r\n\r\n  return g;\r\n}\r\n\r\nfunction path(n) {\r\n/**\r\n * Path graph with n steps.\r\n *\r\n * @param {Number} n number of nodes in the path\r\n */\r\n  if (!n || n < 0) {\r\n    throw new Error(\"Invalid number of nodes\");\r\n  }\r\n\r\n  var g = createGraph(),\r\n      i;\r\n\r\n  g.addNode(0);\r\n\r\n  for (i = 1; i < n; ++i) {\r\n    g.addLink(i - 1, i);\r\n  }\r\n\r\n  return g;\r\n}\r\n\r\n\r\nfunction grid(n, m) {\r\n/**\r\n * Grid graph with n rows and m columns.\r\n *\r\n * @param {Number} n of rows in the graph.\r\n * @param {Number} m of columns in the graph.\r\n */\r\n  if (n < 1 || m < 1) {\r\n    throw new Error(\"Invalid number of nodes in grid graph\");\r\n  }\r\n  var g = createGraph(),\r\n      i,\r\n      j;\r\n  if (n === 1 && m === 1) {\r\n    g.addNode(0);\r\n    return g;\r\n  }\r\n\r\n  for (i = 0; i < n; ++i) {\r\n    for (j = 0; j < m; ++j) {\r\n      var node = i + j * n;\r\n      if (i > 0) { g.addLink(node, i - 1 + j * n); }\r\n      if (j > 0) { g.addLink(node, i + (j - 1) * n); }\r\n    }\r\n  }\r\n\r\n  return g;\r\n}\r\n\r\nfunction grid3(n, m, z) {\r\n/**\r\n * 3D grid with n rows and m columns and z levels.\r\n *\r\n * @param {Number} n of rows in the graph.\r\n * @param {Number} m of columns in the graph.\r\n * @param {Number} z of levels in the graph.\r\n */\r\n  if (n < 1 || m < 1 || z < 1) {\r\n    throw new Error(\"Invalid number of nodes in grid3 graph\");\r\n  }\r\n  var g = createGraph(),\r\n      i, j, k;\r\n\r\n  if (n === 1 && m === 1 && z === 1) {\r\n    g.addNode(0);\r\n    return g;\r\n  }\r\n\r\n  for (k = 0; k < z; ++k) {\r\n    for (i = 0; i < n; ++i) {\r\n      for (j = 0; j < m; ++j) {\r\n        var level = k * n * m;\r\n        var node = i + j * n + level;\r\n        if (i > 0) { g.addLink(node, i - 1 + j * n + level); }\r\n        if (j > 0) { g.addLink(node, i + (j - 1) * n + level); }\r\n        if (k > 0) { g.addLink(node, i + j * n + (k - 1) * n * m ); }\r\n      }\r\n    }\r\n  }\r\n\r\n  return g;\r\n}\r\n\r\nfunction balancedBinTree(n) {\r\n/**\r\n * Balanced binary tree with n levels.\r\n *\r\n * @param {Number} n of levels in the binary tree\r\n */\r\n  if (n < 0) {\r\n    throw new Error(\"Invalid number of nodes in balanced tree\");\r\n  }\r\n  var g = createGraph(),\r\n      count = Math.pow(2, n),\r\n      level;\r\n\r\n  if (n === 0) {\r\n    g.addNode(1);\r\n  }\r\n\r\n  for (level = 1; level < count; ++level) {\r\n    var root = level,\r\n      left = root * 2,\r\n      right = root * 2 + 1;\r\n\r\n    g.addLink(root, left);\r\n    g.addLink(root, right);\r\n  }\r\n\r\n  return g;\r\n}\r\n\r\nfunction noLinks(n) {\r\n/**\r\n * Graph with no links\r\n *\r\n * @param {Number} n of nodes in the graph\r\n */\r\n  if (n < 0) {\r\n    throw new Error(\"Number of nodes shoul be >= 0\");\r\n  }\r\n\r\n  var g = createGraph(), i;\r\n  for (i = 0; i < n; ++i) {\r\n    g.addNode(i);\r\n  }\r\n\r\n  return g;\r\n}\r\n\r\nfunction wattsStrogatz(n, k, p, seed) {\r\n/**\r\n * Watts-Strogatz small-world graph.\r\n *\r\n * @param {Number} n The number of nodes\r\n * @param {Number} k Each node is connected to k nearest neighbors in ring topology\r\n * @param {Number} p The probability of rewiring each edge\r\n\r\n * @see https://github.com/networkx/networkx/blob/master/networkx/generators/random_graphs.py\r\n */\r\n  if (k >= n) throw new Error('Choose smaller `k`. It cannot be larger than number of nodes `n`');\r\n\r\n\r\n  var random = require('ngraph.random').random(seed || 42);\r\n\r\n  var g = createGraph(), i, to;\r\n  for (i = 0; i < n; ++i) {\r\n    g.addNode(i);\r\n  }\r\n\r\n  // connect each node to k/2 neighbors\r\n  var neighborsSize = Math.floor(k/2 + 1);\r\n  for (var j = 1; j < neighborsSize; ++j) {\r\n    for (i = 0; i < n; ++i) {\r\n      to = (j + i) % n;\r\n      g.addLink(i, to);\r\n    }\r\n  }\r\n\r\n  // rewire edges from each node\r\n  // loop over all nodes in order (label) and neighbors in order (distance)\r\n  // no self loops or multiple edges allowed\r\n  for (j = 1; j < neighborsSize; ++j) {\r\n    for (i = 0; i < n; ++i) {\r\n      if (random.nextDouble() < p) {\r\n        var from = i;\r\n        to = (j + i) % n;\r\n\r\n        var newTo = random.next(n);\r\n        var needsRewire = (newTo === from || g.hasLink(from, newTo));\r\n        if (needsRewire && g.getLinks(from).length === n - 1) {\r\n          // we cannot rewire this node, it has too many links.\r\n          continue;\r\n        }\r\n        // Enforce no self-loops or multiple edges\r\n        while (needsRewire) {\r\n          newTo = random.next(n);\r\n          needsRewire = (newTo === from || g.hasLink(from, newTo));\r\n        }\r\n        var link = g.hasLink(from, to);\r\n        g.removeLink(link);\r\n        g.addLink(from, newTo);\r\n      }\r\n    }\r\n  }\r\n\r\n  return g;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.generators/index.js\n// module id = 589\n// module chunks = 2","/**\r\n * This module provides compatibility layer with 0.6.x library. It will be\r\n * removed in the next version\r\n */\r\n\r\nvar events = require('ngraph.events');\r\n\r\nmodule.exports = backwardCompatibleEvents;\r\n\r\nfunction backwardCompatibleEvents(g) {\r\n  console.log(\"This method is deprecated. Please use Viva.events() instead\");\r\n\r\n  if (!g) {\r\n    return g;\r\n  }\r\n\r\n  var eventsDefined = (g.on !== undefined) ||\r\n    (g.off !== undefined) ||\r\n    (g.fire !== undefined);\r\n\r\n  if (eventsDefined) {\r\n    // events already defined, ignore\r\n    return {\r\n      extend: function() {\r\n        return g;\r\n      },\r\n      on: g.on,\r\n      stop: g.off\r\n    };\r\n  }\r\n\r\n  return {\r\n    extend: extend,\r\n    on: g.on,\r\n    stop: g.off\r\n  };\r\n\r\n  function extend() {\r\n    var backwardCompatible = events(g);\r\n    backwardCompatible.addEventListener = backwardCompatible.on;\r\n    return backwardCompatible;\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Utils/backwardCompatibleEvents.js\n// module id = 590\n// module chunks = 2","module.exports = Spring;\r\n\r\n/**\r\n * Represents a physical spring. Spring connects two bodies, has rest length\r\n * stiffness coefficient and optional weight\r\n */\r\nfunction Spring(fromBody, toBody, length, coeff, weight) {\r\n    this.from = fromBody;\r\n    this.to = toBody;\r\n    this.length = length;\r\n    this.coeff = coeff;\r\n\r\n    this.weight = typeof weight === 'number' ? weight : 1;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.physics.simulator/lib/spring.js\n// module id = 591\n// module chunks = 2","/**\r\n * This is Barnes Hut simulation algorithm for 2d case. Implementation\r\n * is highly optimized (avoids recusion and gc pressure)\r\n *\r\n * http://www.cs.princeton.edu/courses/archive/fall03/cs126/assignments/barnes-hut.html\r\n */\r\n\r\nmodule.exports = function(options) {\r\n  options = options || {};\r\n  options.gravity = typeof options.gravity === 'number' ? options.gravity : -1;\r\n  options.theta = typeof options.theta === 'number' ? options.theta : 0.8;\r\n\r\n  // we require deterministic randomness here\r\n  var random = require('ngraph.random').random(1984),\r\n    Node = require('./node'),\r\n    InsertStack = require('./insertStack'),\r\n    isSamePosition = require('./isSamePosition');\r\n\r\n  var gravity = options.gravity,\r\n    updateQueue = [],\r\n    insertStack = new InsertStack(),\r\n    theta = options.theta,\r\n\r\n    nodesCache = [],\r\n    currentInCache = 0,\r\n    root = newNode();\r\n\r\n  return {\r\n    insertBodies: insertBodies,\r\n    /**\r\n     * Gets root node if its present\r\n     */\r\n    getRoot: function() {\r\n      return root;\r\n    },\r\n    updateBodyForce: update,\r\n    options: function(newOptions) {\r\n      if (newOptions) {\r\n        if (typeof newOptions.gravity === 'number') {\r\n          gravity = newOptions.gravity;\r\n        }\r\n        if (typeof newOptions.theta === 'number') {\r\n          theta = newOptions.theta;\r\n        }\r\n\r\n        return this;\r\n      }\r\n\r\n      return {\r\n        gravity: gravity,\r\n        theta: theta\r\n      };\r\n    }\r\n  };\r\n\r\n  function newNode() {\r\n    // To avoid pressure on GC we reuse nodes.\r\n    var node = nodesCache[currentInCache];\r\n    if (node) {\r\n      node.quad0 = null;\r\n      node.quad1 = null;\r\n      node.quad2 = null;\r\n      node.quad3 = null;\r\n      node.body = null;\r\n      node.mass = node.massX = node.massY = 0;\r\n      node.left = node.right = node.top = node.bottom = 0;\r\n    } else {\r\n      node = new Node();\r\n      nodesCache[currentInCache] = node;\r\n    }\r\n\r\n    ++currentInCache;\r\n    return node;\r\n  }\r\n\r\n  function update(sourceBody) {\r\n    var queue = updateQueue,\r\n      v,\r\n      dx,\r\n      dy,\r\n      r, fx = 0,\r\n      fy = 0,\r\n      queueLength = 1,\r\n      shiftIdx = 0,\r\n      pushIdx = 1;\r\n\r\n    queue[0] = root;\r\n\r\n    while (queueLength) {\r\n      var node = queue[shiftIdx],\r\n        body = node.body;\r\n\r\n      queueLength -= 1;\r\n      shiftIdx += 1;\r\n      var differentBody = (body !== sourceBody);\r\n      if (body && differentBody) {\r\n        // If the current node is a leaf node (and it is not source body),\r\n        // calculate the force exerted by the current node on body, and add this\r\n        // amount to body's net force.\r\n        dx = body.pos.x - sourceBody.pos.x;\r\n        dy = body.pos.y - sourceBody.pos.y;\r\n        r = Math.sqrt(dx * dx + dy * dy);\r\n\r\n        if (r === 0) {\r\n          // Poor man's protection against zero distance.\r\n          dx = (random.nextDouble() - 0.5) / 50;\r\n          dy = (random.nextDouble() - 0.5) / 50;\r\n          r = Math.sqrt(dx * dx + dy * dy);\r\n        }\r\n\r\n        // This is standard gravition force calculation but we divide\r\n        // by r^3 to save two operations when normalizing force vector.\r\n        v = gravity * body.mass * sourceBody.mass / (r * r * r);\r\n        fx += v * dx;\r\n        fy += v * dy;\r\n      } else if (differentBody) {\r\n        // Otherwise, calculate the ratio s / r,  where s is the width of the region\r\n        // represented by the internal node, and r is the distance between the body\r\n        // and the node's center-of-mass\r\n        dx = node.massX / node.mass - sourceBody.pos.x;\r\n        dy = node.massY / node.mass - sourceBody.pos.y;\r\n        r = Math.sqrt(dx * dx + dy * dy);\r\n\r\n        if (r === 0) {\r\n          // Sorry about code duplucation. I don't want to create many functions\r\n          // right away. Just want to see performance first.\r\n          dx = (random.nextDouble() - 0.5) / 50;\r\n          dy = (random.nextDouble() - 0.5) / 50;\r\n          r = Math.sqrt(dx * dx + dy * dy);\r\n        }\r\n        // If s / r < θ, treat this internal node as a single body, and calculate the\r\n        // force it exerts on sourceBody, and add this amount to sourceBody's net force.\r\n        if ((node.right - node.left) / r < theta) {\r\n          // in the if statement above we consider node's width only\r\n          // because the region was squarified during tree creation.\r\n          // Thus there is no difference between using width or height.\r\n          v = gravity * node.mass * sourceBody.mass / (r * r * r);\r\n          fx += v * dx;\r\n          fy += v * dy;\r\n        } else {\r\n          // Otherwise, run the procedure recursively on each of the current node's children.\r\n\r\n          // I intentionally unfolded this loop, to save several CPU cycles.\r\n          if (node.quad0) {\r\n            queue[pushIdx] = node.quad0;\r\n            queueLength += 1;\r\n            pushIdx += 1;\r\n          }\r\n          if (node.quad1) {\r\n            queue[pushIdx] = node.quad1;\r\n            queueLength += 1;\r\n            pushIdx += 1;\r\n          }\r\n          if (node.quad2) {\r\n            queue[pushIdx] = node.quad2;\r\n            queueLength += 1;\r\n            pushIdx += 1;\r\n          }\r\n          if (node.quad3) {\r\n            queue[pushIdx] = node.quad3;\r\n            queueLength += 1;\r\n            pushIdx += 1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    sourceBody.force.x += fx;\r\n    sourceBody.force.y += fy;\r\n  }\r\n\r\n  function insertBodies(bodies) {\r\n    var x1 = Number.MAX_VALUE,\r\n      y1 = Number.MAX_VALUE,\r\n      x2 = Number.MIN_VALUE,\r\n      y2 = Number.MIN_VALUE,\r\n      i,\r\n      max = bodies.length;\r\n\r\n    // To reduce quad tree depth we are looking for exact bounding box of all particles.\r\n    i = max;\r\n    while (i--) {\r\n      var x = bodies[i].pos.x;\r\n      var y = bodies[i].pos.y;\r\n      if (x < x1) {\r\n        x1 = x;\r\n      }\r\n      if (x > x2) {\r\n        x2 = x;\r\n      }\r\n      if (y < y1) {\r\n        y1 = y;\r\n      }\r\n      if (y > y2) {\r\n        y2 = y;\r\n      }\r\n    }\r\n\r\n    // Squarify the bounds.\r\n    var dx = x2 - x1,\r\n      dy = y2 - y1;\r\n    if (dx > dy) {\r\n      y2 = y1 + dx;\r\n    } else {\r\n      x2 = x1 + dy;\r\n    }\r\n\r\n    currentInCache = 0;\r\n    root = newNode();\r\n    root.left = x1;\r\n    root.right = x2;\r\n    root.top = y1;\r\n    root.bottom = y2;\r\n\r\n    i = max - 1;\r\n    if (i >= 0) {\r\n      root.body = bodies[i];\r\n    }\r\n    while (i--) {\r\n      insert(bodies[i], root);\r\n    }\r\n  }\r\n\r\n  function insert(newBody) {\r\n    insertStack.reset();\r\n    insertStack.push(root, newBody);\r\n\r\n    while (!insertStack.isEmpty()) {\r\n      var stackItem = insertStack.pop(),\r\n        node = stackItem.node,\r\n        body = stackItem.body;\r\n\r\n      if (!node.body) {\r\n        // This is internal node. Update the total mass of the node and center-of-mass.\r\n        var x = body.pos.x;\r\n        var y = body.pos.y;\r\n        node.mass = node.mass + body.mass;\r\n        node.massX = node.massX + body.mass * x;\r\n        node.massY = node.massY + body.mass * y;\r\n\r\n        // Recursively insert the body in the appropriate quadrant.\r\n        // But first find the appropriate quadrant.\r\n        var quadIdx = 0, // Assume we are in the 0's quad.\r\n          left = node.left,\r\n          right = (node.right + left) / 2,\r\n          top = node.top,\r\n          bottom = (node.bottom + top) / 2;\r\n\r\n        if (x > right) { // somewhere in the eastern part.\r\n          quadIdx = quadIdx + 1;\r\n          left = right;\r\n          right = node.right;\r\n        }\r\n        if (y > bottom) { // and in south.\r\n          quadIdx = quadIdx + 2;\r\n          top = bottom;\r\n          bottom = node.bottom;\r\n        }\r\n\r\n        var child = getChild(node, quadIdx);\r\n        if (!child) {\r\n          // The node is internal but this quadrant is not taken. Add\r\n          // subnode to it.\r\n          child = newNode();\r\n          child.left = left;\r\n          child.top = top;\r\n          child.right = right;\r\n          child.bottom = bottom;\r\n          child.body = body;\r\n\r\n          setChild(node, quadIdx, child);\r\n        } else {\r\n          // continue searching in this quadrant.\r\n          insertStack.push(child, body);\r\n        }\r\n      } else {\r\n        // We are trying to add to the leaf node.\r\n        // We have to convert current leaf into internal node\r\n        // and continue adding two nodes.\r\n        var oldBody = node.body;\r\n        node.body = null; // internal nodes do not cary bodies\r\n\r\n        if (isSamePosition(oldBody.pos, body.pos)) {\r\n          // Prevent infinite subdivision by bumping one node\r\n          // anywhere in this quadrant\r\n          var retriesCount = 3;\r\n          do {\r\n            var offset = random.nextDouble();\r\n            var dx = (node.right - node.left) * offset;\r\n            var dy = (node.bottom - node.top) * offset;\r\n\r\n            oldBody.pos.x = node.left + dx;\r\n            oldBody.pos.y = node.top + dy;\r\n            retriesCount -= 1;\r\n            // Make sure we don't bump it out of the box. If we do, next iteration should fix it\r\n          } while (retriesCount > 0 && isSamePosition(oldBody.pos, body.pos));\r\n\r\n          if (retriesCount === 0 && isSamePosition(oldBody.pos, body.pos)) {\r\n            // This is very bad, we ran out of precision.\r\n            // if we do not return from the method we'll get into\r\n            // infinite loop here. So we sacrifice correctness of layout, and keep the app running\r\n            // Next layout iteration should get larger bounding box in the first step and fix this\r\n            return;\r\n          }\r\n        }\r\n        // Next iteration should subdivide node further.\r\n        insertStack.push(node, oldBody);\r\n        insertStack.push(node, body);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction getChild(node, idx) {\r\n  if (idx === 0) return node.quad0;\r\n  if (idx === 1) return node.quad1;\r\n  if (idx === 2) return node.quad2;\r\n  if (idx === 3) return node.quad3;\r\n  return null;\r\n}\r\n\r\nfunction setChild(node, idx, child) {\r\n  if (idx === 0) node.quad0 = child;\r\n  else if (idx === 1) node.quad1 = child;\r\n  else if (idx === 2) node.quad2 = child;\r\n  else if (idx === 3) node.quad3 = child;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.quadtreebh/index.js\n// module id = 592\n// module chunks = 2","/**\r\n * Internal data structure to represent 2D QuadTree node\r\n */\r\nmodule.exports = function Node() {\r\n  // body stored inside this node. In quad tree only leaf nodes (by construction)\r\n  // contain boides:\r\n  this.body = null;\r\n\r\n  // Child nodes are stored in quads. Each quad is presented by number:\r\n  // 0 | 1\r\n  // -----\r\n  // 2 | 3\r\n  this.quad0 = null;\r\n  this.quad1 = null;\r\n  this.quad2 = null;\r\n  this.quad3 = null;\r\n\r\n  // Total mass of current node\r\n  this.mass = 0;\r\n\r\n  // Center of mass coordinates\r\n  this.massX = 0;\r\n  this.massY = 0;\r\n\r\n  // bounding box coordinates\r\n  this.left = 0;\r\n  this.top = 0;\r\n  this.bottom = 0;\r\n  this.right = 0;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.quadtreebh/node.js\n// module id = 593\n// module chunks = 2","module.exports = InsertStack;\r\n\r\n/**\r\n * Our implmentation of QuadTree is non-recursive to avoid GC hit\r\n * This data structure represent stack of elements\r\n * which we are trying to insert into quad tree.\r\n */\r\nfunction InsertStack () {\r\n    this.stack = [];\r\n    this.popIdx = 0;\r\n}\r\n\r\nInsertStack.prototype = {\r\n    isEmpty: function() {\r\n        return this.popIdx === 0;\r\n    },\r\n    push: function (node, body) {\r\n        var item = this.stack[this.popIdx];\r\n        if (!item) {\r\n            // we are trying to avoid memory pressue: create new element\r\n            // only when absolutely necessary\r\n            this.stack[this.popIdx] = new InsertStackElement(node, body);\r\n        } else {\r\n            item.node = node;\r\n            item.body = body;\r\n        }\r\n        ++this.popIdx;\r\n    },\r\n    pop: function () {\r\n        if (this.popIdx > 0) {\r\n            return this.stack[--this.popIdx];\r\n        }\r\n    },\r\n    reset: function () {\r\n        this.popIdx = 0;\r\n    }\r\n};\r\n\r\nfunction InsertStackElement(node, body) {\r\n    this.node = node; // QuadTree node\r\n    this.body = body; // physical body which needs to be inserted to node\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.quadtreebh/insertStack.js\n// module id = 594\n// module chunks = 2","module.exports = function isSamePosition(point1, point2) {\r\n    var dx = Math.abs(point1.x - point2.x);\r\n    var dy = Math.abs(point1.y - point2.y);\r\n\r\n    return (dx < 1e-8 && dy < 1e-8);\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.quadtreebh/isSamePosition.js\n// module id = 595\n// module chunks = 2","module.exports = function (bodies, settings) {\r\n  var random = require('ngraph.random').random(42);\r\n  var boundingBox =  { x1: 0, y1: 0, x2: 0, y2: 0 };\r\n\r\n  return {\r\n    box: boundingBox,\r\n\r\n    update: updateBoundingBox,\r\n\r\n    reset : function () {\r\n      boundingBox.x1 = boundingBox.y1 = 0;\r\n      boundingBox.x2 = boundingBox.y2 = 0;\r\n    },\r\n\r\n    getBestNewPosition: function (neighbors) {\r\n      var graphRect = boundingBox;\r\n\r\n      var baseX = 0, baseY = 0;\r\n\r\n      if (neighbors.length) {\r\n        for (var i = 0; i < neighbors.length; ++i) {\r\n          baseX += neighbors[i].pos.x;\r\n          baseY += neighbors[i].pos.y;\r\n        }\r\n\r\n        baseX /= neighbors.length;\r\n        baseY /= neighbors.length;\r\n      } else {\r\n        baseX = (graphRect.x1 + graphRect.x2) / 2;\r\n        baseY = (graphRect.y1 + graphRect.y2) / 2;\r\n      }\r\n\r\n      var springLength = settings.springLength;\r\n      return {\r\n        x: baseX + random.next(springLength) - springLength / 2,\r\n        y: baseY + random.next(springLength) - springLength / 2\r\n      };\r\n    }\r\n  };\r\n\r\n  function updateBoundingBox() {\r\n    var i = bodies.length;\r\n    if (i === 0) { return; } // don't have to wory here.\r\n\r\n    var x1 = Number.MAX_VALUE,\r\n        y1 = Number.MAX_VALUE,\r\n        x2 = Number.MIN_VALUE,\r\n        y2 = Number.MIN_VALUE;\r\n\r\n    while(i--) {\r\n      // this is O(n), could it be done faster with quadtree?\r\n      // how about pinned nodes?\r\n      var body = bodies[i];\r\n      if (body.isPinned) {\r\n        body.pos.x = body.prevPos.x;\r\n        body.pos.y = body.prevPos.y;\r\n      } else {\r\n        body.prevPos.x = body.pos.x;\r\n        body.prevPos.y = body.pos.y;\r\n      }\r\n      if (body.pos.x < x1) {\r\n        x1 = body.pos.x;\r\n      }\r\n      if (body.pos.x > x2) {\r\n        x2 = body.pos.x;\r\n      }\r\n      if (body.pos.y < y1) {\r\n        y1 = body.pos.y;\r\n      }\r\n      if (body.pos.y > y2) {\r\n        y2 = body.pos.y;\r\n      }\r\n    }\r\n\r\n    boundingBox.x1 = x1;\r\n    boundingBox.x2 = x2;\r\n    boundingBox.y1 = y1;\r\n    boundingBox.y2 = y2;\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.physics.simulator/lib/bounds.js\n// module id = 596\n// module chunks = 2","/**\r\n * Represents drag force, which reduces force value on each step by given\r\n * coefficient.\r\n *\r\n * @param {Object} options for the drag force\r\n * @param {Number=} options.dragCoeff drag force coefficient. 0.1 by default\r\n */\r\nmodule.exports = function (options) {\r\n  var merge = require('ngraph.merge'),\r\n      expose = require('ngraph.expose');\r\n\r\n  options = merge(options, {\r\n    dragCoeff: 0.02\r\n  });\r\n\r\n  var api = {\r\n    update : function (body) {\r\n      body.force.x -= options.dragCoeff * body.velocity.x;\r\n      body.force.y -= options.dragCoeff * body.velocity.y;\r\n    }\r\n  };\r\n\r\n  // let easy access to dragCoeff:\r\n  expose(options, api, ['dragCoeff']);\r\n\r\n  return api;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.physics.simulator/lib/dragForce.js\n// module id = 597\n// module chunks = 2","/**\r\n * Represents spring force, which updates forces acting on two bodies, conntected\r\n * by a spring.\r\n *\r\n * @param {Object} options for the spring force\r\n * @param {Number=} options.springCoeff spring force coefficient.\r\n * @param {Number=} options.springLength desired length of a spring at rest.\r\n */\r\nmodule.exports = function (options) {\r\n  var merge = require('ngraph.merge');\r\n  var random = require('ngraph.random').random(42);\r\n  var expose = require('ngraph.expose');\r\n\r\n  options = merge(options, {\r\n    springCoeff: 0.0002,\r\n    springLength: 80\r\n  });\r\n\r\n  var api = {\r\n    /**\r\n     * Upsates forces acting on a spring\r\n     */\r\n    update : function (spring) {\r\n      var body1 = spring.from,\r\n          body2 = spring.to,\r\n          length = spring.length < 0 ? options.springLength : spring.length,\r\n          dx = body2.pos.x - body1.pos.x,\r\n          dy = body2.pos.y - body1.pos.y,\r\n          r = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      if (r === 0) {\r\n          dx = (random.nextDouble() - 0.5) / 50;\r\n          dy = (random.nextDouble() - 0.5) / 50;\r\n          r = Math.sqrt(dx * dx + dy * dy);\r\n      }\r\n\r\n      var d = r - length;\r\n      var coeff = ((!spring.coeff || spring.coeff < 0) ? options.springCoeff : spring.coeff) * d / r * spring.weight;\r\n\r\n      body1.force.x += coeff * dx;\r\n      body1.force.y += coeff * dy;\r\n\r\n      body2.force.x -= coeff * dx;\r\n      body2.force.y -= coeff * dy;\r\n    }\r\n  };\r\n\r\n  expose(options, api, ['springCoeff', 'springLength']);\r\n  return api;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.physics.simulator/lib/springForce.js\n// module id = 598\n// module chunks = 2","/**\r\n * Performs forces integration, using given timestep. Uses Euler method to solve\r\n * differential equation (http://en.wikipedia.org/wiki/Euler_method ).\r\n *\r\n * @returns {Number} squared distance of total position updates.\r\n */\r\n\r\nmodule.exports = integrate;\r\n\r\nfunction integrate(bodies, timeStep) {\r\n  var dx = 0, tx = 0,\r\n      dy = 0, ty = 0,\r\n      i,\r\n      max = bodies.length;\r\n\r\n  if (max === 0) {\r\n    return 0;\r\n  }\r\n\r\n  for (i = 0; i < max; ++i) {\r\n    var body = bodies[i],\r\n        coeff = timeStep / body.mass;\r\n\r\n    body.velocity.x += coeff * body.force.x;\r\n    body.velocity.y += coeff * body.force.y;\r\n    var vx = body.velocity.x,\r\n        vy = body.velocity.y,\r\n        v = Math.sqrt(vx * vx + vy * vy);\r\n\r\n    if (v > 1) {\r\n      body.velocity.x = vx / v;\r\n      body.velocity.y = vy / v;\r\n    }\r\n\r\n    dx = timeStep * body.velocity.x;\r\n    dy = timeStep * body.velocity.y;\r\n\r\n    body.pos.x += dx;\r\n    body.pos.y += dy;\r\n\r\n    tx += Math.abs(dx); ty += Math.abs(dy);\r\n  }\r\n\r\n  return (tx * tx + ty * ty)/max;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js\n// module id = 599\n// module chunks = 2","var physics = require('ngraph.physics.primitives');\r\n\r\nmodule.exports = function(pos) {\r\n  return new physics.Body(pos);\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.physics.simulator/lib/createBody.js\n// module id = 600\n// module chunks = 2","module.exports = {\r\n  Body: Body,\r\n  Vector2d: Vector2d,\r\n  Body3d: Body3d,\r\n  Vector3d: Vector3d\r\n};\r\n\r\nfunction Body(x, y) {\r\n  this.pos = new Vector2d(x, y);\r\n  this.prevPos = new Vector2d(x, y);\r\n  this.force = new Vector2d();\r\n  this.velocity = new Vector2d();\r\n  this.mass = 1;\r\n}\r\n\r\nBody.prototype.setPosition = function (x, y) {\r\n  this.prevPos.x = this.pos.x = x;\r\n  this.prevPos.y = this.pos.y = y;\r\n};\r\n\r\nfunction Vector2d(x, y) {\r\n  if (x && typeof x !== 'number') {\r\n    // could be another vector\r\n    this.x = typeof x.x === 'number' ? x.x : 0;\r\n    this.y = typeof x.y === 'number' ? x.y : 0;\r\n  } else {\r\n    this.x = typeof x === 'number' ? x : 0;\r\n    this.y = typeof y === 'number' ? y : 0;\r\n  }\r\n}\r\n\r\nVector2d.prototype.reset = function () {\r\n  this.x = this.y = 0;\r\n};\r\n\r\nfunction Body3d(x, y, z) {\r\n  this.pos = new Vector3d(x, y, z);\r\n  this.prevPos = new Vector3d(x, y, z);\r\n  this.force = new Vector3d();\r\n  this.velocity = new Vector3d();\r\n  this.mass = 1;\r\n}\r\n\r\nBody3d.prototype.setPosition = function (x, y, z) {\r\n  this.prevPos.x = this.pos.x = x;\r\n  this.prevPos.y = this.pos.y = y;\r\n  this.prevPos.z = this.pos.z = z;\r\n};\r\n\r\nfunction Vector3d(x, y, z) {\r\n  if (x && typeof x !== 'number') {\r\n    // could be another vector\r\n    this.x = typeof x.x === 'number' ? x.x : 0;\r\n    this.y = typeof x.y === 'number' ? x.y : 0;\r\n    this.z = typeof x.z === 'number' ? x.z : 0;\r\n  } else {\r\n    this.x = typeof x === 'number' ? x : 0;\r\n    this.y = typeof y === 'number' ? y : 0;\r\n    this.z = typeof z === 'number' ? z : 0;\r\n  }\r\n};\r\n\r\nVector3d.prototype.reset = function () {\r\n  this.x = this.y = this.z = 0;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.physics.primitives/index.js\n// module id = 601\n// module chunks = 2","module.exports = constant;\r\n\r\nvar merge = require('ngraph.merge');\r\nvar random = require('ngraph.random').random;\r\nvar Rect = require('../Utils/rect.js');\r\n\r\n/**\r\n * Does not really perform any layouting algorithm but is compliant\r\n * with renderer interface. Allowing clients to provide specific positioning\r\n * callback and get static layout of the graph\r\n *\r\n * @param {Viva.Graph.graph} graph to layout\r\n * @param {Object} userSettings\r\n */\r\nfunction constant(graph, userSettings) {\r\n    userSettings = merge(userSettings, {\r\n        maxX : 1024,\r\n        maxY : 1024,\r\n        seed : 'Deterministic randomness made me do this'\r\n    });\r\n    // This class simply follows API, it does not use some of the arguments:\r\n    /*jshint unused: false */\r\n    var rand = random(userSettings.seed),\r\n        graphRect = new Rect(Number.MAX_VALUE, Number.MAX_VALUE, Number.MIN_VALUE, Number.MIN_VALUE),\r\n        layoutLinks = {},\r\n\r\n        placeNodeCallback = function (node) {\r\n            return {\r\n              x: rand.next(userSettings.maxX),\r\n              y: rand.next(userSettings.maxY)\r\n            };\r\n        },\r\n\r\n        updateGraphRect = function (position, graphRect) {\r\n            if (position.x < graphRect.x1) { graphRect.x1 = position.x; }\r\n            if (position.x > graphRect.x2) { graphRect.x2 = position.x; }\r\n            if (position.y < graphRect.y1) { graphRect.y1 = position.y; }\r\n            if (position.y > graphRect.y2) { graphRect.y2 = position.y; }\r\n        },\r\n\r\n        layoutNodes = typeof Object.create === 'function' ? Object.create(null) : {},\r\n\r\n        ensureNodeInitialized = function (node) {\r\n            layoutNodes[node.id] = placeNodeCallback(node);\r\n            updateGraphRect(layoutNodes[node.id], graphRect);\r\n        },\r\n\r\n        updateNodePositions = function () {\r\n            if (graph.getNodesCount() === 0) { return; }\r\n\r\n            graphRect.x1 = Number.MAX_VALUE;\r\n            graphRect.y1 = Number.MAX_VALUE;\r\n            graphRect.x2 = Number.MIN_VALUE;\r\n            graphRect.y2 = Number.MIN_VALUE;\r\n\r\n            graph.forEachNode(ensureNodeInitialized);\r\n        },\r\n\r\n        ensureLinkInitialized = function (link) {\r\n          layoutLinks[link.id] = link;\r\n        },\r\n\r\n        onGraphChanged = function(changes) {\r\n            for (var i = 0; i < changes.length; ++i) {\r\n                var change = changes[i];\r\n                if (change.node) {\r\n                    if (change.changeType === 'add') {\r\n                        ensureNodeInitialized(change.node);\r\n                    } else {\r\n                        delete layoutNodes[change.node.id];\r\n                    }\r\n                } if (change.link) {\r\n                    if (change.changeType === 'add') {\r\n                        ensureLinkInitialized(change.link);\r\n                    } else {\r\n                        delete layoutLinks[change.link.id];\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    graph.forEachNode(ensureNodeInitialized);\r\n    graph.forEachLink(ensureLinkInitialized);\r\n    graph.on('changed', onGraphChanged);\r\n\r\n    return {\r\n        /**\r\n         * Attempts to layout graph within given number of iterations.\r\n         *\r\n         * @param {integer} [iterationsCount] number of algorithm's iterations.\r\n         *  The constant layout ignores this parameter.\r\n         */\r\n        run : function (iterationsCount) {\r\n            this.step();\r\n        },\r\n\r\n        /**\r\n         * One step of layout algorithm.\r\n         */\r\n        step : function () {\r\n            updateNodePositions();\r\n\r\n            return true; // no need to continue.\r\n        },\r\n\r\n        /**\r\n         * Returns rectangle structure {x1, y1, x2, y2}, which represents\r\n         * current space occupied by graph.\r\n         */\r\n        getGraphRect : function () {\r\n            return graphRect;\r\n        },\r\n\r\n        /**\r\n         * Request to release all resources\r\n         */\r\n        dispose : function () {\r\n            graph.off('change', onGraphChanged);\r\n        },\r\n\r\n        /*\r\n         * Checks whether given node is pinned; all nodes in this layout are pinned.\r\n         */\r\n        isNodePinned: function (node) {\r\n            return true;\r\n        },\r\n\r\n        /*\r\n         * Requests layout algorithm to pin/unpin node to its current position\r\n         * Pinned nodes should not be affected by layout algorithm and always\r\n         * remain at their position\r\n         */\r\n        pinNode: function (node, isPinned) {\r\n           // noop\r\n        },\r\n\r\n        /*\r\n         * Gets position of a node by its id. If node was not seen by this\r\n         * layout algorithm undefined value is returned;\r\n         */\r\n        getNodePosition: getNodePosition,\r\n\r\n        /**\r\n         * Returns {from, to} position of a link.\r\n         */\r\n        getLinkPosition: function (linkId) {\r\n          var link = layoutLinks[linkId];\r\n          return {\r\n              from : getNodePosition(link.fromId),\r\n              to : getNodePosition(link.toId)\r\n          };\r\n        },\r\n\r\n        /**\r\n         * Sets position of a node to a given coordinates\r\n         */\r\n        setNodePosition: function (nodeId, x, y) {\r\n            var pos = layoutNodes[nodeId];\r\n            if (pos) {\r\n                pos.x = x;\r\n                pos.y = y;\r\n            }\r\n        },\r\n\r\n        // Layout specific methods:\r\n\r\n        /**\r\n         * Based on argument either update default node placement callback or\r\n         * attempts to place given node using current placement callback.\r\n         * Setting new node callback triggers position update for all nodes.\r\n         *\r\n         * @param {Object} newPlaceNodeCallbackOrNode - if it is a function then\r\n         * default node placement callback is replaced with new one. Node placement\r\n         * callback has a form of function (node) {}, and is expected to return an\r\n         * object with x and y properties set to numbers.\r\n         *\r\n         * Otherwise if it's not a function the argument is treated as graph node\r\n         * and current node placement callback will be used to place it.\r\n         */\r\n        placeNode : function (newPlaceNodeCallbackOrNode) {\r\n            if (typeof newPlaceNodeCallbackOrNode === 'function') {\r\n                placeNodeCallback = newPlaceNodeCallbackOrNode;\r\n                updateNodePositions();\r\n                return this;\r\n            }\r\n\r\n            // it is not a request to update placeNodeCallback, trying to place\r\n            // a node using current callback:\r\n            return placeNodeCallback(newPlaceNodeCallbackOrNode);\r\n        }\r\n\r\n    };\r\n\r\n    function getNodePosition(nodeId) {\r\n        return layoutNodes[nodeId];\r\n    }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Layout/constant.js\n// module id = 602\n// module chunks = 2","/**\r\n * @fileOverview Defines an image nodes for webglGraphics class.\r\n * Shape of nodes is square.\r\n *\r\n * @author Andrei Kashcha (aka anvaka) / http://anvaka.blogspot.com\r\n */\r\n\r\nvar WebglAtlas = require('./webglAtlas.js');\r\nvar glUtils = require('./webgl.js');\r\n\r\nmodule.exports = webglImageNodeProgram;\r\n\r\n/**\r\n * Defines simple UI for nodes in webgl renderer. Each node is rendered as an image.\r\n */\r\nfunction webglImageNodeProgram() {\r\n  // WebGL is gian state machine, we store some properties of the state here:\r\n  var ATTRIBUTES_PER_PRIMITIVE = 18;\r\n  var nodesFS = createNodeFragmentShader();\r\n  var nodesVS = createNodeVertexShader();\r\n  var tilesPerTexture = 1024; // TODO: Get based on max texture size\r\n  var atlas;\r\n  var program;\r\n  var gl;\r\n  var buffer;\r\n  var utils;\r\n  var locations;\r\n  var nodesCount = 0;\r\n  var nodes = new Float32Array(64);\r\n  var width;\r\n  var height;\r\n  var transform;\r\n  var sizeDirty;\r\n\r\n\r\n  return {\r\n    load: load,\r\n\r\n    /**\r\n     * Updates position of current node in the buffer of nodes.\r\n     *\r\n     * @param idx - index of current node.\r\n     * @param pos - new position of the node.\r\n     */\r\n    position: position,\r\n\r\n    createNode: createNode,\r\n\r\n    removeNode: removeNode,\r\n\r\n    replaceProperties: replaceProperties,\r\n\r\n    updateTransform: updateTransform,\r\n\r\n    updateSize: updateSize,\r\n\r\n    render: render\r\n  };\r\n\r\n  function refreshTexture(texture, idx) {\r\n    if (texture.nativeObject) {\r\n      gl.deleteTexture(texture.nativeObject);\r\n    }\r\n\r\n    var nativeObject = gl.createTexture();\r\n    gl.activeTexture(gl[\"TEXTURE\" + idx]);\r\n    gl.bindTexture(gl.TEXTURE_2D, nativeObject);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.canvas);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\r\n\r\n    gl.generateMipmap(gl.TEXTURE_2D);\r\n    gl.uniform1i(locations[\"sampler\" + idx], idx);\r\n\r\n    texture.nativeObject = nativeObject;\r\n  }\r\n\r\n  function ensureAtlasTextureUpdated() {\r\n    if (atlas.isDirty) {\r\n      var textures = atlas.getTextures(),\r\n        i;\r\n      for (i = 0; i < textures.length; ++i) {\r\n        if (textures[i].isDirty || !textures[i].nativeObject) {\r\n          refreshTexture(textures[i], i);\r\n        }\r\n      }\r\n\r\n      atlas.clearDirty();\r\n    }\r\n  }\r\n\r\n  function load(glContext) {\r\n    gl = glContext;\r\n    utils = glUtils(glContext);\r\n\r\n    atlas = new WebglAtlas(tilesPerTexture);\r\n\r\n    program = utils.createProgram(nodesVS, nodesFS);\r\n    gl.useProgram(program);\r\n    locations = utils.getLocations(program, [\"a_vertexPos\", \"a_customAttributes\", \"u_screenSize\", \"u_transform\", \"u_sampler0\", \"u_sampler1\", \"u_sampler2\", \"u_sampler3\", \"u_tilesPerTexture\"]);\r\n\r\n    gl.uniform1f(locations.tilesPerTexture, tilesPerTexture);\r\n\r\n    gl.enableVertexAttribArray(locations.vertexPos);\r\n    gl.enableVertexAttribArray(locations.customAttributes);\r\n\r\n    buffer = gl.createBuffer();\r\n  }\r\n\r\n  function position(nodeUI, pos) {\r\n    var idx = nodeUI.id * ATTRIBUTES_PER_PRIMITIVE;\r\n    nodes[idx] = pos.x - nodeUI.size;\r\n    nodes[idx + 1] = pos.y - nodeUI.size;\r\n    nodes[idx + 2] = nodeUI._offset * 4;\r\n\r\n    nodes[idx + 3] = pos.x + nodeUI.size;\r\n    nodes[idx + 4] = pos.y - nodeUI.size;\r\n    nodes[idx + 5] = nodeUI._offset * 4 + 1;\r\n\r\n    nodes[idx + 6] = pos.x - nodeUI.size;\r\n    nodes[idx + 7] = pos.y + nodeUI.size;\r\n    nodes[idx + 8] = nodeUI._offset * 4 + 2;\r\n\r\n    nodes[idx + 9] = pos.x - nodeUI.size;\r\n    nodes[idx + 10] = pos.y + nodeUI.size;\r\n    nodes[idx + 11] = nodeUI._offset * 4 + 2;\r\n\r\n    nodes[idx + 12] = pos.x + nodeUI.size;\r\n    nodes[idx + 13] = pos.y - nodeUI.size;\r\n    nodes[idx + 14] = nodeUI._offset * 4 + 1;\r\n\r\n    nodes[idx + 15] = pos.x + nodeUI.size;\r\n    nodes[idx + 16] = pos.y + nodeUI.size;\r\n    nodes[idx + 17] = nodeUI._offset * 4 + 3;\r\n  }\r\n\r\n  function createNode(ui) {\r\n    nodes = utils.extendArray(nodes, nodesCount, ATTRIBUTES_PER_PRIMITIVE);\r\n    nodesCount += 1;\r\n\r\n    var coordinates = atlas.getCoordinates(ui.src);\r\n    if (coordinates) {\r\n      ui._offset = coordinates.offset;\r\n    } else {\r\n      ui._offset = 0;\r\n      // Image is not yet loaded into the atlas. Reload it:\r\n      atlas.load(ui.src, function(coordinates) {\r\n        ui._offset = coordinates.offset;\r\n      });\r\n    }\r\n  }\r\n\r\n  function removeNode(nodeUI) {\r\n    if (nodesCount > 0) {\r\n      nodesCount -= 1;\r\n    }\r\n\r\n    if (nodeUI.id < nodesCount && nodesCount > 0) {\r\n      if (nodeUI.src) {\r\n        atlas.remove(nodeUI.src);\r\n      }\r\n\r\n      utils.copyArrayPart(nodes, nodeUI.id * ATTRIBUTES_PER_PRIMITIVE, nodesCount * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);\r\n    }\r\n  }\r\n\r\n  function replaceProperties(replacedNode, newNode) {\r\n    newNode._offset = replacedNode._offset;\r\n  }\r\n\r\n  function updateTransform(newTransform) {\r\n    sizeDirty = true;\r\n    transform = newTransform;\r\n  }\r\n\r\n  function updateSize(w, h) {\r\n    width = w;\r\n    height = h;\r\n    sizeDirty = true;\r\n  }\r\n\r\n  function render() {\r\n    gl.useProgram(program);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, nodes, gl.DYNAMIC_DRAW);\r\n\r\n    if (sizeDirty) {\r\n      sizeDirty = false;\r\n      gl.uniformMatrix4fv(locations.transform, false, transform);\r\n      gl.uniform2f(locations.screenSize, width, height);\r\n    }\r\n\r\n    gl.vertexAttribPointer(locations.vertexPos, 2, gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 0);\r\n    gl.vertexAttribPointer(locations.customAttributes, 1, gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 2 * 4);\r\n\r\n    ensureAtlasTextureUpdated();\r\n\r\n    gl.drawArrays(gl.TRIANGLES, 0, nodesCount * 6);\r\n  }\r\n}\r\n\r\n// TODO: Use glslify for shaders\r\nfunction createNodeFragmentShader() {\r\n  return [\r\n    \"precision mediump float;\",\r\n    \"varying vec4 color;\",\r\n    \"varying vec3 vTextureCoord;\",\r\n    \"uniform sampler2D u_sampler0;\",\r\n    \"uniform sampler2D u_sampler1;\",\r\n    \"uniform sampler2D u_sampler2;\",\r\n    \"uniform sampler2D u_sampler3;\",\r\n\r\n    \"void main(void) {\",\r\n    \"   if (vTextureCoord.z == 0.) {\",\r\n    \"     gl_FragColor = texture2D(u_sampler0, vTextureCoord.xy);\",\r\n    \"   } else if (vTextureCoord.z == 1.) {\",\r\n    \"     gl_FragColor = texture2D(u_sampler1, vTextureCoord.xy);\",\r\n    \"   } else if (vTextureCoord.z == 2.) {\",\r\n    \"     gl_FragColor = texture2D(u_sampler2, vTextureCoord.xy);\",\r\n    \"   } else if (vTextureCoord.z == 3.) {\",\r\n    \"     gl_FragColor = texture2D(u_sampler3, vTextureCoord.xy);\",\r\n    \"   } else { gl_FragColor = vec4(0, 1, 0, 1); }\",\r\n    \"}\"\r\n  ].join(\"\\n\");\r\n}\r\n\r\nfunction createNodeVertexShader() {\r\n  return [\r\n    \"attribute vec2 a_vertexPos;\",\r\n\r\n    \"attribute float a_customAttributes;\",\r\n    \"uniform vec2 u_screenSize;\",\r\n    \"uniform mat4 u_transform;\",\r\n    \"uniform float u_tilesPerTexture;\",\r\n    \"varying vec3 vTextureCoord;\",\r\n\r\n    \"void main(void) {\",\r\n    \"   gl_Position = u_transform * vec4(a_vertexPos/u_screenSize, 0, 1);\",\r\n    \"float corner = mod(a_customAttributes, 4.);\",\r\n    \"float tileIndex = mod(floor(a_customAttributes / 4.), u_tilesPerTexture);\",\r\n    \"float tilesPerRow = sqrt(u_tilesPerTexture);\",\r\n    \"float tileSize = 1./tilesPerRow;\",\r\n    \"float tileColumn = mod(tileIndex, tilesPerRow);\",\r\n    \"float tileRow = floor(tileIndex/tilesPerRow);\",\r\n\r\n    \"if(corner == 0.0) {\",\r\n    \"  vTextureCoord.xy = vec2(0, 1);\",\r\n    \"} else if(corner == 1.0) {\",\r\n    \"  vTextureCoord.xy = vec2(1, 1);\",\r\n    \"} else if(corner == 2.0) {\",\r\n    \"  vTextureCoord.xy = vec2(0, 0);\",\r\n    \"} else {\",\r\n    \"  vTextureCoord.xy = vec2(1, 0);\",\r\n    \"}\",\r\n\r\n    \"vTextureCoord *= tileSize;\",\r\n    \"vTextureCoord.x += tileColumn * tileSize;\",\r\n    \"vTextureCoord.y += tileRow * tileSize;\",\r\n    \"vTextureCoord.z = floor(floor(a_customAttributes / 4.)/u_tilesPerTexture);\",\r\n    \"}\"\r\n  ].join(\"\\n\");\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/WebGL/webglImageNodeProgram.js\n// module id = 603\n// module chunks = 2","module.exports = webglImage;\r\n\r\n/**\r\n * Represents a model for image.\r\n */\r\nfunction webglImage(size, src) {\r\n    return {\r\n        /**\r\n         * Gets texture index where current image is placed.\r\n         */\r\n        _texture : 0,\r\n\r\n        /**\r\n         * Gets offset in the texture where current image is placed.\r\n         */\r\n        _offset : 0,\r\n\r\n        /**\r\n         * Gets size of the square with the image.\r\n         */\r\n        size : typeof size === 'number' ? size : 32,\r\n\r\n        /**\r\n         * Source of the image. If image is coming not from your domain\r\n         * certain origin restrictions applies.\r\n         * See http://www.khronos.org/registry/webgl/specs/latest/#4.2 for more details.\r\n         */\r\n        src  : src\r\n    };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/WebGL/webglImage.js\n// module id = 604\n// module chunks = 2","/**\r\n * @fileOverview Defines a graph renderer that uses WebGL based drawings.\r\n *\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\r\n\r\nmodule.exports = webglGraphics;\r\n\r\nvar webglInputManager = require('../Input/webglInputManager.js');\r\nvar webglLinkProgram = require('../WebGL/webglLinkProgram.js');\r\nvar webglNodeProgram = require('../WebGL/webglNodeProgram.js');\r\nvar webglSquare = require('../WebGL/webglSquare.js');\r\nvar webglLine = require('../WebGL/webglLine.js');\r\nvar eventify = require('ngraph.events');\r\nvar merge = require('ngraph.merge');\r\n\r\n/**\r\n * Performs webgl-based graph rendering. This module does not perform\r\n * layout, but only visualizes nodes and edges of the graph.\r\n *\r\n * @param options - to customize graphics  behavior. Currently supported parameter\r\n *  enableBlending - true by default, allows to use transparency in node/links colors.\r\n *  preserveDrawingBuffer - false by default, tells webgl to preserve drawing buffer.\r\n *                    See https://www.khronos.org/registry/webgl/specs/1.0/#5.2\r\n */\r\n\r\nfunction webglGraphics(options) {\r\n    options = merge(options, {\r\n        enableBlending : true,\r\n        preserveDrawingBuffer : false,\r\n        clearColor: false,\r\n        clearColorValue : {\r\n            r : 1,\r\n            g : 1,\r\n            b : 1,\r\n            a : 1\r\n        }\r\n    });\r\n\r\n    var container,\r\n        graphicsRoot,\r\n        gl,\r\n        width,\r\n        height,\r\n        nodesCount = 0,\r\n        linksCount = 0,\r\n        transform = [\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n        ],\r\n        userPlaceNodeCallback,\r\n        userPlaceLinkCallback,\r\n        nodes = [],\r\n        links = [],\r\n        initCallback,\r\n\r\n        allNodes = {},\r\n        allLinks = {},\r\n        linkProgram = webglLinkProgram(),\r\n        nodeProgram = webglNodeProgram(),\r\n/*jshint unused: false */\r\n        nodeUIBuilder = function (node) {\r\n            return webglSquare(); // Just make a square, using provided gl context (a nodeProgram);\r\n        },\r\n\r\n        linkUIBuilder = function (link) {\r\n            return webglLine(0xb3b3b3ff);\r\n        },\r\n/*jshint unused: true */\r\n        updateTransformUniform = function () {\r\n            linkProgram.updateTransform(transform);\r\n            nodeProgram.updateTransform(transform);\r\n        },\r\n\r\n        resetScaleInternal = function () {\r\n            transform = [1, 0, 0, 0,\r\n                        0, 1, 0, 0,\r\n                        0, 0, 1, 0,\r\n                        0, 0, 0, 1];\r\n        },\r\n\r\n        updateSize = function () {\r\n            if (container && graphicsRoot) {\r\n                width = graphicsRoot.width = Math.max(container.offsetWidth, 1);\r\n                height = graphicsRoot.height = Math.max(container.offsetHeight, 1);\r\n                if (gl) { gl.viewport(0, 0, width, height); }\r\n                if (linkProgram) { linkProgram.updateSize(width / 2, height / 2); }\r\n                if (nodeProgram) { nodeProgram.updateSize(width / 2, height / 2); }\r\n            }\r\n        },\r\n\r\n        fireRescaled = function (graphics) {\r\n            graphics.fire(\"rescaled\");\r\n        };\r\n\r\n    graphicsRoot = window.document.createElement(\"canvas\");\r\n\r\n    var graphics = {\r\n        getLinkUI: function (linkId) {\r\n            return allLinks[linkId];\r\n        },\r\n\r\n        getNodeUI: function (nodeId) {\r\n            return allNodes[nodeId];\r\n        },\r\n\r\n        /**\r\n         * Sets the callback that creates node representation.\r\n         *\r\n         * @param builderCallback a callback function that accepts graph node\r\n         * as a parameter and must return an element representing this node.\r\n         *\r\n         * @returns If builderCallbackOrNode is a valid callback function, instance of this is returned;\r\n         * Otherwise undefined value is returned\r\n         */\r\n        node : function (builderCallback) {\r\n            if (typeof builderCallback !== \"function\") {\r\n                return; // todo: throw? This is not compatible with old versions\r\n            }\r\n\r\n            nodeUIBuilder = builderCallback;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets the callback that creates link representation\r\n         *\r\n         * @param builderCallback a callback function that accepts graph link\r\n         * as a parameter and must return an element representing this link.\r\n         *\r\n         * @returns If builderCallback is a valid callback function, instance of this is returned;\r\n         * Otherwise undefined value is returned.\r\n         */\r\n        link : function (builderCallback) {\r\n            if (typeof builderCallback !== \"function\") {\r\n                return; // todo: throw? This is not compatible with old versions\r\n            }\r\n\r\n            linkUIBuilder = builderCallback;\r\n            return this;\r\n        },\r\n\r\n\r\n        /**\r\n         * Allows to override default position setter for the node with a new\r\n         * function. newPlaceCallback(nodeUI, position) is function which\r\n         * is used by updateNodePosition().\r\n         */\r\n        placeNode : function (newPlaceCallback) {\r\n            userPlaceNodeCallback = newPlaceCallback;\r\n            return this;\r\n        },\r\n\r\n        placeLink : function (newPlaceLinkCallback) {\r\n            userPlaceLinkCallback = newPlaceLinkCallback;\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Custom input manager listens to mouse events to process nodes drag-n-drop inside WebGL canvas\r\n         */\r\n        inputManager : webglInputManager,\r\n\r\n        /**\r\n         * Called every time before renderer starts rendering.\r\n         */\r\n        beginRender : function () {\r\n            // this function could be replaced by this.init,\r\n            // based on user options.\r\n        },\r\n\r\n        /**\r\n         * Called every time when renderer finishes one step of rendering.\r\n         */\r\n        endRender : function () {\r\n            if (linksCount > 0) {\r\n                linkProgram.render();\r\n            }\r\n            if (nodesCount > 0) {\r\n                nodeProgram.render();\r\n            }\r\n        },\r\n\r\n        bringLinkToFront : function (linkUI) {\r\n            var frontLinkId = linkProgram.getFrontLinkId(),\r\n                srcLinkId,\r\n                temp;\r\n\r\n            linkProgram.bringToFront(linkUI);\r\n\r\n            if (frontLinkId > linkUI.id) {\r\n                srcLinkId = linkUI.id;\r\n\r\n                temp = links[frontLinkId];\r\n                links[frontLinkId] = links[srcLinkId];\r\n                links[frontLinkId].id = frontLinkId;\r\n                links[srcLinkId] = temp;\r\n                links[srcLinkId].id = srcLinkId;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sets translate operation that should be applied to all nodes and links.\r\n         */\r\n        graphCenterChanged : function (x, y) {\r\n            transform[12] = (2 * x / width) - 1;\r\n            transform[13] = 1 - (2 * y / height);\r\n            updateTransformUniform();\r\n        },\r\n\r\n        /**\r\n         * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n         * provider prepare to render given link of the graph\r\n         *\r\n         * @param link - model of a link\r\n         */\r\n        addLink: function (link, boundPosition) {\r\n            var uiid = linksCount++,\r\n                ui = linkUIBuilder(link);\r\n            ui.id = uiid;\r\n            ui.pos = boundPosition;\r\n\r\n            linkProgram.createLink(ui);\r\n\r\n            links[uiid] = ui;\r\n            allLinks[link.id] = ui;\r\n            return ui;\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider prepare to render given node of the graph.\r\n        *\r\n        * @param nodeUI visual representation of the node created by node() execution.\r\n        **/\r\n        addNode : function (node, boundPosition) {\r\n            var uiid = nodesCount++,\r\n                ui = nodeUIBuilder(node);\r\n\r\n            ui.id = uiid;\r\n            ui.position = boundPosition;\r\n            ui.node = node;\r\n\r\n            nodeProgram.createNode(ui);\r\n\r\n            nodes[uiid] = ui;\r\n            allNodes[node.id] = ui;\r\n            return ui;\r\n        },\r\n\r\n        translateRel : function (dx, dy) {\r\n            transform[12] += (2 * transform[0] * dx / width) / transform[0];\r\n            transform[13] -= (2 * transform[5] * dy / height) / transform[5];\r\n            updateTransformUniform();\r\n        },\r\n\r\n        scale : function (scaleFactor, scrollPoint) {\r\n            // Transform scroll point to clip-space coordinates:\r\n            var cx = 2 * scrollPoint.x / width - 1,\r\n                cy = 1 - (2 * scrollPoint.y) / height;\r\n\r\n            cx -= transform[12];\r\n            cy -= transform[13];\r\n\r\n            transform[12] += cx * (1 - scaleFactor);\r\n            transform[13] += cy * (1 - scaleFactor);\r\n\r\n            transform[0] *= scaleFactor;\r\n            transform[5] *= scaleFactor;\r\n\r\n            updateTransformUniform();\r\n            fireRescaled(this);\r\n\r\n            return transform[0];\r\n        },\r\n\r\n        resetScale : function () {\r\n            resetScaleInternal();\r\n\r\n            if (gl) {\r\n                updateSize();\r\n                // TODO: what is this?\r\n                // gl.useProgram(linksProgram);\r\n                // gl.uniform2f(linksProgram.screenSize, width, height);\r\n                updateTransformUniform();\r\n            }\r\n            return this;\r\n        },\r\n\r\n       /**\r\n        * Resizes the graphic without resetting the scale. \r\n        * Useful with viva graph in a dynamic container\r\n        */\r\n        updateSize: updateSize,\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider prepare to render.\r\n        */\r\n        init : function (c) {\r\n            var contextParameters = {};\r\n\r\n            if (options.preserveDrawingBuffer) {\r\n                contextParameters.preserveDrawingBuffer = true;\r\n            }\r\n\r\n            container = c;\r\n\r\n            updateSize();\r\n            resetScaleInternal();\r\n            container.appendChild(graphicsRoot);\r\n\r\n\r\n            gl = graphicsRoot.getContext(\"experimental-webgl\", contextParameters);\r\n            if (!gl) {\r\n                var msg = \"Could not initialize WebGL. Seems like the browser doesn't support it.\";\r\n                window.alert(msg);\r\n                throw msg;\r\n            }\r\n            if (options.enableBlending) {\r\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n                gl.enable(gl.BLEND);\r\n            }\r\n            if (options.clearColor) {\r\n                var color = options.clearColorValue;\r\n                gl.clearColor(color.r, color.g, color.b, color.a);\r\n                // TODO: not the best way, really. Should come up with something better\r\n                // what if we need more updates inside beginRender, like depth buffer?\r\n                this.beginRender = function () {\r\n                    gl.clear(gl.COLOR_BUFFER_BIT);\r\n                };\r\n            }\r\n\r\n            linkProgram.load(gl);\r\n            linkProgram.updateSize(width / 2, height / 2);\r\n\r\n            nodeProgram.load(gl);\r\n            nodeProgram.updateSize(width / 2, height / 2);\r\n\r\n            updateTransformUniform();\r\n\r\n            // Notify the world if someone waited for update. TODO: should send an event\r\n            if (typeof initCallback === \"function\") {\r\n                initCallback(graphicsRoot);\r\n            }\r\n        },\r\n\r\n        /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider release occupied resources.\r\n        */\r\n        release : function (container) {\r\n            if (graphicsRoot && container) {\r\n                container.removeChild(graphicsRoot);\r\n                // TODO: anything else?\r\n            }\r\n        },\r\n\r\n       /**\r\n        * Checks whether webgl is supported by this browser.\r\n        */\r\n        isSupported : function () {\r\n            var c = window.document.createElement(\"canvas\"),\r\n                gl = c && c.getContext && c.getContext(\"experimental-webgl\");\r\n            return gl;\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider remove link from rendering surface.\r\n        *\r\n        * @param linkUI visual representation of the link created by link() execution.\r\n        **/\r\n        releaseLink : function (link) {\r\n            if (linksCount > 0) { linksCount -= 1; }\r\n            var linkUI = allLinks[link.id];\r\n            delete allLinks[link.id];\r\n\r\n            linkProgram.removeLink(linkUI);\r\n\r\n            var linkIdToRemove = linkUI.id;\r\n            if (linkIdToRemove < linksCount) {\r\n                if (linksCount === 0 || linksCount === linkIdToRemove) {\r\n                    return; // no more links or removed link is the last one.\r\n                }\r\n\r\n                var lastLinkUI = links[linksCount];\r\n                links[linkIdToRemove] = lastLinkUI;\r\n                lastLinkUI.id = linkIdToRemove;\r\n            }\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider remove node from rendering surface.\r\n        *\r\n        * @param nodeUI visual representation of the node created by node() execution.\r\n        **/\r\n        releaseNode : function (node) {\r\n            if (nodesCount > 0) { nodesCount -= 1; }\r\n            var nodeUI = allNodes[node.id];\r\n            delete allNodes[node.id];\r\n\r\n            nodeProgram.removeNode(nodeUI);\r\n\r\n            var nodeIdToRemove = nodeUI.id;\r\n            if (nodeIdToRemove < nodesCount) {\r\n                if (nodesCount === 0 || nodesCount === nodeIdToRemove) {\r\n                    return; // no more nodes or removed node is the last in the list.\r\n                }\r\n\r\n                var lastNodeUI = nodes[nodesCount];\r\n\r\n                nodes[nodeIdToRemove] = lastNodeUI;\r\n                lastNodeUI.id = nodeIdToRemove;\r\n\r\n                // Since concrete shaders may cache properties in the UI element\r\n                // we are letting them to make this swap (e.g. image node shader\r\n                // uses this approach to update node's offset in the atlas)\r\n                nodeProgram.replaceProperties(nodeUI, lastNodeUI);\r\n            }\r\n        },\r\n\r\n        renderNodes: function () {\r\n            var pos = {x : 0, y : 0};\r\n            // WebGL coordinate system is different. Would be better\r\n            // to have this transform in the shader code, but it would\r\n            // require every shader to be updated..\r\n            for (var i = 0; i < nodesCount; ++i) {\r\n                var ui = nodes[i];\r\n                pos.x = ui.position.x;\r\n                pos.y = ui.position.y;\r\n                if (userPlaceNodeCallback) {\r\n                    userPlaceNodeCallback(ui, pos);\r\n                }\r\n\r\n                nodeProgram.position(ui, pos);\r\n            }\r\n        },\r\n\r\n        renderLinks: function () {\r\n            if (this.omitLinksRendering) { return; }\r\n\r\n            var toPos = {x : 0, y : 0};\r\n            var fromPos = {x : 0, y : 0};\r\n            for (var i = 0; i < linksCount; ++i) {\r\n                var ui = links[i];\r\n                var pos = ui.pos.from;\r\n                fromPos.x = pos.x;\r\n                fromPos.y = -pos.y;\r\n                pos = ui.pos.to;\r\n                toPos.x = pos.x;\r\n                toPos.y = -pos.y;\r\n                if (userPlaceLinkCallback) {\r\n                    userPlaceLinkCallback(ui, fromPos, toPos);\r\n                }\r\n\r\n                linkProgram.position(ui, fromPos, toPos);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns root element which hosts graphics.\r\n         */\r\n        getGraphicsRoot : function (callbackWhenReady) {\r\n            // todo: should fire an event, instead of having this context.\r\n            if (typeof callbackWhenReady === \"function\") {\r\n                if (graphicsRoot) {\r\n                    callbackWhenReady(graphicsRoot);\r\n                } else {\r\n                    initCallback = callbackWhenReady;\r\n                }\r\n            }\r\n            return graphicsRoot;\r\n        },\r\n\r\n        /**\r\n         * Updates default shader which renders nodes\r\n         *\r\n         * @param newProgram to use for nodes.\r\n         */\r\n        setNodeProgram : function (newProgram) {\r\n            if (!gl && newProgram) {\r\n                // Nothing created yet. Just set shader to the new one\r\n                // and let initialization logic take care about the rest.\r\n                nodeProgram = newProgram;\r\n            } else if (newProgram) {\r\n                throw \"Not implemented. Cannot swap shader on the fly... Yet.\";\r\n                // TODO: unload old shader and reinit.\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Updates default shader which renders links\r\n         *\r\n         * @param newProgram to use for links.\r\n         */\r\n        setLinkProgram : function (newProgram) {\r\n            if (!gl && newProgram) {\r\n                // Nothing created yet. Just set shader to the new one\r\n                // and let initialization logic take care about the rest.\r\n                linkProgram = newProgram;\r\n            } else if (newProgram) {\r\n                throw \"Not implemented. Cannot swap shader on the fly... Yet.\";\r\n                // TODO: unload old shader and reinit.\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Transforms client coordinates into layout coordinates. Client coordinates\r\n         * are DOM coordinates relative to the rendering container. Layout\r\n         * coordinates are those assigned by by layout algorithm to each node.\r\n         *\r\n         * @param {Object} p - a point object with `x` and `y` attributes.\r\n         * This method mutates p.\r\n         */\r\n        transformClientToGraphCoordinates: function (p) {\r\n          // TODO: could be a problem when container has margins?\r\n            // normalize\r\n            p.x = ((2 * p.x) / width) - 1;\r\n            p.y = 1 - ((2 * p.y) / height);\r\n\r\n            // apply transform\r\n            p.x = (p.x - transform[12]) / transform[0];\r\n            p.y = (p.y - transform[13]) / transform[5];\r\n\r\n            // transform to graph coordinates\r\n            p.x = p.x * (width / 2);\r\n            p.y = p.y * (-height / 2);\r\n\r\n            return p;\r\n        },\r\n\r\n        /**\r\n         * Transforms WebGL coordinates into client coordinates. Reverse of \r\n         * `transformClientToGraphCoordinates()`\r\n         *\r\n         * @param {Object} p - a point object with `x` and `y` attributes, which\r\n         * represents a layout coordinate. This method mutates p.\r\n         */\r\n        transformGraphToClientCoordinates: function (p) {\r\n          // TODO: could be a problem when container has margins?\r\n            // transform from graph coordinates\r\n            p.x = p.x / (width / 2);\r\n            p.y = p.y / (-height / 2);\r\n\r\n            // apply transform\r\n            p.x = (p.x * transform[0]) + transform[12];\r\n            p.y = (p.y * transform[5]) + transform[13];\r\n\r\n            // denormalize\r\n            p.x = ((p.x + 1) * width) / 2;\r\n            p.y = ((1 - p.y) * height) / 2;\r\n\r\n            return p;\r\n        },\r\n\r\n        getNodeAtClientPos: function (clientPos, preciseCheck) {\r\n            if (typeof preciseCheck !== \"function\") {\r\n                // we don't know anything about your node structure here :(\r\n                // potentially this could be delegated to node program, but for\r\n                // right now, we are giving up if you don't pass boundary check\r\n                // callback. It answers to a question is nodeUI covers  (x, y)\r\n                return null;\r\n            }\r\n            // first transform to graph coordinates:\r\n            this.transformClientToGraphCoordinates(clientPos);\r\n            // now using precise check iterate over each node and find one within box:\r\n            // TODO: This is poor O(N) performance.\r\n            for (var i = 0; i < nodesCount; ++i) {\r\n                if (preciseCheck(nodes[i], clientPos.x, clientPos.y)) {\r\n                    return nodes[i].node;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    };\r\n\r\n    // Let graphics fire events before we return it to the caller.\r\n    eventify(graphics);\r\n\r\n    return graphics;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/View/webglGraphics.js\n// module id = 605\n// module chunks = 2","var parser = require('./domparser.js');\r\nvar svg = require('../');\r\n\r\nmodule.exports = compile;\r\n\r\nfunction compile(svgText) {\r\n  try {\r\n    svgText = addNamespaces(svgText);\r\n    return svg(parser.parseFromString(svgText, \"text/xml\").documentElement);\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n}\r\n\r\nfunction addNamespaces(text) {\r\n  if (!text) return;\r\n\r\n  var namespaces = 'xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\"';\r\n  var match = text.match(/^<\\w+/);\r\n  if (match) {\r\n    var tagLength = match[0].length;\r\n    return text.substr(0, tagLength) + ' ' + namespaces + ' ' + text.substr(tagLength);\r\n  } else {\r\n    throw new Error('Cannot parse input text: invalid xml?');\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/simplesvg/lib/compile.js\n// module id = 606\n// module chunks = 2","module.exports = createDomparser();\r\n\r\nfunction createDomparser() {\r\n  if (typeof DOMParser === 'undefined') {\r\n    return {\r\n      parseFromString: fail\r\n    };\r\n  }\r\n  return new DOMParser();\r\n}\r\n\r\nfunction fail() {\r\n  throw new Error('DOMParser is not supported by this platform. Please open issue here https://github.com/anvaka/simplesvg');\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/simplesvg/lib/domparser.js\n// module id = 607\n// module chunks = 2","module.exports = template;\r\n\r\nvar BINDING_EXPR = /{{(.+?)}}/;\r\n\r\nfunction template(domNode) {\r\n  var allBindings = Object.create(null);\r\n  extractAllBindings(domNode, allBindings);\r\n\r\n  return {\r\n    link: function(model) {\r\n      Object.keys(allBindings).forEach(function(key) {\r\n        var setter = allBindings[key];\r\n        setter.forEach(changeModel);\r\n      });\r\n\r\n      function changeModel(setter) {\r\n        setter(model);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction extractAllBindings(domNode, allBindings) {\r\n  var nodeType = domNode.nodeType;\r\n  var typeSupported = (nodeType === 1) || (nodeType === 3);\r\n  if (!typeSupported) return;\r\n  var i;\r\n  if (domNode.hasChildNodes()) {\r\n    var domChildren = domNode.childNodes;\r\n    for (i = 0; i < domChildren.length; ++i) {\r\n      extractAllBindings(domChildren[i], allBindings);\r\n    }\r\n  }\r\n\r\n  if (nodeType === 3) { // text:\r\n    bindTextContent(domNode, allBindings);\r\n  }\r\n\r\n  if (!domNode.attributes) return; // this might be a text. Need to figure out what to do in that case\r\n\r\n  var attrs = domNode.attributes;\r\n  for (i = 0; i < attrs.length; ++i) {\r\n    bindDomAttribute(attrs[i], domNode, allBindings);\r\n  }\r\n}\r\n\r\nfunction bindDomAttribute(domAttribute, element, allBindings) {\r\n  var value = domAttribute.value;\r\n  if (!value) return; // unary attribute?\r\n\r\n  var modelNameMatch = value.match(BINDING_EXPR);\r\n  if (!modelNameMatch) return; // does not look like a binding\r\n\r\n  var attrName = domAttribute.localName;\r\n  var modelPropertyName = modelNameMatch[1];\r\n  var isSimpleValue = modelPropertyName.indexOf('.') < 0;\r\n\r\n  if (!isSimpleValue) throw new Error('simplesvg currently does not support nested bindings');\r\n\r\n  var propertyBindings = allBindings[modelPropertyName];\r\n  if (!propertyBindings) {\r\n    propertyBindings = allBindings[modelPropertyName] = [attributeSetter];\r\n  } else {\r\n    propertyBindings.push(attributeSetter);\r\n  }\r\n\r\n  function attributeSetter(model) {\r\n    element.setAttributeNS(null, attrName, model[modelPropertyName]);\r\n  }\r\n}\r\nfunction bindTextContent(element, allBindings) {\r\n  // todo reduce duplication\r\n  var value = element.nodeValue;\r\n  if (!value) return; // unary attribute?\r\n\r\n  var modelNameMatch = value.match(BINDING_EXPR);\r\n  if (!modelNameMatch) return; // does not look like a binding\r\n\r\n  var modelPropertyName = modelNameMatch[1];\r\n  var isSimpleValue = modelPropertyName.indexOf('.') < 0;\r\n\r\n  var propertyBindings = allBindings[modelPropertyName];\r\n  if (!propertyBindings) {\r\n    propertyBindings = allBindings[modelPropertyName] = [textSetter];\r\n  } else {\r\n    propertyBindings.push(textSetter);\r\n  }\r\n\r\n  function textSetter(model) {\r\n    element.nodeValue = model[modelPropertyName];\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/simplesvg/lib/compile_template.js\n// module id = 608\n// module chunks = 2","addEventListener.removeEventListener = removeEventListener\r\naddEventListener.addEventListener = addEventListener\r\n\r\nmodule.exports = addEventListener\r\n\r\nvar Events = null\r\n\r\nfunction addEventListener(el, eventName, listener, useCapture) {\r\n  Events = Events || (\r\n    document.addEventListener ?\r\n    {add: stdAttach, rm: stdDetach} :\r\n    {add: oldIEAttach, rm: oldIEDetach}\r\n  )\r\n  \r\n  return Events.add(el, eventName, listener, useCapture)\r\n}\r\n\r\nfunction removeEventListener(el, eventName, listener, useCapture) {\r\n  Events = Events || (\r\n    document.addEventListener ?\r\n    {add: stdAttach, rm: stdDetach} :\r\n    {add: oldIEAttach, rm: oldIEDetach}\r\n  )\r\n  \r\n  return Events.rm(el, eventName, listener, useCapture)\r\n}\r\n\r\nfunction stdAttach(el, eventName, listener, useCapture) {\r\n  el.addEventListener(eventName, listener, useCapture)\r\n}\r\n\r\nfunction stdDetach(el, eventName, listener, useCapture) {\r\n  el.removeEventListener(eventName, listener, useCapture)\r\n}\r\n\r\nfunction oldIEAttach(el, eventName, listener, useCapture) {\r\n  if(useCapture) {\r\n    throw new Error('cannot useCapture in oldIE')\r\n  }\r\n\r\n  el.attachEvent('on' + eventName, listener)\r\n}\r\n\r\nfunction oldIEDetach(el, eventName, listener, useCapture) {\r\n  el.detachEvent('on' + eventName, listener)\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/add-event-listener/index.js\n// module id = 609\n// module chunks = 2","/**\r\n * @fileOverview Defines a graph renderer that uses CSS based drawings.\r\n *\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\r\n\r\nmodule.exports = renderer;\r\n\r\nvar eventify = require('ngraph.events');\r\nvar forceDirected = require('ngraph.forcelayout');\r\nvar svgGraphics = require('./svgGraphics.js');\r\nvar windowEvents = require('../Utils/windowEvents.js');\r\nvar domInputManager = require('../Input/domInputManager.js');\r\nvar timer = require('../Utils/timer.js');\r\nvar getDimension = require('../Utils/getDimensions.js');\r\nvar dragndrop = require('../Input/dragndrop.js');\r\n\r\n/**\r\n * This is heart of the rendering. Class accepts graph to be rendered and rendering settings.\r\n * It monitors graph changes and depicts them accordingly.\r\n *\r\n * @param graph - Viva.Graph.graph() object to be rendered.\r\n * @param settings - rendering settings, composed from the following parts (with their defaults shown):\r\n *   settings = {\r\n *     // Represents a module that is capable of displaying graph nodes and links.\r\n *     // all graphics has to correspond to defined interface and can be later easily\r\n *     // replaced for specific needs (e.g. adding WebGL should be piece of cake as long\r\n *     // as WebGL has implemented required interface). See svgGraphics for example.\r\n *     graphics : Viva.Graph.View.svgGraphics(),\r\n *\r\n *     // Where the renderer should draw graph. Container size matters, because\r\n *     // renderer will attempt center graph to that size. Also graphics modules\r\n *     // might depend on it.\r\n *     container : document.body,\r\n *\r\n *     // Defines whether graph can respond to use input\r\n *     interactive: true,\r\n *\r\n *     // Layout algorithm to be used. The algorithm is expected to comply with defined\r\n *     // interface and is expected to be iterative. Renderer will use it then to calculate\r\n *     // grpaph's layout. For examples of the interface refer to Viva.Graph.Layout.forceDirected()\r\n *     layout : Viva.Graph.Layout.forceDirected(),\r\n *\r\n *     // Directs renderer to display links. Usually rendering links is the slowest part of this\r\n *     // library. So if you don't need to display links, consider settings this property to false.\r\n *     renderLinks : true,\r\n *\r\n *     // Number of layout iterations to run before displaying the graph. The bigger you set this number\r\n *     // the closer to ideal position graph will appear first time. But be careful: for large graphs\r\n *     // it can freeze the browser.\r\n *     prerender : 0\r\n *   }\r\n */\r\nfunction renderer(graph, settings) {\r\n  // TODO: This class is getting hard to understand. Consider refactoring.\r\n  // TODO: I have a technical debt here: fix scaling/recentering! Currently it's a total mess.\r\n  var FRAME_INTERVAL = 30;\r\n\r\n  settings = settings || {};\r\n\r\n  var layout = settings.layout,\r\n    graphics = settings.graphics,\r\n    container = settings.container,\r\n    interactive = settings.interactive !== undefined ? settings.interactive : true,\r\n    inputManager,\r\n    animationTimer,\r\n    rendererInitialized = false,\r\n    updateCenterRequired = true,\r\n\r\n    currentStep = 0,\r\n    totalIterationsCount = 0,\r\n    isStable = false,\r\n    userInteraction = false,\r\n    isPaused = false,\r\n\r\n    transform = {\r\n      offsetX: 0,\r\n      offsetY: 0,\r\n      scale: 1\r\n    },\r\n\r\n    publicEvents = eventify({}),\r\n    containerDrag;\r\n\r\n  return {\r\n    /**\r\n     * Performs rendering of the graph.\r\n     *\r\n     * @param iterationsCount if specified renderer will run only given number of iterations\r\n     * and then stop. Otherwise graph rendering is performed infinitely.\r\n     *\r\n     * Note: if rendering stopped by used started dragging nodes or new nodes were added to the\r\n     * graph renderer will give run more iterations to reflect changes.\r\n     */\r\n    run: function(iterationsCount) {\r\n\r\n      if (!rendererInitialized) {\r\n        prepareSettings();\r\n        prerender();\r\n\r\n        initDom();\r\n        updateCenter();\r\n        listenToEvents();\r\n\r\n        rendererInitialized = true;\r\n      }\r\n\r\n      renderIterations(iterationsCount);\r\n\r\n      return this;\r\n    },\r\n\r\n    reset: function() {\r\n      graphics.resetScale();\r\n      updateCenter();\r\n      transform.scale = 1;\r\n    },\r\n\r\n    pause: function() {\r\n      isPaused = true;\r\n      animationTimer.stop();\r\n    },\r\n\r\n    resume: function() {\r\n      isPaused = false;\r\n      animationTimer.restart();\r\n    },\r\n\r\n    rerender: function() {\r\n      renderGraph();\r\n      return this;\r\n    },\r\n\r\n    zoomOut: function() {\r\n      return scale(true);\r\n    },\r\n\r\n    zoomIn: function() {\r\n      return scale(false);\r\n    },\r\n\r\n    /**\r\n     * Centers renderer at x,y graph's coordinates\r\n     */\r\n    moveTo: function(x, y) {\r\n      graphics.graphCenterChanged(transform.offsetX - x * transform.scale, transform.offsetY - y * transform.scale);\r\n      renderGraph();\r\n    },\r\n\r\n    /**\r\n     * Gets current graphics object\r\n     */\r\n    getGraphics: function() {\r\n      return graphics;\r\n    },\r\n\r\n    /**\r\n     * Removes this renderer and deallocates all resources/timers\r\n     */\r\n    dispose: function() {\r\n      stopListenToEvents(); // I quit!\r\n    },\r\n\r\n    on: function(eventName, callback) {\r\n      publicEvents.on(eventName, callback);\r\n      return this;\r\n    },\r\n\r\n    off: function(eventName, callback) {\r\n      publicEvents.off(eventName, callback);\r\n      return this;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Checks whether given interaction (node/scroll) is enabled\r\n   */\r\n  function isInteractive(interactionName) {\r\n    if (typeof interactive === 'string') {\r\n      return interactive.indexOf(interactionName) >= 0;\r\n    } else if (typeof interactive === 'boolean') {\r\n      return interactive;\r\n    }\r\n    return true; // default setting\r\n  }\r\n\r\n  function prepareSettings() {\r\n    container = container || window.document.body;\r\n    layout = layout || forceDirected(graph, {\r\n      springLength: 80,\r\n      springCoeff: 0.0002,\r\n    });\r\n    graphics = graphics || svgGraphics(graph, {\r\n      container: container\r\n    });\r\n\r\n    if (!settings.hasOwnProperty('renderLinks')) {\r\n      settings.renderLinks = true;\r\n    }\r\n\r\n    settings.prerender = settings.prerender || 0;\r\n    inputManager = (graphics.inputManager || domInputManager)(graph, graphics);\r\n  }\r\n\r\n  function renderGraph() {\r\n    graphics.beginRender();\r\n\r\n    // todo: move this check graphics\r\n    if (settings.renderLinks) {\r\n      graphics.renderLinks();\r\n    }\r\n    graphics.renderNodes();\r\n    graphics.endRender();\r\n  }\r\n\r\n  function onRenderFrame() {\r\n    isStable = layout.step() && !userInteraction;\r\n    renderGraph();\r\n\r\n    return !isStable;\r\n  }\r\n\r\n  function renderIterations(iterationsCount) {\r\n    if (animationTimer) {\r\n      totalIterationsCount += iterationsCount;\r\n      return;\r\n    }\r\n\r\n    if (iterationsCount) {\r\n      totalIterationsCount += iterationsCount;\r\n\r\n      animationTimer = timer(function() {\r\n        return onRenderFrame();\r\n      }, FRAME_INTERVAL);\r\n    } else {\r\n      currentStep = 0;\r\n      totalIterationsCount = 0;\r\n      animationTimer = timer(onRenderFrame, FRAME_INTERVAL);\r\n    }\r\n  }\r\n\r\n  function resetStable() {\r\n    if (isPaused) {\r\n      return;\r\n    }\r\n\r\n    isStable = false;\r\n    animationTimer.restart();\r\n  }\r\n\r\n  function prerender() {\r\n    // To get good initial positions for the graph\r\n    // perform several prerender steps in background.\r\n    if (typeof settings.prerender === 'number' && settings.prerender > 0) {\r\n      for (var i = 0; i < settings.prerender; i += 1) {\r\n        layout.step();\r\n      }\r\n    }\r\n  }\r\n\r\n  function updateCenter() {\r\n    var graphRect = layout.getGraphRect(),\r\n      containerSize = getDimension(container);\r\n\r\n    var cx = (graphRect.x2 + graphRect.x1) / 2;\r\n    var cy = (graphRect.y2 + graphRect.y1) / 2;\r\n    transform.offsetX = containerSize.width / 2 - (cx * transform.scale - cx);\r\n    transform.offsetY = containerSize.height / 2 - (cy * transform.scale - cy);\r\n    graphics.graphCenterChanged(transform.offsetX, transform.offsetY);\r\n\r\n    updateCenterRequired = false;\r\n  }\r\n\r\n  function createNodeUi(node) {\r\n    var nodePosition = layout.getNodePosition(node.id);\r\n    graphics.addNode(node, nodePosition);\r\n  }\r\n\r\n  function removeNodeUi(node) {\r\n    graphics.releaseNode(node);\r\n  }\r\n\r\n  function createLinkUi(link) {\r\n    var linkPosition = layout.getLinkPosition(link.id);\r\n    graphics.addLink(link, linkPosition);\r\n  }\r\n\r\n  function removeLinkUi(link) {\r\n    graphics.releaseLink(link);\r\n  }\r\n\r\n  function listenNodeEvents(node) {\r\n    if (!isInteractive('node')) {\r\n      return;\r\n    }\r\n\r\n    var wasPinned = false;\r\n\r\n    // TODO: This may not be memory efficient. Consider reusing handlers object.\r\n    inputManager.bindDragNDrop(node, {\r\n      onStart: function() {\r\n        wasPinned = layout.isNodePinned(node);\r\n        layout.pinNode(node, true);\r\n        userInteraction = true;\r\n        resetStable();\r\n      },\r\n      onDrag: function(e, offset) {\r\n        var oldPos = layout.getNodePosition(node.id);\r\n        layout.setNodePosition(node.id,\r\n          oldPos.x + offset.x / transform.scale,\r\n          oldPos.y + offset.y / transform.scale);\r\n\r\n        userInteraction = true;\r\n\r\n        renderGraph();\r\n      },\r\n      onStop: function() {\r\n        layout.pinNode(node, wasPinned);\r\n        userInteraction = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  function releaseNodeEvents(node) {\r\n    inputManager.bindDragNDrop(node, null);\r\n  }\r\n\r\n  function initDom() {\r\n    graphics.init(container);\r\n\r\n    graph.forEachNode(createNodeUi);\r\n\r\n    if (settings.renderLinks) {\r\n      graph.forEachLink(createLinkUi);\r\n    }\r\n  }\r\n\r\n  function releaseDom() {\r\n    graphics.release(container);\r\n  }\r\n\r\n  function processNodeChange(change) {\r\n    var node = change.node;\r\n\r\n    if (change.changeType === 'add') {\r\n      createNodeUi(node);\r\n      listenNodeEvents(node);\r\n      if (updateCenterRequired) {\r\n        updateCenter();\r\n      }\r\n    } else if (change.changeType === 'remove') {\r\n      releaseNodeEvents(node);\r\n      removeNodeUi(node);\r\n      if (graph.getNodesCount() === 0) {\r\n        updateCenterRequired = true; // Next time when node is added - center the graph.\r\n      }\r\n    } else if (change.changeType === 'update') {\r\n      releaseNodeEvents(node);\r\n      removeNodeUi(node);\r\n\r\n      createNodeUi(node);\r\n      listenNodeEvents(node);\r\n    }\r\n  }\r\n\r\n  function processLinkChange(change) {\r\n    var link = change.link;\r\n    if (change.changeType === 'add') {\r\n      if (settings.renderLinks) {\r\n        createLinkUi(link);\r\n      }\r\n    } else if (change.changeType === 'remove') {\r\n      if (settings.renderLinks) {\r\n        removeLinkUi(link);\r\n      }\r\n    } else if (change.changeType === 'update') {\r\n      throw 'Update type is not implemented. TODO: Implement me!';\r\n    }\r\n  }\r\n\r\n  function onGraphChanged(changes) {\r\n    var i, change;\r\n    for (i = 0; i < changes.length; i += 1) {\r\n      change = changes[i];\r\n      if (change.node) {\r\n        processNodeChange(change);\r\n      } else if (change.link) {\r\n        processLinkChange(change);\r\n      }\r\n    }\r\n\r\n    resetStable();\r\n  }\r\n\r\n  function onWindowResized() {\r\n    updateCenter();\r\n    onRenderFrame();\r\n  }\r\n\r\n  function releaseContainerDragManager() {\r\n    if (containerDrag) {\r\n      containerDrag.release();\r\n      containerDrag = null;\r\n    }\r\n  }\r\n\r\n  function releaseGraphEvents() {\r\n    graph.off('changed', onGraphChanged);\r\n  }\r\n\r\n  function scale(out, scrollPoint) {\r\n    if (!scrollPoint) {\r\n      var containerSize = getDimension(container);\r\n      scrollPoint = {\r\n        x: containerSize.width / 2,\r\n        y: containerSize.height / 2\r\n      };\r\n    }\r\n    var scaleFactor = Math.pow(1 + 0.4, out ? -0.2 : 0.2);\r\n    transform.scale = graphics.scale(scaleFactor, scrollPoint);\r\n\r\n    renderGraph();\r\n    publicEvents.fire('scale', transform.scale);\r\n\r\n    return transform.scale;\r\n  }\r\n\r\n  function listenToEvents() {\r\n    windowEvents.on('resize', onWindowResized);\r\n\r\n    releaseContainerDragManager();\r\n    if (isInteractive('drag')) {\r\n      containerDrag = dragndrop(container);\r\n      containerDrag.onDrag(function(e, offset) {\r\n        graphics.translateRel(offset.x, offset.y);\r\n\r\n        renderGraph();\r\n        publicEvents.fire('drag', offset);\r\n      });\r\n    }\r\n\r\n    if (isInteractive('scroll')) {\r\n      if (!containerDrag) {\r\n        containerDrag = dragndrop(container);\r\n      }\r\n      containerDrag.onScroll(function(e, scaleOffset, scrollPoint) {\r\n        scale(scaleOffset < 0, scrollPoint);\r\n      });\r\n    }\r\n\r\n    graph.forEachNode(listenNodeEvents);\r\n\r\n    releaseGraphEvents();\r\n    graph.on('changed', onGraphChanged);\r\n  }\r\n\r\n  function stopListenToEvents() {\r\n    rendererInitialized = false;\r\n    releaseGraphEvents();\r\n    releaseContainerDragManager();\r\n    windowEvents.off('resize', onWindowResized);\r\n    publicEvents.off();\r\n    animationTimer.stop();\r\n\r\n    graph.forEachLink(function(link) {\r\n      if (settings.renderLinks) {\r\n        removeLinkUi(link);\r\n      }\r\n    });\r\n\r\n    graph.forEachNode(function(node) {\r\n      releaseNodeEvents(node);\r\n      removeNodeUi(node);\r\n    });\r\n\r\n    layout.dispose();\r\n    releaseDom();\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/View/renderer.js\n// module id = 610\n// module chunks = 2","var nullEvents = require('./nullEvents.js');\r\n\r\nmodule.exports = createDocumentEvents();\r\n\r\nfunction createDocumentEvents() {\r\n  if (typeof window === 'undefined') {\r\n    return nullEvents;\r\n  }\r\n\r\n  return {\r\n    on: on,\r\n    off: off\r\n  };\r\n}\r\n\r\nfunction on(eventName, handler) {\r\n  window.addEventListener(eventName, handler);\r\n}\r\n\r\nfunction off(eventName, handler) {\r\n  window.removeEventListener(eventName, handler);\r\n}\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/Utils/windowEvents.js\n// module id = 611\n// module chunks = 2","\r\nvar glUtils = require('vivagraphjs/src/WebGL/webgl.js');\r\n\r\n\r\nexport function webglNodeProgram() {\r\n    var ATTRIBUTES_PER_PRIMITIVE = 4; // Primitive is point, x, y, size, color\r\n    // x, y, z - floats, color = uint.\r\n    var BYTES_PER_NODE = 3 * Float32Array.BYTES_PER_ELEMENT + Uint32Array.BYTES_PER_ELEMENT;\r\n    var nodesFS = `\r\n        precision mediump float;\r\n        varying vec4 color;\r\n\r\n        void main(void) {\r\n           gl_FragColor = color;\r\n        }\r\n    `;\r\n\r\n    var nodesVS = `\r\n        attribute vec3 a_vertexPos;\r\n        attribute vec4 a_color;\r\n        uniform vec2 u_screenSize;\r\n        uniform mat4 u_transform;\r\n        varying vec4 color;\r\n\r\n        void main(void) {\r\n           gl_Position = u_transform * vec4(a_vertexPos.xy/u_screenSize, 0, 1);\r\n           gl_PointSize = a_vertexPos.z * u_transform[0][0];\r\n           color = a_color.abgr;\r\n        }\r\n    `;\r\n\r\n    var program;\r\n    var gl;\r\n    var buffer;\r\n    var locations;\r\n    var utils;\r\n    var storage = new ArrayBuffer(16 * BYTES_PER_NODE);\r\n    var positions = new Float32Array(storage);\r\n    var colors = new Uint32Array(storage);\r\n    var nodesCount = 0;\r\n    var width;\r\n    var height;\r\n    var transform;\r\n    var sizeDirty;\r\n\r\n    return {\r\n        load: load,\r\n\r\n        /**\r\n         * Updates position of node in the buffer of nodes.\r\n         *\r\n         * @param idx - index of current node.\r\n         * @param pos - new position of the node.\r\n         */\r\n        position: position,\r\n\r\n        updateTransform: updateTransform,\r\n\r\n        updateSize: updateSize,\r\n\r\n        removeNode: removeNode,\r\n\r\n        createNode: createNode,\r\n\r\n        replaceProperties: replaceProperties,\r\n\r\n        render: render\r\n    };\r\n\r\n    function ensureEnoughStorage() {\r\n        if ((nodesCount + 1) * BYTES_PER_NODE >= storage.byteLength) {\r\n            // Every time we run out of space create new array twice bigger.\r\n            // TODO: it seems buffer size is limited. Consider using multiple arrays for huge graphs\r\n            var extendedStorage = new ArrayBuffer(storage.byteLength * 2),\r\n                extendedPositions = new Float32Array(extendedStorage),\r\n                extendedColors = new Uint32Array(extendedStorage);\r\n\r\n            extendedColors.set(colors); // should be enough to copy just one view.\r\n            positions = extendedPositions;\r\n            colors = extendedColors;\r\n            storage = extendedStorage;\r\n        }\r\n    }\r\n\r\n    function load(glContext) {\r\n        gl = glContext;\r\n        utils = glUtils(glContext);\r\n\r\n        program = utils.createProgram(nodesVS, nodesFS);\r\n        gl.useProgram(program);\r\n        locations = utils.getLocations(program, ['a_vertexPos', 'a_color', 'u_screenSize', 'u_transform']);\r\n\r\n        gl.enableVertexAttribArray(locations.vertexPos);\r\n        gl.enableVertexAttribArray(locations.color);\r\n\r\n        buffer = gl.createBuffer();\r\n    }\r\n\r\n    function position(nodeUI, pos) {\r\n        var idx = nodeUI.id;\r\n\r\n        positions[idx * ATTRIBUTES_PER_PRIMITIVE] = pos.x;\r\n        positions[idx * ATTRIBUTES_PER_PRIMITIVE + 1] = -pos.y;\r\n        positions[idx * ATTRIBUTES_PER_PRIMITIVE + 2] = nodeUI.size;\r\n\r\n        colors[idx * ATTRIBUTES_PER_PRIMITIVE + 3] = nodeUI.color;\r\n    }\r\n\r\n    function updateTransform(newTransform) {\r\n        sizeDirty = true;\r\n        transform = newTransform;\r\n    }\r\n\r\n    function updateSize(w, h) {\r\n        width = w;\r\n        height = h;\r\n        sizeDirty = true;\r\n    }\r\n\r\n    function removeNode(node) {\r\n        if (nodesCount > 0) {\r\n            nodesCount -= 1;\r\n        }\r\n\r\n        if (node.id < nodesCount && nodesCount > 0) {\r\n            // we can use colors as a 'view' into array array buffer.\r\n            utils.copyArrayPart(colors, node.id * ATTRIBUTES_PER_PRIMITIVE, nodesCount * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);\r\n        }\r\n    }\r\n\r\n    function createNode() {\r\n        ensureEnoughStorage();\r\n        nodesCount += 1;\r\n    }\r\n\r\n    function replaceProperties(/* replacedNode, newNode */) {}\r\n\r\n    function render() {\r\n        gl.useProgram(program);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, storage, gl.DYNAMIC_DRAW);\r\n\r\n        if (sizeDirty) {\r\n            sizeDirty = false;\r\n            gl.uniformMatrix4fv(locations.transform, false, transform);\r\n            gl.uniform2f(locations.screenSize, width, height);\r\n        }\r\n\r\n        gl.vertexAttribPointer(locations.vertexPos, 3, gl.FLOAT, false, ATTRIBUTES_PER_PRIMITIVE * Float32Array.BYTES_PER_ELEMENT, 0);\r\n        gl.vertexAttribPointer(locations.color, 4, gl.UNSIGNED_BYTE, true, ATTRIBUTES_PER_PRIMITIVE * Float32Array.BYTES_PER_ELEMENT, 3 * 4);\r\n\r\n        gl.drawArrays(gl.POINTS, 0, nodesCount);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/webglNodeProgram.ts","/**\r\n * @fileOverview Utility functions for webgl rendering.\r\n *\r\n * @author Andrei Kashcha (aka anvaka) / http://anvaka.blogspot.com\r\n */\r\n\r\nmodule.exports = webgl;\r\n\r\nfunction webgl(gl) {\r\n\r\n  return {\r\n    createProgram: createProgram,\r\n    extendArray: extendArray,\r\n    copyArrayPart: copyArrayPart,\r\n    swapArrayPart: swapArrayPart,\r\n    getLocations: getLocations,\r\n    context: gl\r\n  };\r\n\r\n  function createShader(shaderText, type) {\r\n    var shader = gl.createShader(type);\r\n    gl.shaderSource(shader, shaderText);\r\n    gl.compileShader(shader);\r\n\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n      var msg = gl.getShaderInfoLog(shader);\r\n      window.alert(msg);\r\n      throw msg;\r\n    }\r\n\r\n    return shader;\r\n  }\r\n\r\n  function createProgram(vertexShaderSrc, fragmentShaderSrc) {\r\n    var program = gl.createProgram();\r\n    var vs = createShader(vertexShaderSrc, gl.VERTEX_SHADER);\r\n    var fs = createShader(fragmentShaderSrc, gl.FRAGMENT_SHADER);\r\n\r\n    gl.attachShader(program, vs);\r\n    gl.attachShader(program, fs);\r\n    gl.linkProgram(program);\r\n\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n      var msg = gl.getShaderInfoLog(program);\r\n      window.alert(msg);\r\n      throw msg;\r\n    }\r\n\r\n    return program;\r\n  }\r\n\r\n  function extendArray(buffer, itemsInBuffer, elementsPerItem) {\r\n    if ((itemsInBuffer + 1) * elementsPerItem > buffer.length) {\r\n      // Every time we run out of space create new array twice bigger.\r\n      // TODO: it seems buffer size is limited. Consider using multiple arrays for huge graphs\r\n      var extendedArray = new Float32Array(buffer.length * elementsPerItem * 2);\r\n      extendedArray.set(buffer);\r\n\r\n      return extendedArray;\r\n    }\r\n\r\n    return buffer;\r\n  }\r\n\r\n  function getLocations(program, uniformOrAttributeNames) {\r\n    var foundLocations = {};\r\n    for (var i = 0; i < uniformOrAttributeNames.length; ++i) {\r\n      var name = uniformOrAttributeNames[i];\r\n      var location = -1;\r\n      if (name[0] === 'a' && name[1] === '_') {\r\n        location = gl.getAttribLocation(program, name);\r\n        if (location === -1) {\r\n          throw new Error(\"Program doesn't have required attribute: \" + name);\r\n        }\r\n\r\n        foundLocations[name.slice(2)] = location;\r\n      } else if (name[0] === 'u' && name[1] === '_') {\r\n        location = gl.getUniformLocation(program, name);\r\n        if (location === null) {\r\n          throw new Error(\"Program doesn't have required uniform: \" + name);\r\n        }\r\n\r\n        foundLocations[name.slice(2)] = location;\r\n      } else {\r\n        throw new Error(\"Couldn't figure out your intent. All uniforms should start with 'u_' prefix, and attributes with 'a_'\");\r\n      }\r\n    }\r\n\r\n    return foundLocations;\r\n  }\r\n}\r\n\r\nfunction copyArrayPart(array, to, from, elementsCount) {\r\n  for (var i = 0; i < elementsCount; ++i) {\r\n    array[to + i] = array[from + i];\r\n  }\r\n}\r\n\r\nfunction swapArrayPart(array, from, to, elementsCount) {\r\n  for (var i = 0; i < elementsCount; ++i) {\r\n    var tmp = array[from + i];\r\n    array[from + i] = array[to + i];\r\n    array[to + i] = tmp;\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vivagraphjs/src/WebGL/webgl.js\n// module id = 62\n// module chunks = 2"],"sourceRoot":""}